androidx.appcompat.widget.Toolbar$SavedState: android.os.Parcelable$Creator CREATOR
com.mapbox.mapboxsdk.Mapbox: Mapbox(android.content.Context,java.lang.String)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: android.graphics.SurfaceTexture surfaceTexture()
com.mapbox.geojson.PointAsCoordinatesTypeAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
androidx.cardview.widget.CardView: void setCardBackgroundColor(android.content.res.ColorStateList)
com.mapbox.geojson.BaseCoordinatesTypeAdapter: com.mapbox.geojson.Point readPoint(com.google.gson.stream.JsonReader)
androidx.appcompat.widget.AppCompatImageButton: android.content.res.ColorStateList getSupportBackgroundTintList()
com.google.android.material.theme.MaterialComponentsViewInflater: MaterialComponentsViewInflater()
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetIconTextFit()
com.mapbox.geojson.Polygon: java.lang.String toString()
com.mapbox.mapboxsdk.style.sources.Source: boolean detached
com.mapbox.geojson.BaseGeometryTypeAdapter: com.google.gson.TypeAdapter stringAdapter
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: SidecarCompat$DistinctSidecarElementCallback(androidx.window.layout.SidecarAdapter,androidx.window.sidecar.SidecarInterface$SidecarCallback)
com.mapbox.mapboxsdk.style.light.Light: long nativePtr
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String SHOW_WEEKLY_AT_DAY_AND_TIME_METHOD
com.google.android.material.internal.NavigationMenuItemView: void setIcon(android.graphics.drawable.Drawable)
android.support.v4.media.AudioAttributesImplApi21Parcelizer: AudioAttributesImplApi21Parcelizer()
androidx.window.embedding.SplitController: androidx.window.embedding.EmbeddingBackend embeddingBackend
androidx.appcompat.widget.AppCompatButton: int[] getAutoSizeTextAvailableSizes()
com.mapbox.mapboxsdk.style.types.FormattedSection: java.lang.String[] getFontStack()
com.mapbox.geojson.Point: com.mapbox.geojson.Point fromLngLat(double,double,double,com.mapbox.geojson.BoundingBox)
com.mapbox.geojson.ListofListofListOfPointCoordinatesTypeAdapter: ListofListofListOfPointCoordinatesTypeAdapter()
com.mapbox.mapboxsdk.style.layers.CircleLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetCircleStrokeOpacityTransition()
androidx.window.layout.WindowInfoTrackerDecorator
org.threeten.bp.chrono.JapaneseChronology
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: androidx.window.embedding.ExtensionEmbeddingBackend this$0
androidx.appcompat.widget.Toolbar: void setLogoDescription(java.lang.CharSequence)
com.mapbox.mapboxsdk.style.types.FormattedSection: java.lang.String textColor
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Long when
kotlinx.coroutines.android.AndroidExceptionPreHandler: java.lang.Object _preHandler
com.mapbox.mapboxsdk.maps.NativeMapView: com.mapbox.mapboxsdk.style.sources.Source nativeGetSource(java.lang.String)
androidx.appcompat.widget.AppCompatEditText: android.content.res.ColorStateList getSupportBackgroundTintList()
com.google.android.material.button.MaterialButton: void setIconResource(int)
com.google.android.material.button.MaterialButton: void setStrokeColor(android.content.res.ColorStateList)
com.mapbox.geojson.MultiLineString: java.lang.String type()
com.mapbox.geojson.BoundingBox: com.mapbox.geojson.BoundingBox fromCoordinates(double,double,double,double,double,double)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void showNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
kotlinx.coroutines.JobSupport$ChildCompletion
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetIconRotationAlignment()
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer ledColor
com.google.android.gms.common.api.Status: android.os.Parcelable$Creator CREATOR
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeRemoveAnnotations(long[])
com.mapbox.mapboxsdk.style.sources.RasterDemSource: void initialize(java.lang.String,java.lang.Object,int)
com.mapbox.geojson.MultiPoint: com.mapbox.geojson.MultiPoint fromLngLats(java.util.List)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetIconTranslateTransition()
androidx.window.R$styleable: int SplitPlaceholderRule_splitMinSmallestWidth
com.mapbox.mapboxsdk.annotations.BubbleLayout
com.mapbox.mapboxsdk.style.layers.FillLayer: void nativeSetFillOpacityTransition(long,long)
org.threeten.bp.Duration
com.mapbox.geojson.FeatureCollection$GsonTypeAdapter
androidx.window.embedding.SplitRuleParser
com.google.gson.TypeAdapter: java.lang.Object fromJson(java.lang.String)
com.mapbox.mapboxsdk.style.layers.Layer: java.lang.String nativeGetSourceId()
androidx.window.layout.WindowInfoTracker: kotlinx.coroutines.flow.Flow windowLayoutInfo(android.app.Activity)
com.mapbox.geojson.gson.GeoJsonAdapterFactory: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath: androidx.core.graphics.PathParser$PathDataNode[] getPathData()
androidx.appcompat.widget.AppCompatRadioButton: void setSupportButtonTintMode(android.graphics.PorterDuff$Mode)
com.mapbox.geojson.BoundingBox: com.mapbox.geojson.BoundingBox fromJson(java.lang.String)
androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView
com.mapbox.mapboxsdk.net.NativeConnectivityListener: long nativePtr
com.mapbox.mapboxsdk.maps.NativeMapView: double nativeGetMaxZoom()
androidx.window.java.R: R()
kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)
androidx.window.layout.SidecarWindowBackend: java.util.concurrent.CopyOnWriteArrayList getWindowLayoutChangeCallbacks()
com.mapbox.geojson.BoundingBox: BoundingBox(com.mapbox.geojson.Point,com.mapbox.geojson.Point)
androidx.window.embedding.ActivityStack: ActivityStack(java.util.List,boolean)
com.google.android.datatransport.cct.internal.NetworkConnectionInfo$MobileSubtype: com.google.android.datatransport.cct.internal.NetworkConnectionInfo$MobileSubtype[] values()
com.mapbox.geojson.Polygon$GsonTypeAdapter: void write(com.google.gson.stream.JsonWriter,com.mapbox.geojson.Polygon)
kotlin.jvm.internal.FunctionReference: boolean equals(java.lang.Object)
androidx.window.layout.SidecarCompat
com.mapbox.mapboxsdk.annotations.Polygon: int fillColor
androidx.appcompat.widget.AppCompatRadioButton: android.content.res.ColorStateList getSupportButtonTintList()
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents Time
com.mapbox.geojson.GeometryCollection: GeometryCollection(java.lang.String,com.mapbox.geojson.BoundingBox,java.util.List)
com.mapbox.mapboxsdk.offline.OfflineManager: void nativePackDatabase(com.mapbox.mapboxsdk.offline.OfflineManager$FileSourceCallback)
androidx.window.embedding.EmbeddingAdapter: java.lang.Object component2(android.util.Pair)
com.mapbox.mapboxsdk.style.sources.Source: java.lang.String TAG
android.support.v4.media.MediaDescriptionCompat: android.os.Parcelable$Creator CREATOR
com.mapbox.mapboxsdk.camera.CameraPosition: double bearing
androidx.window.layout.DisplayCompatHelperApi17: DisplayCompatHelperApi17()
com.mapbox.mapboxsdk.maps.NativeMapView: android.graphics.Bitmap nativeGetImage(java.lang.String)
androidx.media.AudioAttributesCompat: AudioAttributesCompat()
androidx.recyclerview.widget.RecyclerView: void setEdgeEffectFactory(androidx.recyclerview.widget.RecyclerView$EdgeEffectFactory)
androidx.constraintlayout.widget.ConstraintLayout: int getMinWidth()
androidx.core.widget.NestedScrollView: int getNestedScrollAxes()
androidx.appcompat.widget.AppCompatSpinner: android.graphics.drawable.Drawable getPopupBackground()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: float getTrimPathEnd()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback animationCallback
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String TIMESTAMP
androidx.window.layout.WindowMetricsCalculator$Companion: void overrideDecorator(androidx.window.layout.WindowMetricsCalculatorDecorator)
com.mapbox.geojson.Polygon: boolean equals(java.lang.Object)
androidx.window.layout.SidecarAdapter: boolean isEqualSidecarDisplayFeature(androidx.window.sidecar.SidecarDisplayFeature,androidx.window.sidecar.SidecarDisplayFeature)
androidx.window.embedding.EmptyEmbeddingComponent: void setEmbeddingRules(java.util.Set)
com.mapbox.geojson.shifter.CoordinateShifter: java.util.List unshiftPoint(java.util.List)
io.flutter.plugins.firebase.messaging.FlutterFirebaseMessagingReceiver: FlutterFirebaseMessagingReceiver()
com.mapbox.geojson.FeatureCollection$GsonTypeAdapter: void write(com.google.gson.stream.JsonWriter,com.mapbox.geojson.FeatureCollection)
com.google.android.material.floatingactionbutton.FloatingActionButton: void setShowMotionSpec(com.google.android.material.animation.MotionSpec)
com.mapbox.mapboxsdk.annotations.Polygon: java.util.List holes
com.dexterous.flutterlocalnotifications.models.PersonDetails: java.lang.Boolean bot
androidx.window.embedding.SplitController$Companion
androidx.window.layout.DisplayCompatHelperApi28: int safeInsetTop(android.view.DisplayCutout)
io.flutter.embedding.engine.FlutterJNI: java.lang.String[] computePlatformResolvedLocale(java.lang.String[])
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String SCHEDULED_NOTIFICATIONS
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_DRAWABLE_RESOURCE_ERROR_MESSAGE
com.mapbox.mapboxsdk.maps.renderer.MapRenderer: void onDestroy()
com.mapbox.mapboxsdk.style.light.Light: void nativeSetColorTransition(long,long)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetTextHaloColorTransition()
org.threeten.bp.chrono.HijrahChronology: java.lang.Object readResolve()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void registerWith(io.flutter.plugin.common.PluginRegistry$Registrar)
androidx.appcompat.widget.AppCompatImageView: void setImageBitmap(android.graphics.Bitmap)
kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons[] values()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
androidx.window.layout.SidecarAdapter$Companion: androidx.window.layout.DisplayFeature translate$window_release(androidx.window.sidecar.SidecarDisplayFeature,androidx.window.sidecar.SidecarDeviceState)
androidx.appcompat.widget.DropDownListView: void setSelectorEnabled(boolean)
com.mapbox.mapboxsdk.style.sources.VectorSource: void initialize(java.lang.String,java.lang.Object)
androidx.window.layout.FoldingFeature$OcclusionType: FoldingFeature$OcclusionType(java.lang.String)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readSoundInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
com.mapbox.mapboxsdk.text.LocalGlyphRasterizer: android.graphics.Canvas canvas
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: boolean attached
com.google.firebase.messaging.threads.ThreadPriority: com.google.firebase.messaging.threads.ThreadPriority[] values()
kotlinx.coroutines.android.AndroidDispatcherFactory: AndroidDispatcherFactory()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack
androidx.coordinatorlayout.widget.CoordinatorLayout$Behavior: CoordinatorLayout$Behavior(android.content.Context,android.util.AttributeSet)
androidx.window.layout.HardwareFoldingFeature$Type: androidx.window.layout.HardwareFoldingFeature$Type access$getHINGE$cp()
com.mapbox.mapboxsdk.maps.renderer.glsurfaceview.MapboxGLSurfaceView: void setEGLWindowSurfaceFactory(android.opengl.GLSurfaceView$EGLWindowSurfaceFactory)
kotlinx.coroutines.DefaultExecutor: java.lang.Thread _thread
com.google.firebase.messaging.reporting.MessagingClientEvent$MessageType: com.google.firebase.messaging.reporting.MessagingClientEvent$MessageType[] values()
com.google.firebase.installations.local.PersistedInstallation$RegistrationStatus: com.google.firebase.installations.local.PersistedInstallation$RegistrationStatus valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void saveScheduledNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
com.mapbox.mapboxsdk.maps.renderer.egl.EGLConfigChooser$BufferFormat: com.mapbox.mapboxsdk.maps.renderer.egl.EGLConfigChooser$BufferFormat valueOf(java.lang.String)
com.mapbox.geojson.Feature: java.lang.String id
androidx.recyclerview.widget.RecyclerView$LayoutManager: RecyclerView$LayoutManager()
com.mapbox.geojson.BoundingBox: double south()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String WHEN
android.support.v4.media.AudioAttributesImplApi21Parcelizer: androidx.media.AudioAttributesImplApi21 read(androidx.versionedparcelable.VersionedParcel)
androidx.appcompat.app.AppCompatViewInflater: androidx.appcompat.widget.AppCompatButton createButton(android.content.Context,android.util.AttributeSet)
androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Rect computeWindowBoundsQ$window_release(android.app.Activity)
androidx.window.embedding.SplitController: androidx.window.embedding.SplitController globalInstance
com.mapbox.mapboxsdk.location.LocationIndicatorLayer: java.lang.Object nativeGetLocation()
androidx.appcompat.widget.ButtonBarLayout
com.mapbox.geojson.Feature: com.mapbox.geojson.BoundingBox bbox()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: com.google.gson.Gson gson
com.google.android.material.internal.NavigationMenuItemView: void setTextColor(android.content.res.ColorStateList)
androidx.appcompat.widget.AppCompatRadioButton: int getCompoundPaddingLeft()
kotlin.coroutines.jvm.internal.ContinuationImpl: void releaseIntercepted()
com.google.android.material.floatingactionbutton.FloatingActionButton: boolean getUseCompatPadding()
androidx.appcompat.view.menu.ListMenuItemView: void setTitle(java.lang.CharSequence)
androidx.window.core.Version: Version(int,int,int,java.lang.String,kotlin.jvm.internal.DefaultConstructorMarker)
com.google.gson.JsonElement
com.mapbox.mapboxsdk.maps.renderer.MapRendererRunnable: MapRendererRunnable(long)
androidx.window.embedding.SplitPairRule: boolean getClearTop()
io.flutter.plugin.platform.SingleViewPresentation: android.widget.FrameLayout container
androidx.window.layout.WindowMetricsCalculator$Companion$reset$1: java.lang.Object invoke(java.lang.Object)
io.flutter.view.FlutterCallbackInformation: java.lang.String callbackName
com.mapbox.mapboxsdk.style.layers.FillLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetFillOutlineColorTransition()
com.dexterous.flutterlocalnotifications.utils.StringUtils: java.lang.Boolean isNullOrEmpty(java.lang.String)
com.mapbox.mapboxsdk.annotations.Polygon
com.mapbox.mapboxsdk.snapshotter.MapSnapshot: android.graphics.PointF pixelForLatLng(com.mapbox.mapboxsdk.geometry.LatLng)
com.google.android.material.circularreveal.CircularRevealFrameLayout: int getCircularRevealScrimColor()
com.google.android.datatransport.cct.internal.QosTier: com.google.android.datatransport.cct.internal.QosTier[] values()
androidx.window.embedding.ExtensionEmbeddingBackend$Companion: ExtensionEmbeddingBackend$Companion()
android.support.v4.media.session.ParcelableVolumeInfo: android.os.Parcelable$Creator CREATOR
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: android.app.Activity $activity
androidx.window.layout.SidecarCompat: java.lang.String TAG
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$202(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,boolean)
io.flutter.embedding.android.FlutterImageView$SurfaceKind: io.flutter.embedding.android.FlutterImageView$SurfaceKind[] values()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List getFinalClippingPaths()
androidx.window.layout.WindowMetricsCalculatorCompat: androidx.window.layout.WindowMetricsCalculatorCompat INSTANCE
com.mapbox.geojson.BoundingBox: double west()
com.mapbox.mapboxsdk.style.layers.SymbolLayer: void nativeSetTextOpacityTransition(long,long)
androidx.appcompat.app.AppCompatViewInflater: java.util.Map sConstructorMap
androidx.core.app.CoreComponentFactory
androidx.appcompat.widget.SearchView: int getPreferredHeight()
com.mapbox.geojson.Feature: com.google.gson.JsonObject properties()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float getScaleX()
androidx.media.AudioAttributesImplApi21Parcelizer: AudioAttributesImplApi21Parcelizer()
com.mapbox.geojson.LineString: java.lang.String type
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.PlatformViewFactory viewFactory
androidx.appcompat.widget.LinearLayoutCompat: void setBaselineAligned(boolean)
com.mapbox.mapboxsdk.style.layers.LineLayer: java.lang.Object nativeGetLineColor()
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: androidx.window.layout.WindowLayoutInfo lastKnownValue
com.mapbox.mapboxsdk.snapshotter.MapSnapshotter: long nativePtr
androidx.appcompat.widget.AppCompatCheckBox: android.graphics.PorterDuff$Mode getSupportButtonTintMode()
com.baseflow.geolocator.location.LocationAccuracyStatus: com.baseflow.geolocator.location.LocationAccuracyStatus[] values()
okhttp3.Protocol: okhttp3.Protocol[] values()
androidx.window.embedding.SplitInfo: float getSplitRatio()
androidx.core.widget.NestedScrollView: void setNestedScrollingEnabled(boolean)
com.mapbox.mapboxsdk.style.layers.FillExtrusionLayer: void nativeSetFillExtrusionColorTransition(long,long)
org.threeten.bp.MonthDay: java.lang.Object writeReplace()
com.mapbox.mapboxsdk.offline.OfflineRegion: OfflineRegion(long,com.mapbox.mapboxsdk.storage.FileSource,long,com.mapbox.mapboxsdk.offline.OfflineRegionDefinition,byte[])
com.google.android.material.appbar.AppBarLayout$ScrollingViewBehavior
androidx.window.layout.SidecarAdapter$Companion: int getSidecarDevicePosture$window_release(androidx.window.sidecar.SidecarDeviceState)
com.mapbox.mapboxsdk.log.Logger: void i(java.lang.String,java.lang.String,java.lang.Throwable)
androidx.core.content.ContextCompat$Api23Impl: java.lang.Object getSystemService(android.content.Context,java.lang.Class)
androidx.window.layout.SidecarAdapter: java.util.List translate(java.util.List,androidx.window.sidecar.SidecarDeviceState)
androidx.appcompat.app.AppCompatViewInflater: java.lang.Object[] mConstructorArgs
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetTextWritingMode()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean onlyAlertOnce
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: java.lang.String id
com.mapbox.mapboxsdk.style.layers.LineLayer: java.lang.Object nativeGetLineCap()
com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout: void setOnLayoutChangeListener(com.google.android.material.snackbar.BaseTransientBottomBar$OnLayoutChangeListener)
com.mapbox.mapboxsdk.util.DefaultStyle: DefaultStyle(java.lang.String,java.lang.String,int)
androidx.window.embedding.EmbeddingCompat: java.lang.String TAG
androidx.window.layout.FoldingFeature$OcclusionType: androidx.window.layout.FoldingFeature$OcclusionType FULL
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void deleteNotificationChannelGroup(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.google.gson.JsonElement: com.google.gson.JsonNull getAsJsonNull()
com.mapbox.mapboxsdk.maps.renderer.MapRendererRunnable: long nativePtr
androidx.window.embedding.MatcherUtils: java.lang.String sMatchersTag
androidx.window.layout.FoldingFeature: androidx.window.layout.FoldingFeature$OcclusionType getOcclusionType()
androidx.constraintlayout.widget.Guideline: void setGuidelineBegin(int)
kotlinx.coroutines.channels.AbstractSendChannel$SendBuffered
io.flutter.embedding.engine.FlutterJNI: void prefetchDefaultFontManager()
io.flutter.embedding.android.FlutterSplashView$SavedState: android.os.Bundle access$702(io.flutter.embedding.android.FlutterSplashView$SavedState,android.os.Bundle)
android.support.v4.media.session.PlaybackStateCompat$CustomAction: android.os.Parcelable$Creator CREATOR
com.mapbox.mapboxsdk.Mapbox: void validateMapbox()
com.mapbox.geojson.shifter.CoordinateShifterManager: com.mapbox.geojson.shifter.CoordinateShifter getCoordinateShifter()
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object L$2
com.mapbox.geojson.MultiLineString: com.mapbox.geojson.MultiLineString fromLineStrings(java.util.List,com.mapbox.geojson.BoundingBox)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: void onPrepare(android.view.WindowInsetsAnimation)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String TIMEOUT_AFTER
com.mapbox.mapboxsdk.style.sources.ImageSource: void nativeSetUrl(java.lang.String)
com.mapbox.geojson.BaseCoordinatesTypeAdapter: void writePointList(com.google.gson.stream.JsonWriter,java.util.List)
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object invoke(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)
com.mapbox.geojson.FeatureCollection: java.util.List features()
com.mapbox.geojson.MultiPolygon$GsonTypeAdapter: MultiPolygon$GsonTypeAdapter(com.google.gson.Gson)
androidx.window.embedding.EmbeddingRule
com.mapbox.mapboxsdk.Mapbox: java.lang.String apiKey
com.mapbox.mapboxsdk.style.layers.HeatmapLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetHeatmapOpacityTransition()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ONLY_ALERT_ONCE
com.mapbox.geojson.BaseGeometryTypeAdapter: com.google.gson.TypeAdapter coordinatesAdapter
com.mapbox.geojson.utils.GeoJsonUtils: GeoJsonUtils()
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction[] values()
androidx.window.embedding.EmbeddingCompat: androidx.window.embedding.EmbeddingAdapter adapter
androidx.window.core.Bounds: int left
com.mapbox.mapboxsdk.maps.NativeMapView: boolean nativeGetDebug()
androidx.window.layout.WindowInfoTracker$Companion: void reset()
kotlin.reflect.KVisibility: kotlin.reflect.KVisibility[] values()
kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable getReflected()
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI nativeSpawn(long,java.lang.String,java.lang.String,java.lang.String,java.util.List)
com.mapbox.geojson.BaseGeometryTypeAdapter
androidx.appcompat.widget.AppCompatTextView: androidx.core.text.PrecomputedTextCompat$Params getTextMetricsParamsCompat()
com.mapbox.mapboxsdk.maps.renderer.egl.EGLConfigChooser$DepthStencilFormat: com.mapbox.mapboxsdk.maps.renderer.egl.EGLConfigChooser$DepthStencilFormat valueOf(java.lang.String)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: void releaseIntercepted()
com.google.firebase.FirebaseCommonRegistrar: FirebaseCommonRegistrar()
com.mapbox.mapboxsdk.maps.NativeMapView: com.mapbox.mapboxsdk.style.layers.Layer[] nativeGetLayers()
androidx.window.embedding.SplitController: void initialize(android.content.Context,int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: androidx.core.app.NotificationManagerCompat getNotificationManager(android.content.Context)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean usesChronometer
com.mapbox.mapboxsdk.maps.widgets.CompassView: android.graphics.drawable.Drawable getCompassImage()
androidx.appcompat.widget.AppCompatImageButton: android.content.res.ColorStateList getSupportImageTintList()
com.mapbox.geojson.MultiPoint$GsonTypeAdapter: com.mapbox.geojson.MultiPoint read(com.google.gson.stream.JsonReader)
androidx.window.layout.SidecarWindowBackend: void unregisterLayoutChangeCallback(androidx.core.util.Consumer)
com.google.firebase.installations.FirebaseInstallationsRegistrar: java.util.List getComponents()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean hasInvalidIcon(io.flutter.plugin.common.MethodChannel$Result,java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.Integer tryParseInt(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: android.os.Looper mainLooper
com.dexterous.flutterlocalnotifications.NotificationStyle: com.dexterous.flutterlocalnotifications.NotificationStyle BigText
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String scheduledDateTime
io.flutter.embedding.engine.FlutterJNI: void setAccessibilityDelegate(io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate)
com.mapbox.mapboxsdk.snapshotter.MapSnapshotter: void nativeAddLayerAt(long,int)
com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory: java.lang.Class access$200(com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory)
com.mapbox.geojson.Feature: com.mapbox.geojson.Feature fromJson(java.lang.String)
androidx.window.layout.SidecarWindowBackend: java.util.concurrent.locks.ReentrantLock globalLock
kotlin.jvm.internal.CallableReference: java.lang.Object call(java.lang.Object[])
androidx.appcompat.widget.AppCompatTextView: int getFirstBaselineToTopHeight()
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1: androidx.core.util.Consumer $consumer$inlined
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation: java.lang.Boolean htmlFormatContentTitle
androidx.appcompat.widget.Toolbar: java.lang.CharSequence getLogoDescription()
org.threeten.bp.Year
androidx.appcompat.widget.Toolbar: void setLogo(android.graphics.drawable.Drawable)
androidx.window.layout.DisplayFeature
androidx.window.layout.SidecarCompat$DistinctElementCallback: void onWindowLayoutChanged(android.app.Activity,androidx.window.layout.WindowLayoutInfo)
com.dexterous.flutterlocalnotifications.models.SoundSource: SoundSource(java.lang.String,int)
androidx.activity.ComponentActivity$3
androidx.window.embedding.ExtensionEmbeddingBackend$Companion: ExtensionEmbeddingBackend$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
com.mapbox.mapboxsdk.style.types.FormattedSection: java.lang.String[] fontStack
com.google.android.datatransport.runtime.scheduling.jobscheduling.JobInfoSchedulerService
com.mapbox.geojson.Feature: com.google.gson.JsonElement getProperty(java.lang.String)
androidx.appcompat.widget.AppCompatButton: int getAutoSizeMaxTextSize()
com.mapbox.mapboxsdk.maps.NativeMapView: double nativeGetMinPitch()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String KEY
androidx.window.embedding.EmbeddingInterfaceCompat
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CHANNEL_ACTION
androidx.appcompat.widget.AppCompatAutoCompleteTextView
androidx.annotation.Keep
io.flutter.view.FlutterCallbackInformation: java.lang.String callbackLibraryPath
androidx.appcompat.widget.Toolbar: void setSubtitle(java.lang.CharSequence)
com.google.android.gms.common.annotation.KeepName
com.mapbox.mapboxsdk.location.LocationIndicatorLayer
androidx.window.embedding.SplitRule: int layoutDirection
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_CREATE
androidx.appcompat.widget.AppCompatSpinner: void setSupportBackgroundTintList(android.content.res.ColorStateList)
com.mapbox.mapboxsdk.geometry.ProjectedMeters
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl
io.flutter.embedding.engine.FlutterJNI: void dispatchPlatformMessage(java.lang.String,java.nio.ByteBuffer,int,int)
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String IMPORTANCE
com.mapbox.mapboxsdk.style.layers.CustomLayer: void update()
com.google.gson.JsonArray: com.google.gson.JsonElement deepCopy()
com.google.gson.JsonArray: int hashCode()
io.flutter.embedding.engine.FlutterJNI: void setPlatformViewsController(io.flutter.plugin.platform.PlatformViewsController)
kotlin.reflect.KVisibility: kotlin.reflect.KVisibility valueOf(java.lang.String)
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeSetMaxPitch(double)
androidx.appcompat.app.AppCompatViewInflater: java.lang.String LOG_TAG
com.mapbox.geojson.LineString: com.mapbox.geojson.LineString fromLngLats(double[][])
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.Boolean canCreateNotificationChannel(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails)
android.support.v4.media.AudioAttributesImplApi21Parcelizer: void write(androidx.media.AudioAttributesImplApi21,androidx.versionedparcelable.VersionedParcel)
kotlinx.coroutines.scheduling.WorkQueue: java.lang.Object lastScheduledTask
androidx.window.layout.FoldingFeature$OcclusionType: androidx.window.layout.FoldingFeature$OcclusionType$Companion Companion
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetTextFont()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$302(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,boolean)
androidx.constraintlayout.widget.Placeholder: android.view.View getContent()
com.google.gson.JsonArray: com.google.gson.JsonElement set(int,com.google.gson.JsonElement)
com.google.firebase.messaging.reporting.MessagingClientEvent$Event: com.google.firebase.messaging.reporting.MessagingClientEvent$Event[] values()
io.flutter.embedding.engine.FlutterJNI: void loadLibrary()
androidx.core.content.ContextCompat$Api19Impl: java.io.File[] getObbDirs(android.content.Context)
androidx.cardview.widget.CardView: float getRadius()
com.dexterous.flutterlocalnotifications.models.styles.MessagingStyleInformation: com.dexterous.flutterlocalnotifications.models.PersonDetails person
com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory: com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory registerSubtype(java.lang.Class,java.lang.String)
com.mapbox.mapboxsdk.snapshotter.MapSnapshot: void finalize()
com.google.android.material.button.MaterialButton: int getStrokeWidth()
com.mapbox.geojson.Point: java.lang.String toJson()
androidx.window.layout.DisplayCompatHelperApi28: int safeInsetRight(android.view.DisplayCutout)
androidx.window.embedding.SplitRule: SplitRule(int,int,float,int,int,kotlin.jvm.internal.DefaultConstructorMarker)
androidx.window.layout.SidecarCompat$FirstAttachAdapter: SidecarCompat$FirstAttachAdapter(androidx.window.layout.SidecarCompat,android.app.Activity)
com.google.android.material.floatingactionbutton.FloatingActionButton
com.mapbox.mapboxsdk.log.Logger: void e(java.lang.String,java.lang.String)
com.google.android.material.appbar.HeaderBehavior: HeaderBehavior()
com.mapbox.geojson.MultiLineString: java.lang.String toString()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: float getStrokeWidth()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String PRIORITY
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1(androidx.window.layout.SidecarCompat,android.app.Activity)
androidx.window.core.Version: Version(int,int,int,java.lang.String)
androidx.window.R$attr
com.dexterous.flutterlocalnotifications.models.IconSource
androidx.window.layout.SidecarAdapter
androidx.appcompat.widget.SearchView: void setQueryHint(java.lang.CharSequence)
androidx.appcompat.widget.AppCompatButton: int getAutoSizeStepGranularity()
com.mapbox.geojson.utils.PolylineUtils: java.util.List decode(java.lang.String,int)
com.google.android.material.bottomappbar.BottomAppBar: android.content.res.ColorStateList getBackgroundTint()
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: java.lang.String name
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CANCEL_METHOD
com.google.android.material.transformation.ExpandableBehavior: ExpandableBehavior(android.content.Context,android.util.AttributeSet)
androidx.savedstate.SavedStateRegistry$1
com.google.android.material.button.MaterialButton: void setBackgroundTintMode(android.graphics.PorterDuff$Mode)
kotlin.jvm.internal.FunctionReference: boolean isInline()
androidx.window.embedding.ActivityFilter: boolean equals(java.lang.Object)
com.mapbox.geojson.gson.GeometryGeoJson: com.mapbox.geojson.Geometry fromJson(java.lang.String)
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_STOP
org.threeten.bp.Ser: java.lang.Object readResolve()
com.mapbox.mapboxsdk.util.TileServerOptions: java.lang.String sourceTemplate
com.google.gson.JsonPrimitive: java.lang.Object value
com.dexterous.flutterlocalnotifications.NotificationStyle: com.dexterous.flutterlocalnotifications.NotificationStyle valueOf(java.lang.String)
org.threeten.bp.zone.ZoneOffsetTransitionRule$TimeDefinition: org.threeten.bp.zone.ZoneOffsetTransitionRule$TimeDefinition valueOf(java.lang.String)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetIconIgnorePlacement()
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation: java.lang.Boolean htmlFormatSummaryText
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setTrimPathStart(float)
com.mapbox.geojson.MultiLineString: java.util.List coordinates
androidx.appcompat.widget.AppCompatImageView: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onDetachedFromActivity()
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: androidx.window.layout.SidecarAdapter sidecarAdapter
com.mapbox.mapboxsdk.offline.OfflineManager: long nativePtr
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readLargeIconInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
androidx.appcompat.widget.ScrollingTabContainerView: void setTabSelected(int)
com.mapbox.mapboxsdk.maps.NativeMapView
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
com.mapbox.geojson.shifter.CoordinateShifterManager$1: java.util.List shiftLonLatAlt(double,double,double)
com.mapbox.mapboxsdk.maps.NativeMapView: void onDidFinishLoadingMap()
com.google.android.material.appbar.AppBarLayout$Behavior
androidx.window.layout.FoldingFeature$OcclusionType
kotlinx.coroutines.JobSupport$Finishing: int _isCompleting
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String HTML_FORMAT_CONTENT_TITLE
com.google.android.gms.internal.location.zzbd: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: long calculateRepeatIntervalMilliseconds(com.dexterous.flutterlocalnotifications.models.NotificationDetails)
com.mapbox.mapboxsdk.util.TileServerOptions: java.lang.String uriSchemeAlias
com.mapbox.mapboxsdk.style.light.Light: void nativeSetColor(java.lang.String)
com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory
com.google.android.material.appbar.AppBarLayout: int getPendingAction()
org.threeten.bp.Year: java.lang.Object writeReplace()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String SHOW_DAILY_AT_TIME_METHOD
androidx.recyclerview.widget.RecyclerView: int getScrollState()
org.threeten.bp.temporal.ChronoField: org.threeten.bp.temporal.ChronoField valueOf(java.lang.String)
androidx.window.embedding.SplitPairFilter: SplitPairFilter(android.content.ComponentName,android.content.ComponentName,java.lang.String)
com.google.android.material.button.MaterialButton: android.graphics.drawable.Drawable getIcon()
com.mapbox.mapboxsdk.util.TileServerOptions: java.lang.String spritesTemplate
androidx.constraintlayout.widget.ConstraintHelper: int[] getReferencedIds()
io.flutter.embedding.engine.FlutterOverlaySurface: android.view.Surface surface
com.google.gson.JsonPrimitive: float getAsFloat()
org.threeten.bp.MonthDay
com.mapbox.mapboxsdk.maps.Image: float pixelRatio
com.mapbox.geojson.Polygon: java.lang.String type()
com.mapbox.geojson.GeometryAdapterFactory: com.google.gson.TypeAdapterFactory geometryTypeFactory
androidx.window.embedding.SplitRule: int minSmallestWidth
com.google.android.datatransport.runtime.firebase.transport.LogEventDropped$Reason: com.google.android.datatransport.runtime.firebase.transport.LogEventDropped$Reason[] values()
com.mapbox.mapboxsdk.maps.NativeMapView: com.mapbox.geojson.Feature[] nativeQueryRenderedFeaturesForBox(float,float,float,float,java.lang.String[],java.lang.Object[])
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String BIG_TEXT
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INITIALIZE_METHOD
androidx.window.embedding.SplitController: void removeSplitListener(androidx.core.util.Consumer)
androidx.core.graphics.drawable.IconCompatParcelizer
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation[] values()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: ImeSyncDeferringInsetsCallback(android.view.View,int,int)
androidx.window.layout.SidecarWindowBackend$Companion: androidx.window.layout.ExtensionInterfaceCompat initAndVerifyExtension(android.content.Context)
io.flutter.embedding.engine.FlutterJNI
androidx.appcompat.widget.ActionBarContainer: ActionBarContainer(android.content.Context,android.util.AttributeSet)
com.mapbox.mapboxsdk.maps.NativeMapView: com.mapbox.mapboxsdk.camera.CameraPosition nativeGetCameraPosition()
io.flutter.embedding.engine.FlutterJNI: void nativeCleanupMessageData(long)
org.threeten.bp.Period
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsEmojiModifierBase(int)
androidx.appcompat.widget.AppCompatTextView: void setAutoSizeTextTypeWithDefaults(int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setLights(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
com.mapbox.mapboxsdk.storage.FileSource: void finalize()
androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1: WindowMetricsCalculator$Companion$decorator$1()
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: NotificationChannelDetails()
io.flutter.embedding.engine.FlutterJNI: void setRefreshRateFPS(float)
com.google.gson.JsonObject: void addProperty(java.lang.String,java.lang.String)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void detachFromGLContext()
androidx.window.R$attr: int finishSecondaryWithPrimary
com.mapbox.mapboxsdk.style.layers.RasterLayer: void nativeSetRasterHueRotateTransition(long,long)
org.threeten.bp.chrono.ThaiBuddhistEra: org.threeten.bp.chrono.ThaiBuddhistEra valueOf(java.lang.String)
com.baseflow.geolocator.location.ServiceStatus: com.baseflow.geolocator.location.ServiceStatus[] values()
io.flutter.embedding.engine.FlutterJNI: void nativeSetViewportMetrics(long,float,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int[],int[],int[])
androidx.appcompat.widget.SearchView: void setOnSearchClickListener(android.view.View$OnClickListener)
com.google.android.material.internal.CheckableImageButton: CheckableImageButton(android.content.Context,android.util.AttributeSet)
androidx.window.R$attr: int splitRatio
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: int label
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void repeatNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.lang.Boolean)
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeResetZoom()
com.mapbox.geojson.Feature: com.google.gson.TypeAdapter typeAdapter(com.google.gson.Gson)
com.mapbox.mapboxsdk.style.sources.Source: long nativePtr
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: java.util.List getLastInfo()
com.google.android.material.floatingactionbutton.FloatingActionButton: void setImageResource(int)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ADDITIONAL_FLAGS
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean channelShowBadge
com.mapbox.mapboxsdk.style.layers.BackgroundLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetBackgroundColorTransition()
androidx.window.layout.HardwareFoldingFeature$Type: androidx.window.layout.HardwareFoldingFeature$Type access$getFOLD$cp()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean showProgress
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.SingleViewPresentation$PresentationState detachState()
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken[] values()
com.mapbox.geojson.Point$GsonTypeAdapter: void write(com.google.gson.stream.JsonWriter,com.mapbox.geojson.Point)
com.google.firebase.messaging.reporting.MessagingClientEvent$SDKPlatform: com.google.firebase.messaging.reporting.MessagingClientEvent$SDKPlatform[] values()
org.threeten.bp.chrono.HijrahChronology
com.google.android.datatransport.cct.internal.NetworkConnectionInfo$NetworkType: com.google.android.datatransport.cct.internal.NetworkConnectionInfo$NetworkType[] values()
com.google.gson.JsonPrimitive
com.mapbox.geojson.LineString: com.mapbox.geojson.BoundingBox bbox
com.mapbox.mapboxsdk.style.sources.RasterDemSource: void finalize()
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.HardwareFoldingFeature$Type type
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetSymbolSortKey()
com.google.android.material.appbar.AppBarLayout: void setOrientation(int)
com.mapbox.mapboxsdk.style.layers.HillshadeLayer: void nativeSetHillshadeAccentColorTransition(long,long)
androidx.appcompat.widget.ContentFrameLayout: android.util.TypedValue getMinWidthMajor()
com.google.android.material.internal.ForegroundLinearLayout: void setForeground(android.graphics.drawable.Drawable)
com.mapbox.mapboxsdk.Mapbox: void throwIfApiKeyInvalid(java.lang.String)
androidx.window.R$styleable: int SplitPlaceholderRule_placeholderActivityName
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String channelId
com.mapbox.mapboxsdk.maps.renderer.MapRenderer: void nativeInitialize(com.mapbox.mapboxsdk.maps.renderer.MapRenderer,float,java.lang.String)
com.mapbox.mapboxsdk.style.layers.BackgroundLayer: void nativeSetBackgroundOpacityTransition(long,long)
com.mapbox.mapboxsdk.style.sources.Source: void nativeSetMaxOverscaleFactorForParentTiles(java.lang.Integer)
com.google.android.material.transformation.ExpandableBehavior: ExpandableBehavior()
androidx.window.embedding.ExtensionEmbeddingBackend: void registerSplitListenerForActivity(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
kotlinx.coroutines.DispatchedCoroutine: int _decision
com.mapbox.geojson.gson.BoundingBoxTypeAdapter: void write(com.google.gson.stream.JsonWriter,com.mapbox.geojson.BoundingBox)
com.mapbox.mapboxsdk.style.layers.LineLayer: java.lang.Object nativeGetLineJoin()
androidx.window.layout.FoldingFeature$OcclusionType$Companion: FoldingFeature$OcclusionType$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
com.mapbox.geojson.utils.PolylineUtils: java.util.List simplifyDouglasPeucker(java.util.List,double)
androidx.window.layout.WindowMetricsCalculatorCompat: WindowMetricsCalculatorCompat()
com.mapbox.geojson.GeometryCollection$GsonTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: android.graphics.Matrix finalMatrix
androidx.constraintlayout.widget.Constraints: androidx.constraintlayout.widget.ConstraintSet getConstraintSet()
com.google.android.material.button.MaterialButton: void setRippleColorResource(int)
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness[] values()
androidx.appcompat.widget.Toolbar: int getContentInsetRight()
com.mapbox.mapboxsdk.style.layers.LineLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetLineOpacityTransition()
androidx.appcompat.widget.AppCompatButton: void setBackgroundDrawable(android.graphics.drawable.Drawable)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetSymbolAvoidEdges()
com.mapbox.geojson.MultiPoint$GsonTypeAdapter
com.mapbox.mapboxsdk.geometry.ProjectedMeters: android.os.Parcelable$Creator CREATOR
androidx.appcompat.widget.AppCompatEditText: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
org.threeten.bp.chrono.MinguoEra: java.lang.Object writeReplace()
androidx.window.layout.SidecarCompat: void unregisterComponentCallback(android.app.Activity)
com.google.gson.TypeAdapter: java.lang.Object fromJsonTree(com.google.gson.JsonElement)
org.threeten.bp.Ser: Ser()
kotlinx.coroutines.LazyStandaloneCoroutine
androidx.window.R$styleable: int SplitPairFilter_primaryActivityName
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: java.util.concurrent.locks.ReentrantLock multicastConsumerLock
com.mapbox.mapboxsdk.style.sources.VectorSource: com.mapbox.geojson.Feature[] querySourceFeatures(java.lang.String[],java.lang.Object[])
com.mapbox.geojson.Feature: java.lang.String toString()
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetTextSize()
com.mapbox.geojson.Feature$GsonTypeAdapter: com.google.gson.TypeAdapter boundingBoxTypeAdapter
com.google.gson.JsonArray: boolean remove(com.google.gson.JsonElement)
com.mapbox.geojson.MultiPolygon: java.lang.String TYPE
androidx.window.layout.WindowMetricsCalculator$Companion$overrideDecorator$1: java.lang.Object invoke(java.lang.Object)
com.mapbox.geojson.GeometryAdapterFactory: com.google.gson.TypeAdapterFactory create()
com.mapbox.mapboxsdk.style.layers.CustomLayer
androidx.window.layout.ActivityCompatHelperApi30: androidx.window.layout.ActivityCompatHelperApi30 INSTANCE
com.mapbox.geojson.Feature: java.lang.String type()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float getAlpha()
com.mapbox.mapboxsdk.style.layers.HillshadeLayer: void nativeSetHillshadeShadowColorTransition(long,long)
com.google.gson.JsonPrimitive: JsonPrimitive(java.lang.Number)
com.mapbox.mapboxsdk.style.layers.CircleLayer: void initialize(java.lang.String,java.lang.String)
com.google.android.material.floatingactionbutton.FloatingActionButton$BaseBehavior: FloatingActionButton$BaseBehavior(android.content.Context,android.util.AttributeSet)
androidx.window.R$id: int locale
androidx.appcompat.app.AppCompatViewInflater: java.lang.String[] sClassPrefixList
com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory: java.util.Map labelToSubtype
androidx.window.layout.ExtensionInterfaceCompat
com.google.firebase.installations.remote.TokenResult$ResponseCode: com.google.firebase.installations.remote.TokenResult$ResponseCode[] values()
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String sound
kotlinx.coroutines.ChildHandleNode
com.mapbox.mapboxsdk.style.sources.VectorSource: void finalize()
androidx.window.layout.SidecarWindowBackend
androidx.appcompat.app.AppCompatViewInflater: androidx.appcompat.widget.AppCompatCheckBox createCheckBox(android.content.Context,android.util.AttributeSet)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.RepeatInterval repeatInterval
com.google.gson.JsonPrimitive: JsonPrimitive(java.lang.Character)
com.mapbox.geojson.BaseCoordinatesTypeAdapter
com.mapbox.geojson.MultiPoint: com.mapbox.geojson.MultiPoint fromLngLats(java.util.List,com.mapbox.geojson.BoundingBox)
com.mapbox.geojson.GeometryCollection: java.util.List geometries
com.mapbox.mapboxsdk.style.layers.RasterLayer: void nativeSetRasterOpacityTransition(long,long)
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeSetMinZoom(double)
androidx.window.embedding.MatcherUtils: boolean sDebugMatchers
com.mapbox.mapboxsdk.offline.OfflineManager$ListOfflineRegionsCallback: void onError(java.lang.String)
com.mapbox.mapboxsdk.maps.NativeMapView: boolean nativeRemoveSource(com.mapbox.mapboxsdk.style.sources.Source,long)
com.mapbox.geojson.FeatureCollection: java.lang.String TYPE
io.flutter.embedding.android.FlutterSplashView$SavedState: java.lang.String access$602(io.flutter.embedding.android.FlutterSplashView$SavedState,java.lang.String)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetIconOffset()
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetTextJustify()
androidx.window.embedding.SplitInfo
androidx.appcompat.widget.ContentFrameLayout: android.util.TypedValue getFixedWidthMinor()
androidx.window.core.Bounds: int hashCode()
androidx.appcompat.view.menu.ActionMenuItemView: androidx.appcompat.view.menu.MenuItemImpl getItemData()
kotlinx.coroutines.scheduling.GlobalQueue
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean hasInvalidRawSoundResource(io.flutter.plugin.common.MethodChannel$Result,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
androidx.window.layout.SidecarAdapter$Companion: void setSidecarDevicePosture(androidx.window.sidecar.SidecarDeviceState,int)
com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory$1: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
androidx.appcompat.widget.ScrollingTabContainerView
com.dexterous.flutterlocalnotifications.RepeatInterval: com.dexterous.flutterlocalnotifications.RepeatInterval Weekly
androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView: void setSupportBackgroundTintList(android.content.res.ColorStateList)
androidx.window.embedding.SplitRule$Api30Impl: android.graphics.Rect getBounds(android.view.WindowMetrics)
androidx.window.core.Bounds: int bottom
com.mapbox.mapboxsdk.util.TileServerOptions: java.lang.String defaultStyle
androidx.recyclerview.widget.RecyclerView: void setNestedScrollingEnabled(boolean)
androidx.window.layout.HardwareFoldingFeature$Type$Companion
com.mapbox.geojson.LineString: int hashCode()
com.mapbox.geojson.FeatureCollection: FeatureCollection(java.lang.String,com.mapbox.geojson.BoundingBox,java.util.List)
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.concurrent.CopyOnWriteArrayList getSplitChangeCallbacks()
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event[] $VALUES
org.threeten.bp.OffsetTime: java.lang.Object readResolve()
com.mapbox.geojson.PointAsCoordinatesTypeAdapter
androidx.window.layout.FoldingFeature$Orientation$Companion: FoldingFeature$Orientation$Companion()
androidx.window.layout.SidecarWindowBackend: void setWindowExtension(androidx.window.layout.ExtensionInterfaceCompat)
androidx.window.layout.WindowLayoutInfo: int hashCode()
com.mapbox.geojson.Point: com.mapbox.geojson.Point fromLngLat(double,double,com.mapbox.geojson.BoundingBox)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String GROUP_KEY
com.mapbox.mapboxsdk.style.layers.RasterLayer: java.lang.Object nativeGetRasterHueRotate()
com.mapbox.mapboxsdk.maps.NativeMapView: com.mapbox.mapboxsdk.camera.CameraPosition nativeGetCameraForGeometry(com.mapbox.geojson.Geometry,double,double,double,double,double,double)
com.google.android.material.transformation.TransformationChildCard
kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] values()
com.mapbox.mapboxsdk.maps.NativeMapView: void onSnapshotReady(android.graphics.Bitmap)
androidx.window.embedding.EmbeddingCompat: void setEmbeddingCallback(androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface)
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_RESUME
com.google.gson.JsonArray: char getAsCharacter()
androidx.window.layout.WindowMetricsCalculator$Companion$reset$1: androidx.window.layout.WindowMetricsCalculator$Companion$reset$1 INSTANCE
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: SidecarWindowBackend$WindowLayoutChangeCallbackWrapper(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: java.lang.Class access$100(com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory)
com.mapbox.geojson.MultiPoint: java.util.List coordinates()
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction
com.mapbox.mapboxsdk.maps.MapView: void setMapboxMap(com.mapbox.mapboxsdk.maps.MapboxMap)
androidx.constraintlayout.widget.Constraints
androidx.appcompat.widget.AppCompatRadioButton: android.graphics.PorterDuff$Mode getSupportButtonTintMode()
com.mapbox.geojson.BoundingBox: int hashCode()
com.mapbox.mapboxsdk.snapshotter.MapSnapshotter: void nativeAddSource(com.mapbox.mapboxsdk.style.sources.Source,long)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SHOW_PROGRESS
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)
com.google.android.material.floatingactionbutton.FloatingActionButton: void setRippleColor(android.content.res.ColorStateList)
androidx.appcompat.widget.MenuPopupWindow$MenuDropDownListView
io.flutter.plugins.imagepicker.ImagePickerFileProvider
com.mapbox.geojson.Feature: com.mapbox.geojson.Feature fromGeometry(com.mapbox.geojson.Geometry,com.mapbox.geojson.BoundingBox)
androidx.recyclerview.widget.RecyclerView: androidx.recyclerview.widget.RecyclerView$LayoutManager getLayoutManager()
kotlinx.coroutines.EventLoopImplBase: java.lang.Object _delayed
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: FlutterFirebasePluginRegistry()
com.mapbox.mapboxsdk.style.layers.FillLayer: java.lang.Object nativeGetFillOutlineColor()
androidx.window.R$attr: R$attr()
com.mapbox.mapboxsdk.style.sources.ImageSource: void nativeSetCoordinates(com.mapbox.mapboxsdk.geometry.LatLngQuad)
androidx.core.app.RemoteActionCompatParcelizer: androidx.core.app.RemoteActionCompat read(androidx.versionedparcelable.VersionedParcel)
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry
androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type[] values()
io.flutter.plugins.GeneratedPluginRegistrant: void registerWith(io.flutter.embedding.engine.FlutterEngine)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String NOTIFICATION_DETAILS
com.mapbox.geojson.utils.PolylineUtils: java.util.List simplify(java.util.List,double)
androidx.window.layout.ActivityCompatHelperApi30
io.flutter.embedding.engine.FlutterJNI: void setAccessibilityFeatures(int)
androidx.window.embedding.EmptyEmbeddingComponent: void setSplitInfoCallback(java.util.function.Consumer)
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: RuntimeTypeAdapterFactory(java.lang.Class,java.lang.String)
androidx.window.embedding.EmbeddingAdapter: java.util.Set translate(java.util.Set)
androidx.window.layout.SidecarWindowBackend: androidx.window.layout.ExtensionInterfaceCompat getWindowExtension()
androidx.appcompat.widget.Toolbar: void setOverflowIcon(android.graphics.drawable.Drawable)
com.google.gson.JsonElement: char getAsCharacter()
androidx.window.layout.SidecarCompat$Companion: androidx.window.core.Version getSidecarVersion()
org.threeten.bp.chrono.IsoEra: org.threeten.bp.chrono.IsoEra[] values()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.NotificationDetails from(java.util.Map)
com.mapbox.geojson.utils.PolylineUtils: double getSqSegDist(com.mapbox.geojson.Point,com.mapbox.geojson.Point,com.mapbox.geojson.Point)
androidx.window.layout.FoldingFeature$State: androidx.window.layout.FoldingFeature$State FLAT
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean enableLights
android.support.v4.os.ResultReceiver: android.os.Parcelable$Creator CREATOR
com.mapbox.geojson.MultiPoint: java.lang.String TYPE
com.mapbox.geojson.ListOfListOfPointCoordinatesTypeAdapter
androidx.core.graphics.drawable.IconCompatParcelizer: IconCompatParcelizer()
androidx.loader.app.LoaderManagerImpl$LoaderViewModel: LoaderManagerImpl$LoaderViewModel()
com.dexterous.flutterlocalnotifications.models.BitmapSource: com.dexterous.flutterlocalnotifications.models.BitmapSource[] values()
com.mapbox.geojson.Feature: com.mapbox.geojson.Feature fromGeometry(com.mapbox.geojson.Geometry)
com.mapbox.mapboxsdk.maps.NativeMapView: void onDidFinishLoadingStyle()
io.flutter.embedding.android.FlutterSplashView$SavedState: java.lang.String previousCompletedSplashIsolate
com.dexterous.flutterlocalnotifications.models.PersonDetails: java.lang.String key
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetTextRotate()
com.mapbox.mapboxsdk.maps.NativeMapView: long nativeGetTransitionDelay()
androidx.appcompat.widget.ActionBarOverlayLayout: void setActionBarHideOffset(int)
androidx.window.core.Bounds: android.graphics.Rect toRect()
androidx.appcompat.widget.SearchView: void setSuggestionsAdapter(androidx.cursoradapter.widget.CursorAdapter)
io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,int,java.nio.ByteBuffer,int)
androidx.window.embedding.SplitRule: float splitRatio
com.mapbox.geojson.GeometryCollection: java.lang.String type()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LED_COLOR_GREEN
com.mapbox.mapboxsdk.snapshotter.MapSnapshotter: void nativeInitialize(com.mapbox.mapboxsdk.snapshotter.MapSnapshotter,com.mapbox.mapboxsdk.storage.FileSource,float,int,int,java.lang.String,java.lang.String,com.mapbox.mapboxsdk.geometry.LatLngBounds,com.mapbox.mapboxsdk.camera.CameraPosition,boolean,java.lang.String)
androidx.window.layout.WindowMetricsCalculator$Companion$overrideDecorator$1
kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.Continuation completion
kotlinx.coroutines.AbstractCoroutine
androidx.window.embedding.SplitInfo: float splitRatio
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation
com.google.gson.JsonElement: float getAsFloat()
com.mapbox.mapboxsdk.style.sources.ImageSource: void finalize()
com.mapbox.mapboxsdk.maps.Image: Image(byte[],float,java.lang.String,int,int,boolean,float[],float[],float[])
com.mapbox.mapboxsdk.style.layers.HillshadeLayer: java.lang.Object nativeGetHillshadeExaggeration()
io.flutter.embedding.engine.FlutterJNI: void setViewportMetrics(float,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int[],int[],int[])
com.mapbox.geojson.GeometryCollection$GsonTypeAdapter: com.mapbox.geojson.GeometryCollection read(com.google.gson.stream.JsonReader)
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation: InboxStyleInformation(java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Boolean,java.lang.String,java.lang.Boolean,java.util.ArrayList,java.lang.Boolean)
androidx.window.embedding.SplitPlaceholderRule: java.util.Set getFilters()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: byte[] castObjectToByteArray(java.lang.Object)
androidx.window.R$styleable: int SplitPairRule_finishSecondaryWithPrimary
androidx.appcompat.widget.AbsActionBarView: void setContentHeight(int)
androidx.cardview.widget.CardView: void setPreventCornerOverlap(boolean)
com.mapbox.geojson.MultiPolygon$GsonTypeAdapter: com.mapbox.geojson.CoordinateContainer createCoordinateContainer(java.lang.String,com.mapbox.geojson.BoundingBox,java.util.List)
androidx.appcompat.widget.AbsActionBarView: AbsActionBarView(android.content.Context,android.util.AttributeSet)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String groupKey
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean setAsGroupSummary
androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface
androidx.core.widget.NestedScrollView: void setFillViewport(boolean)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_ICON_ERROR_CODE
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation valueOf(java.lang.String)
org.threeten.bp.format.TextStyle: org.threeten.bp.format.TextStyle[] values()
com.mapbox.mapboxsdk.style.layers.SymbolLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetIconHaloColorTransition()
androidx.window.R$styleable: int[] SplitPairFilter
androidx.appcompat.widget.Toolbar: void setNavigationIcon(android.graphics.drawable.Drawable)
org.threeten.bp.chrono.HijrahDate: java.lang.Object readResolve()
androidx.activity.ComponentActivity: ComponentActivity()
org.threeten.bp.zone.ZoneOffsetTransitionRule: java.lang.Object writeReplace()
com.mapbox.mapboxsdk.log.Logger: int VERBOSE
com.mapbox.geojson.GeometryCollection: int hashCode()
com.mapbox.geojson.utils.PolylineUtils: PolylineUtils()
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeAddSource(com.mapbox.mapboxsdk.style.sources.Source,long)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetIconTranslateAnchor()
androidx.window.embedding.ExtensionEmbeddingBackend
com.baseflow.geolocator.GeolocatorLocationService: GeolocatorLocationService()
androidx.window.embedding.SplitPlaceholderRule: boolean equals(java.lang.Object)
io.flutter.embedding.android.FlutterSplashView$SavedState: android.os.Bundle splashScreenState
com.mapbox.mapboxsdk.style.types.FormattedSection: java.lang.Number fontScale
com.mapbox.mapboxsdk.style.sources.CustomGeometrySource: void cancelTile(int,int,int)
com.google.gson.JsonElement: com.google.gson.JsonObject getAsJsonObject()
com.google.android.material.snackbar.BaseTransientBottomBar$Behavior
com.mapbox.mapboxsdk.snapshotter.MapSnapshotter: void onDidFailLoadingStyle(java.lang.String)
androidx.window.embedding.SplitController: boolean isSplitSupported()
androidx.appcompat.widget.Toolbar: void setTitle(java.lang.CharSequence)
com.google.gson.JsonArray: boolean equals(java.lang.Object)
com.dexterous.flutterlocalnotifications.ScheduledNotificationBootReceiver: void onReceive(android.content.Context,android.content.Intent)
androidx.window.layout.SidecarCompat: androidx.window.sidecar.SidecarInterface getSidecar()
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeFlyTo(double,double,double,long,double,double,double[])
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource ByteArray
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String INDETERMINATE
com.google.gson.JsonObject: boolean equals(java.lang.Object)
com.mapbox.mapboxsdk.geometry.LatLngBounds: double longitudeEast
androidx.window.R$styleable: int ActivityRule_alwaysExpand
io.flutter.view.AccessibilityViewEmbedder: boolean requestSendAccessibilityEvent(android.view.View,android.view.View,android.view.accessibility.AccessibilityEvent)
com.mapbox.mapboxsdk.location.LocationIndicatorLayer: void nativeSetShadowImageSizeTransition(long,long)
com.mapbox.mapboxsdk.offline.OfflineRegion$OfflineRegionObserver: void onError(com.mapbox.mapboxsdk.offline.OfflineRegionError)
androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type valueOf(java.lang.String)
com.mapbox.mapboxsdk.style.light.Light
com.mapbox.mapboxsdk.offline.OfflineManager: void setOfflineMapboxTileCountLimit(long)
androidx.lifecycle.FullLifecycleObserverAdapter
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SHOW_WHEN
androidx.window.layout.FoldingFeature$State$Companion
androidx.recyclerview.widget.RecyclerView: void setRecycledViewPool(androidx.recyclerview.widget.RecyclerView$RecycledViewPool)
com.mapbox.mapboxsdk.maps.MapView: android.graphics.Bitmap getViewContent()
com.mapbox.mapboxsdk.maps.MapboxMapOptions: android.os.Parcelable$Creator CREATOR
com.mapbox.mapboxsdk.maps.renderer.glsurfaceview.MapboxGLSurfaceView: void setEGLConfigChooser(android.opengl.GLSurfaceView$EGLConfigChooser)
com.mapbox.mapboxsdk.offline.OfflineRegion$OfflineRegionInvalidateCallback: void onInvalidate()
com.mapbox.mapboxsdk.snapshotter.MapSnapshotter: void onSnapshotFailed(java.lang.String)
com.mapbox.geojson.MultiPoint: java.lang.String type()
com.mapbox.geojson.MultiLineString
com.mapbox.mapboxsdk.style.layers.BackgroundLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetBackgroundOpacityTransition()
androidx.recyclerview.widget.RecyclerView: void setLayoutManager(androidx.recyclerview.widget.RecyclerView$LayoutManager)
com.mapbox.mapboxsdk.style.layers.FillLayer: java.lang.Object nativeGetFillOpacity()
androidx.appcompat.widget.ButtonBarLayout: void setStacked(boolean)
androidx.appcompat.widget.ActionBarContextView: void setTitle(java.lang.CharSequence)
io.flutter.view.FlutterCallbackInformation: FlutterCallbackInformation(java.lang.String,java.lang.String,java.lang.String)
com.google.gson.TypeAdapter: com.google.gson.JsonElement toJsonTree(java.lang.Object)
com.google.firebase.installations.local.PersistedInstallation$RegistrationStatus: com.google.firebase.installations.local.PersistedInstallation$RegistrationStatus[] values()
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction Update
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency: com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency[] values()
io.flutter.embedding.engine.FlutterJNI: void runBundleAndSnapshotFromLibrary(java.lang.String,java.lang.String,java.lang.String,android.content.res.AssetManager,java.util.List)
androidx.core.content.ContextCompat$Api23Impl: java.lang.String getSystemServiceName(android.content.Context,java.lang.Class)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType valueOf(java.lang.String)
kotlinx.coroutines.DefaultExecutor: int debugStatus
com.mapbox.mapboxsdk.maps.NativeMapView: double nativeGetPitch()
androidx.window.core.Version: int getPatch()
androidx.appcompat.widget.SearchView: void setAppSearchData(android.os.Bundle)
androidx.appcompat.widget.MenuPopupWindow$MenuDropDownListView: void setHoverListener(androidx.appcompat.widget.MenuItemHoverListener)
com.mapbox.mapboxsdk.text.LocalGlyphRasterizer: android.graphics.Bitmap bitmap
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: androidx.window.layout.WindowLayoutInfo getLastInfo()
org.threeten.bp.LocalDateTime: java.lang.Object writeReplace()
com.mapbox.geojson.Point: double longitude()
com.mapbox.mapboxsdk.http.NativeHttpRequest: void cancel()
com.mapbox.mapboxsdk.style.sources.Source: java.lang.Long nativeGetMinimumTileUpdateInterval()
kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext
com.mapbox.mapboxsdk.annotations.Polyline: float width
androidx.appcompat.widget.ViewStubCompat: void setLayoutInflater(android.view.LayoutInflater)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetIconAllowOverlap()
androidx.appcompat.widget.Toolbar: androidx.appcompat.widget.DecorToolbar getWrapper()
com.mapbox.mapboxsdk.style.layers.HeatmapLayer: void nativeSetHeatmapOpacityTransition(long,long)
androidx.window.embedding.EmbeddingCompat$Companion: androidx.window.extensions.embedding.ActivityEmbeddingComponent embeddingComponent()
com.google.gson.JsonObject: com.google.gson.JsonPrimitive getAsJsonPrimitive(java.lang.String)
com.mapbox.geojson.MultiPolygon: com.mapbox.geojson.MultiPolygon fromLngLats(double[][][][])
com.mapbox.geojson.Point: com.mapbox.geojson.BoundingBox bbox()
com.mapbox.mapboxsdk.net.NativeConnectivityListener: void finalize()
io.flutter.embedding.engine.FlutterJNI: void nativePrefetchDefaultFontManager()
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: ExtensionWindowLayoutInfoBackend$MulticastConsumer(android.app.Activity)
androidx.appcompat.widget.LinearLayoutCompat: void setGravity(int)
com.google.android.material.button.MaterialButton: android.content.res.ColorStateList getIconTint()
com.google.android.material.bottomsheet.BottomSheetBehavior$SavedState: android.os.Parcelable$Creator CREATOR
com.google.android.datatransport.cct.internal.NetworkConnectionInfo$MobileSubtype: com.google.android.datatransport.cct.internal.NetworkConnectionInfo$MobileSubtype valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setBigPictureStyle(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
androidx.window.embedding.SplitRuleParser: java.util.Set parseSplitRules$window_release(android.content.Context,int)
androidx.appcompat.widget.LinearLayoutCompat: void setOrientation(int)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsets access$402(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,android.view.WindowInsets)
com.mapbox.mapboxsdk.snapshotter.MapSnapshot: com.mapbox.mapboxsdk.geometry.LatLng latLngForPixel(android.graphics.PointF)
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeAddLayerAt(long,int)
androidx.appcompat.widget.ButtonBarLayout: int getMinimumHeight()
androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView: void setBackgroundDrawable(android.graphics.drawable.Drawable)
com.mapbox.mapboxsdk.style.layers.FillLayer: java.lang.Object nativeGetFillPattern()
androidx.window.layout.ActivityCompatHelperApi24
io.flutter.embedding.engine.FlutterOverlaySurface
com.mapbox.mapboxsdk.location.LocationIndicatorLayer: java.lang.Object nativeGetAccuracyRadius()
kotlinx.coroutines.DispatchedCoroutine
kotlinx.coroutines.android.HandlerContext: kotlinx.coroutines.android.HandlerContext _immediate
androidx.window.embedding.SplitController: boolean sDebug
com.mapbox.mapboxsdk.style.types.Formatted: java.lang.String toString()
androidx.window.embedding.MatcherUtils: androidx.window.embedding.MatcherUtils INSTANCE
io.flutter.plugins.firebase.core.FlutterFirebasePlugin: java.util.concurrent.ExecutorService cachedThreadPool
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: int getDrawableResourceId(android.content.Context,java.lang.String)
androidx.appcompat.widget.SearchView: void setOnCloseListener(androidx.appcompat.widget.SearchView$OnCloseListener)
com.mapbox.mapboxsdk.style.layers.FillExtrusionLayer: java.lang.Object nativeGetFillExtrusionColor()
androidx.window.layout.WindowMetrics
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetIconTextFitPadding()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LINES
com.google.gson.LongSerializationPolicy: com.google.gson.LongSerializationPolicy valueOf(java.lang.String)
com.google.gson.JsonArray: long getAsLong()
com.mapbox.mapboxsdk.storage.FileSource$ResourcesCachePathChangeCallback: void onError(java.lang.String)
kotlin.jvm.internal.CallableReference: kotlin.reflect.KType getReturnType()
com.google.android.gms.internal.location.zzad: android.os.Parcelable$Creator CREATOR
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointVariantSelector(int)
com.mapbox.mapboxsdk.geometry.VisibleRegion: android.os.Parcelable$Creator CREATOR
com.google.gson.JsonArray: java.util.Iterator iterator()
androidx.window.layout.SidecarCompat$FirstAttachAdapter
com.mapbox.geojson.MultiPolygon: int hashCode()
kotlin.jvm.internal.FunctionReference: boolean isOperator()
com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setStrokeWidth(float)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String PROGRESS
androidx.customview.view.AbsSavedState: android.os.Parcelable$Creator CREATOR
androidx.appcompat.app.AppCompatViewInflater: androidx.appcompat.widget.AppCompatSeekBar createSeekBar(android.content.Context,android.util.AttributeSet)
androidx.window.R$styleable: int ActivityFilter_activityAction
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String ZONED_SCHEDULE_METHOD
com.mapbox.mapboxsdk.style.layers.FillLayer: void nativeSetFillOutlineColorTransition(long,long)
androidx.appcompat.widget.DialogTitle: void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)
androidx.window.embedding.EmbeddingCompat$Companion: EmbeddingCompat$Companion()
androidx.appcompat.app.AppCompatViewInflater: android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet,boolean,boolean,boolean,boolean)
com.mapbox.geojson.MultiPolygon: com.mapbox.geojson.MultiPolygon fromPolygon(com.mapbox.geojson.Polygon,com.mapbox.geojson.BoundingBox)
com.mapbox.geojson.ListOfDoublesCoordinatesTypeAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeSetGestureInProgress(boolean)
com.google.gson.JsonPrimitive: double getAsDouble()
com.google.gson.JsonPrimitive: com.google.gson.JsonElement deepCopy()
com.mapbox.mapboxsdk.style.types.FormattedSection: void setTextColor(int)
com.mapbox.mapboxsdk.style.layers.LineLayer: java.lang.Object nativeGetLineRoundLimit()
com.mapbox.mapboxsdk.style.layers.CircleLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetCircleTranslateTransition()
com.mapbox.mapboxsdk.style.layers.CircleLayer: void nativeSetCircleStrokeOpacityTransition(long,long)
com.mapbox.mapboxsdk.style.sources.RasterSource: void initialize(java.lang.String,java.lang.Object,int)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetTextVariableAnchor()
com.mapbox.geojson.LineString: com.mapbox.geojson.LineString fromLngLats(com.mapbox.geojson.MultiPoint,com.mapbox.geojson.BoundingBox)
androidx.window.layout.WindowMetricsCalculator$Companion: kotlin.jvm.functions.Function1 decorator
com.mapbox.mapboxsdk.style.layers.HillshadeLayer: void finalize()
androidx.appcompat.widget.AppCompatButton: void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)
com.mapbox.geojson.Feature: void addProperty(java.lang.String,com.google.gson.JsonElement)
com.mapbox.mapboxsdk.style.layers.FillLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetFillOpacityTransition()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void cancelNotification(java.lang.Integer,java.lang.String)
com.google.android.material.transformation.FabTransformationBehavior
com.mapbox.mapboxsdk.geometry.LatLng: android.os.Parcelable$Creator CREATOR
androidx.window.embedding.SplitPairRule: boolean getFinishSecondaryWithPrimary()
io.flutter.embedding.engine.FlutterJNI: void setSemanticsEnabled(boolean)
androidx.appcompat.widget.AppCompatButton: int getAutoSizeMinTextSize()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String HTML_FORMAT_LINES
androidx.window.core.Version$Companion: Version$Companion()
com.mapbox.geojson.MultiPolygon: java.lang.String toString()
com.mapbox.mapboxsdk.camera.CameraPosition: double zoom
com.mapbox.geojson.BoundingBox: com.mapbox.geojson.Point northeast()
com.mapbox.geojson.MultiPolygon$GsonTypeAdapter: void write(com.google.gson.stream.JsonWriter,com.mapbox.geojson.MultiPolygon)
com.mapbox.geojson.Feature$GsonTypeAdapter: com.google.gson.TypeAdapter geometryTypeAdapter
androidx.window.embedding.SplitPlaceholderRule: int hashCode()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.app.Notification createNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: DateTimeComponents(java.lang.String,int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.util.HashMap getMappedNotificationChannel(android.app.NotificationChannel)
com.mapbox.geojson.utils.PolylineUtils: java.lang.String encode(java.util.List,int)
androidx.window.layout.WindowMetricsCalculatorDecorator
androidx.appcompat.view.menu.ActionMenuItemView: void setCheckable(boolean)
androidx.appcompat.widget.Toolbar: int getPopupTheme()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: void setAlpha(float)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setStrokeColor(int)
androidx.appcompat.widget.AppCompatImageView: void setSupportImageTintList(android.content.res.ColorStateList)
com.dexterous.flutterlocalnotifications.models.styles.MessagingStyleInformation: MessagingStyleInformation(com.dexterous.flutterlocalnotifications.models.PersonDetails,java.lang.String,java.lang.Boolean,java.util.ArrayList,java.lang.Boolean,java.lang.Boolean)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetIconHaloBlur()
androidx.window.embedding.EmptyEmbeddingComponent: EmptyEmbeddingComponent()
androidx.appcompat.widget.Toolbar: void setTitleMarginTop(int)
com.mapbox.mapboxsdk.style.layers.LineLayer: void finalize()
com.google.android.material.bottomappbar.BottomAppBar$Behavior: BottomAppBar$Behavior()
kotlinx.coroutines.CompletedExceptionally
androidx.recyclerview.widget.RecyclerView: androidx.core.view.NestedScrollingChildHelper getScrollingChildHelper()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String GROUP_CONVERSATION
com.mapbox.mapboxsdk.style.sources.RasterDemSource: RasterDemSource(long)
androidx.appcompat.widget.AppCompatAutoCompleteTextView: void setBackgroundDrawable(android.graphics.drawable.Drawable)
com.mapbox.mapboxsdk.Mapbox: com.mapbox.mapboxsdk.util.TileServerOptions getTileServerOptions()
com.google.android.material.bottomsheet.BottomSheetBehavior: BottomSheetBehavior(android.content.Context,android.util.AttributeSet)
io.flutter.embedding.engine.FlutterJNI: void onRenderingStopped()
androidx.window.layout.HardwareFoldingFeature$Type: HardwareFoldingFeature$Type(java.lang.String)
com.mapbox.geojson.LineString$GsonTypeAdapter: void write(com.google.gson.stream.JsonWriter,com.mapbox.geojson.LineString)
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action[] values()
android.support.v4.media.AudioAttributesImplApi26Parcelizer: void write(androidx.media.AudioAttributesImplApi26,androidx.versionedparcelable.VersionedParcel)
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceCreated(long,android.view.Surface)
android.support.v4.media.AudioAttributesCompatParcelizer: void write(androidx.media.AudioAttributesCompat,androidx.versionedparcelable.VersionedParcel)
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeSetTransitionOptions(com.mapbox.mapboxsdk.style.layers.TransitionOptions)
com.mapbox.geojson.GeometryAdapterFactory: GeometryAdapterFactory()
androidx.window.layout.WindowInfoTrackerImpl$Companion: WindowInfoTrackerImpl$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String ID
com.google.gson.JsonObject: com.google.gson.JsonObject deepCopy()
com.mapbox.mapboxsdk.style.layers.LineLayer: void nativeSetLineOffsetTransition(long,long)
androidx.window.R$attr: int splitLayoutDirection
androidx.window.layout.FoldingFeature$OcclusionType: java.lang.String toString()
com.mapbox.geojson.FeatureCollection$GsonTypeAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
kotlin.jvm.internal.FunctionReference: kotlin.reflect.KFunction getReflected()
io.flutter.view.AccessibilityViewEmbedder: io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors reflectionAccessors
androidx.appcompat.widget.SearchView: int getInputType()
com.mapbox.mapboxsdk.style.light.Position: float polarAngle
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.content.Context applicationContext
androidx.window.layout.ExtensionWindowLayoutInfoBackend: void unregisterLayoutChangeCallback(androidx.core.util.Consumer)
com.mapbox.mapboxsdk.style.layers.FillExtrusionLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetFillExtrusionOpacityTransition()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer ledOffMs
io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode: io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode[] values()
androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowInfoTrackerImpl$Companion Companion
com.mapbox.mapboxsdk.style.sources.Source: void setMaxOverscaleFactorForParentTiles(java.lang.Integer)
com.mapbox.mapboxsdk.style.layers.Layer: void nativeSetPaintProperty(java.lang.String,java.lang.Object)
org.threeten.bp.temporal.ChronoField: org.threeten.bp.temporal.ChronoField[] values()
androidx.window.core.Bounds: int getRight()
kotlinx.coroutines.internal.LockFreeLinkedListNode
androidx.constraintlayout.widget.ConstraintLayout: int getMinHeight()
com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory: java.lang.Class baseType
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityDestroyed(android.app.Activity)
com.dexterous.flutterlocalnotifications.utils.StringUtils: StringUtils()
com.google.android.material.floatingactionbutton.FloatingActionButton: float getCompatElevation()
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action valueOf(java.lang.String)
com.google.android.material.circularreveal.cardview.CircularRevealCardView: int getCircularRevealScrimColor()
kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.util.ArrayList readMessages(java.util.ArrayList)
com.mapbox.mapboxsdk.Mapbox: android.content.Context context
androidx.window.layout.WindowInfoTracker$Companion: java.lang.String TAG
androidx.appcompat.app.AppCompatViewInflater: androidx.appcompat.widget.AppCompatCheckedTextView createCheckedTextView(android.content.Context,android.util.AttributeSet)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean ongoing
com.mapbox.mapboxsdk.http.NativeHttpRequest: java.util.concurrent.locks.ReentrantLock access$000(com.mapbox.mapboxsdk.http.NativeHttpRequest)
com.dexterous.flutterlocalnotifications.models.Time: com.dexterous.flutterlocalnotifications.models.Time from(java.util.Map)
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeMoveBy(double,double,long)
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents[] $VALUES
com.mapbox.geojson.Polygon: int hashCode()
com.mapbox.mapboxsdk.style.sources.GeoJsonSource: void nativeSetFeatureCollection(com.mapbox.geojson.FeatureCollection)
androidx.window.embedding.ActivityRule: boolean equals(java.lang.Object)
androidx.window.layout.HardwareFoldingFeature$Type$Companion: androidx.window.layout.HardwareFoldingFeature$Type getFOLD()
com.mapbox.geojson.PointAsCoordinatesTypeAdapter: com.mapbox.geojson.Point read(com.google.gson.stream.JsonReader)
com.mapbox.mapboxsdk.log.Logger: void w(java.lang.String,java.lang.String)
com.google.android.material.floatingactionbutton.FloatingActionButton: float getCompatPressedTranslationZ()
org.threeten.bp.temporal.IsoFields$Field: org.threeten.bp.temporal.IsoFields$Field valueOf(java.lang.String)
org.threeten.bp.Duration: java.lang.Object writeReplace()
androidx.appcompat.widget.AppCompatCheckBox: void setSupportButtonTintList(android.content.res.ColorStateList)
org.threeten.bp.chrono.JapaneseChronology: java.lang.Object readResolve()
com.mapbox.geojson.Point: java.util.List coordinates
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: void setOnDescendantFocusChangeListener(android.view.View$OnFocusChangeListener)
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: androidx.window.layout.WindowLayoutInfo lastInfo
androidx.window.layout.ExtensionWindowLayoutInfoBackend: androidx.window.extensions.layout.WindowLayoutComponent component
androidx.window.layout.SidecarWindowBackend$Companion: void resetInstance()
com.mapbox.mapboxsdk.annotations.Polyline: int color
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: java.lang.Object bigPicture
androidx.constraintlayout.widget.Placeholder
androidx.appcompat.widget.AppCompatSpinner: void setPopupBackgroundResource(int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean hasInvalidBigPictureResources(io.flutter.plugin.common.MethodChannel$Result,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
androidx.window.layout.HardwareFoldingFeature: androidx.window.core.Bounds featureBounds
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer groupAlertBehavior
com.google.android.gms.common.internal.MethodInvocation: android.os.Parcelable$Creator CREATOR
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager deferredComponentManager
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_LED_DETAILS_ERROR_MESSAGE
io.flutter.embedding.engine.FlutterJNI: void nativeInvokePlatformMessageResponseCallback(long,int,java.nio.ByteBuffer,int)
com.google.firebase.components.ComponentDiscoveryService
androidx.appcompat.widget.SearchView: int getPreferredWidth()
com.mapbox.geojson.Feature: com.mapbox.geojson.Geometry geometry()
com.mapbox.mapboxsdk.maps.widgets.CompassView
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1
com.mapbox.mapboxsdk.maps.renderer.MapRenderer: void onDrawFrame(javax.microedition.khronos.opengles.GL10)
com.dexterous.flutterlocalnotifications.ScheduledNotificationReceiver: ScheduledNotificationReceiver()
com.mapbox.mapboxsdk.style.layers.FillExtrusionLayer: java.lang.Object nativeGetFillExtrusionTranslate()
com.mapbox.mapboxsdk.annotations.Marker: com.mapbox.mapboxsdk.geometry.LatLng position
com.mapbox.geojson.MultiLineString$GsonTypeAdapter: void write(com.google.gson.stream.JsonWriter,com.mapbox.geojson.MultiLineString)
com.mapbox.geojson.MultiPoint$GsonTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
io.flutter.embedding.engine.FlutterJNI: void nativeRegisterTexture(long,long,java.lang.ref.WeakReference)
io.flutter.embedding.engine.FlutterJNI: void nativeInit(android.content.Context,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,long)
com.mapbox.geojson.LineString: java.lang.String toString()
com.mapbox.mapboxsdk.style.layers.BackgroundLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetBackgroundPatternTransition()
com.mapbox.geojson.LineString$GsonTypeAdapter
com.mapbox.geojson.Polygon$GsonTypeAdapter: com.mapbox.geojson.CoordinateContainer createCoordinateContainer(java.lang.String,com.mapbox.geojson.BoundingBox,java.lang.Object)
androidx.window.embedding.SplitController: androidx.window.embedding.SplitController$Companion Companion
com.mapbox.mapboxsdk.maps.NativeMapView: com.mapbox.geojson.Feature[] nativeQueryRenderedFeaturesForPoint(float,float,java.lang.String[],java.lang.Object[])
androidx.window.embedding.SplitController: java.util.concurrent.locks.ReentrantLock access$getGlobalLock$cp()
androidx.appcompat.widget.AppCompatButton: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
com.baseflow.geolocator.location.ServiceStatus: com.baseflow.geolocator.location.ServiceStatus valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String ENABLE_LIGHTS
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetTextKeepUpright()
androidx.media.AudioAttributesImplBaseParcelizer
androidx.appcompat.widget.LinearLayoutCompat: int getVirtualChildCount()
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: java.lang.String contentTitle
com.mapbox.geojson.gson.BoundingBoxTypeAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
androidx.cardview.widget.CardView: void setCardElevation(float)
androidx.recyclerview.widget.StaggeredGridLayoutManager
com.mapbox.mapboxsdk.maps.MapView: void setMapStrictModeEnabled(boolean)
com.google.gson.TypeAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
android.support.v4.media.MediaBrowserCompat$ItemReceiver
com.mapbox.mapboxsdk.style.sources.RasterSource: RasterSource(long)
androidx.window.layout.WindowMetricsCalculatorCompat: androidx.window.layout.WindowMetrics computeMaximumWindowMetrics(android.app.Activity)
androidx.window.embedding.SplitController: java.util.concurrent.locks.ReentrantLock globalLock
androidx.appcompat.widget.Toolbar: void setNavigationIcon(int)
androidx.coordinatorlayout.widget.CoordinatorLayout: int getSuggestedMinimumHeight()
io.flutter.embedding.android.RenderMode: io.flutter.embedding.android.RenderMode valueOf(java.lang.String)
com.mapbox.mapboxsdk.style.layers.LineLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetLineBlurTransition()
com.mapbox.mapboxsdk.style.layers.HeatmapLayer: java.lang.Object nativeGetHeatmapWeight()
com.mapbox.geojson.BaseGeometryTypeAdapter: void writeCoordinateContainer(com.google.gson.stream.JsonWriter,com.mapbox.geojson.CoordinateContainer)
io.flutter.embedding.engine.FlutterJNI: void loadDartDeferredLibrary(int,java.lang.String[])
com.mapbox.geojson.constants.GeoJsonConstants
androidx.appcompat.widget.AppCompatEditText: java.lang.CharSequence getText()
org.threeten.bp.Instant: java.lang.Object readResolve()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readChannelInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
com.mapbox.geojson.Feature: java.lang.Number getNumberProperty(java.lang.String)
com.google.android.material.floatingactionbutton.FloatingActionButton: void setSize(int)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetTextHaloWidth()
com.mapbox.mapboxsdk.offline.OfflineRegion: void invalidateOfflineRegion(com.mapbox.mapboxsdk.offline.OfflineRegion$OfflineRegionInvalidateCallback)
androidx.window.layout.SidecarCompat: SidecarCompat(android.content.Context)
com.google.android.material.appbar.AppBarLayout$Behavior: AppBarLayout$Behavior()
androidx.appcompat.widget.FitWindowsLinearLayout: FitWindowsLinearLayout(android.content.Context,android.util.AttributeSet)
com.mapbox.mapboxsdk.snapshotter.MapSnapshot
androidx.window.layout.SidecarWindowBackend: java.lang.String TAG
com.google.common.util.concurrent.AbstractFuture$Waiter: java.lang.Thread thread
com.google.android.material.button.MaterialButton: void setBackground(android.graphics.drawable.Drawable)
com.google.gson.JsonPrimitive: byte getAsByte()
com.mapbox.mapboxsdk.log.Logger: com.mapbox.mapboxsdk.log.LoggerDefinition DEFAULT
androidx.core.content.ContextCompat$Api19Impl: java.io.File[] getExternalFilesDirs(android.content.Context,java.lang.String)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: boolean released
com.mapbox.geojson.MultiPoint$GsonTypeAdapter: com.mapbox.geojson.CoordinateContainer createCoordinateContainer(java.lang.String,com.mapbox.geojson.BoundingBox,java.util.List)
com.mapbox.geojson.Polygon$GsonTypeAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.net.Uri retrieveSoundResourceUri(android.content.Context,java.lang.String,com.dexterous.flutterlocalnotifications.models.SoundSource)
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsEmojiModifier(int)
androidx.recyclerview.widget.RecyclerView: void setScrollState(int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: androidx.core.app.Person buildPerson(android.content.Context,com.dexterous.flutterlocalnotifications.models.PersonDetails)
androidx.window.core.Version
androidx.fragment.app.FragmentManagerState: android.os.Parcelable$Creator CREATOR
com.google.android.material.bottomappbar.BottomAppBar$Behavior
com.mapbox.mapboxsdk.offline.OfflineManager$CreateOfflineRegionCallback
androidx.appcompat.widget.Toolbar: void setNavigationContentDescription(int)
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object L$0
com.mapbox.mapboxsdk.style.layers.RasterLayer: java.lang.Object nativeGetRasterSaturation()
androidx.window.embedding.SplitInfo: androidx.window.embedding.ActivityStack secondaryActivityStack
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String MESSAGES
com.google.firebase.messaging.threads.ThreadPriority: com.google.firebase.messaging.threads.ThreadPriority valueOf(java.lang.String)
androidx.window.embedding.SplitPlaceholderRule: SplitPlaceholderRule(java.util.Set,android.content.Intent,int,int,float,int,int,kotlin.jvm.internal.DefaultConstructorMarker)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String TICKER
com.mapbox.mapboxsdk.offline.OfflineManager
com.google.android.material.appbar.AppBarLayout$BaseBehavior: AppBarLayout$BaseBehavior(android.content.Context,android.util.AttributeSet)
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: java.util.List lastValue
com.google.firebase.installations.remote.TokenResult$ResponseCode: com.google.firebase.installations.remote.TokenResult$ResponseCode valueOf(java.lang.String)
androidx.window.embedding.ActivityRule: boolean getAlwaysExpand()
io.flutter.view.AccessibilityViewEmbedder: android.util.SparseArray flutterIdToOrigin
androidx.window.layout.ExtensionWindowLayoutInfoBackend: void registerLayoutChangeCallback(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
com.mapbox.mapboxsdk.util.TileServerOptions: java.lang.String sourceVersionPrefix
androidx.recyclerview.widget.RecyclerView: void setOnFlingListener(androidx.recyclerview.widget.RecyclerView$OnFlingListener)
androidx.media.AudioAttributesCompatParcelizer: void write(androidx.media.AudioAttributesCompat,androidx.versionedparcelable.VersionedParcel)
com.google.gson.JsonArray: JsonArray(int)
androidx.appcompat.widget.AppCompatImageView: void setSupportBackgroundTintList(android.content.res.ColorStateList)
com.mapbox.mapboxsdk.maps.NativeMapView: long[] nativeAddPolylines(com.mapbox.mapboxsdk.annotations.Polyline[])
androidx.window.embedding.EmbeddingAdapter: boolean translateIntentPredicates$lambda-8(java.util.Set,android.content.Intent)
com.mapbox.mapboxsdk.plugins.offline.offline.OfflineDownloadService: OfflineDownloadService()
com.mapbox.geojson.Feature: java.lang.Boolean getBooleanProperty(java.lang.String)
com.mapbox.geojson.LineString: java.lang.String toPolyline(int)
com.google.android.material.floatingactionbutton.FloatingActionButton$BaseBehavior: FloatingActionButton$BaseBehavior()
androidx.window.layout.HardwareFoldingFeature
com.dexterous.flutterlocalnotifications.models.SoundSource: com.dexterous.flutterlocalnotifications.models.SoundSource valueOf(java.lang.String)
kotlinx.coroutines.internal.DispatchedContinuation
com.google.android.material.bottomappbar.BottomAppBar: void setFabDiameter(int)
com.mapbox.geojson.FeatureCollection: com.mapbox.geojson.FeatureCollection fromFeature(com.mapbox.geojson.Feature,com.mapbox.geojson.BoundingBox)
com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory: boolean access$000(com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory)
androidx.window.R$id: int ltr
com.mapbox.geojson.shifter.CoordinateShifterManager: CoordinateShifterManager()
com.google.android.material.appbar.AppBarLayout$Behavior: AppBarLayout$Behavior(android.content.Context,android.util.AttributeSet)
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: androidx.core.util.Consumer getCallback()
com.mapbox.geojson.Point: boolean hasAltitude()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_SOUND_ERROR_CODE
com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory: com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory registerSubtype(java.lang.Class)
android.support.v4.media.AudioAttributesImplBaseParcelizer
androidx.window.R$styleable: int SplitPairRule_finishPrimaryWithSecondary
androidx.appcompat.widget.AppCompatRadioButton
com.mapbox.mapboxsdk.style.layers.LineLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetLineColorTransition()
com.mapbox.mapboxsdk.style.sources.RasterDemSource
androidx.window.embedding.SplitRule
com.dexterous.flutterlocalnotifications.models.Time: java.lang.Integer hour
androidx.window.embedding.EmbeddingCompat$Companion: java.lang.Integer getExtensionApiLevel()
androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowBackend access$getWindowBackend$p(androidx.window.layout.WindowInfoTrackerImpl)
androidx.window.layout.WindowMetrics: boolean equals(java.lang.Object)
org.threeten.bp.chrono.Ser: java.lang.Object readResolve()
com.mapbox.geojson.GeometryCollection: java.lang.String toJson()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer importance
androidx.window.embedding.SplitPairFilter: android.content.ComponentName primaryActivityName
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String ARE_NOTIFICATIONS_ENABLED_METHOD
com.mapbox.mapboxsdk.style.sources.RasterDemSource: java.lang.String nativeGetUrl()
com.mapbox.mapboxsdk.maps.NativeMapView: com.mapbox.mapboxsdk.geometry.ProjectedMeters nativeProjectedMetersForLatLng(double,double)
androidx.window.core.Bounds: int getBottom()
com.baseflow.geolocator.errors.ErrorCodes: com.baseflow.geolocator.errors.ErrorCodes valueOf(java.lang.String)
io.flutter.plugins.imagepicker.CameraDevice: io.flutter.plugins.imagepicker.CameraDevice valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void show(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.mapbox.geojson.LineString$GsonTypeAdapter: LineString$GsonTypeAdapter(com.google.gson.Gson)
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction: NotificationChannelAction(java.lang.String,int)
com.mapbox.mapboxsdk.geometry.LatLngQuad: com.mapbox.mapboxsdk.geometry.LatLng bottomRight
androidx.window.layout.SidecarWindowBackend: java.util.concurrent.CopyOnWriteArrayList windowLayoutChangeCallbacks
com.mapbox.geojson.utils.GeoJsonUtils
com.mapbox.mapboxsdk.style.layers.RasterLayer: java.lang.Object nativeGetRasterResampling()
androidx.coordinatorlayout.widget.CoordinatorLayout: android.graphics.drawable.Drawable getStatusBarBackground()
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: androidx.window.layout.WindowInfoTrackerImpl this$0
com.mapbox.mapboxsdk.location.LocationIndicatorLayer: java.lang.Object nativeGetAccuracyRadiusBorderColor()
com.mapbox.geojson.utils.PolylineUtils: java.util.List simplifyRadialDist(java.util.List,double)
androidx.window.embedding.EmbeddingCompat: void setSplitRules(java.util.Set)
androidx.window.layout.SidecarAdapter$Companion
com.mapbox.mapboxsdk.offline.OfflineRegionError: OfflineRegionError(java.lang.String,java.lang.String)
com.mapbox.geojson.exception.GeoJsonException
com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation: java.lang.Boolean htmlFormatBody
kotlin.jvm.internal.FunctionReferenceImpl: FunctionReferenceImpl(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath
com.dexterous.flutterlocalnotifications.models.PersonDetails
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setProgress(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
com.mapbox.mapboxsdk.style.layers.HeatmapLayer: void nativeSetHeatmapIntensityTransition(long,long)
com.mapbox.mapboxsdk.offline.OfflineManager$CreateOfflineRegionCallback: void onCreate(com.mapbox.mapboxsdk.offline.OfflineRegion)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay[] values()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: float getTrimPathOffset()
androidx.window.layout.WindowMetrics: WindowMetrics(android.graphics.Rect)
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean showWhen
kotlin.jvm.internal.FunctionReferenceImpl: FunctionReferenceImpl(int,java.lang.Class,java.lang.String,java.lang.String,int)
androidx.appcompat.widget.ActionBarContainer: void setTabContainer(androidx.appcompat.widget.ScrollingTabContainerView)
com.google.gson.JsonPrimitive: boolean isNumber()
com.mapbox.geojson.utils.GeoJsonUtils: double ROUND_PRECISION
androidx.window.embedding.SplitPairRule: androidx.window.embedding.SplitPairRule plus$window_release(androidx.window.embedding.SplitPairFilter)
androidx.appcompat.widget.ActionBarContextView: ActionBarContextView(android.content.Context,android.util.AttributeSet)
io.flutter.view.AccessibilityViewEmbedder: void copyAccessibilityFields(android.view.accessibility.AccessibilityNodeInfo,android.view.accessibility.AccessibilityNodeInfo)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String HTML_FORMAT_CONTENT
com.google.gson.JsonElement: JsonElement()
com.mapbox.mapboxsdk.style.layers.Layer: boolean invalidated
androidx.constraintlayout.widget.ConstraintLayout: void setOptimizationLevel(int)
androidx.appcompat.widget.AppCompatTextView: void setBackgroundDrawable(android.graphics.drawable.Drawable)
com.mapbox.mapboxsdk.maps.renderer.glsurfaceview.MapboxGLSurfaceView: void setPreserveEGLContextOnPause(boolean)
androidx.window.embedding.EmbeddingBackend
androidx.appcompat.app.AppCompatActivity
com.mapbox.mapboxsdk.offline.OfflineRegionStatus
androidx.window.embedding.SplitRule: SplitRule()
kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.Continuation getCompletion()
kotlin.jvm.internal.CallableReference: CallableReference(java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,boolean)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: androidx.core.graphics.drawable.IconCompat getIconFromSource(android.content.Context,java.lang.Object,com.dexterous.flutterlocalnotifications.models.IconSource)
com.mapbox.mapboxsdk.net.NativeConnectivityListener: NativeConnectivityListener(long)
androidx.window.layout.SidecarAdapter: boolean isEqualSidecarDeviceState(androidx.window.sidecar.SidecarDeviceState,androidx.window.sidecar.SidecarDeviceState)
com.mapbox.mapboxsdk.Mapbox: com.mapbox.mapboxsdk.util.DefaultStyle getPredefinedStyle(java.lang.String)
com.mapbox.geojson.Polygon: boolean isLinearRing(com.mapbox.geojson.LineString)
com.google.android.material.bottomappbar.BottomAppBar
io.flutter.embedding.engine.FlutterJNI: void ensureRunningOnMainThread()
androidx.appcompat.widget.Toolbar: void setPopupTheme(int)
androidx.window.layout.SidecarWindowBackend$Companion: SidecarWindowBackend$Companion()
kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext getContext()
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: java.lang.Class baseType
androidx.window.embedding.EmbeddingCompat$Companion: EmbeddingCompat$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.embedding.engine.FlutterOverlaySurface: int id
com.baseflow.geolocator.errors.ErrorCodes: com.baseflow.geolocator.errors.ErrorCodes[] values()
com.mapbox.mapboxsdk.maps.renderer.MapRendererScheduler: void queueEvent(java.lang.Runnable)
androidx.window.layout.EmptyDecorator: EmptyDecorator()
androidx.constraintlayout.widget.ConstraintLayout: int getOptimizationLevel()
androidx.window.layout.ActivityCompatHelperApi24: androidx.window.layout.ActivityCompatHelperApi24 INSTANCE
androidx.appcompat.widget.Toolbar: int getTitleMarginBottom()
androidx.appcompat.widget.AppCompatTextView: void setLastBaselineToBottomHeight(int)
com.mapbox.geojson.MultiLineString$GsonTypeAdapter: com.mapbox.geojson.CoordinateContainer createCoordinateContainer(java.lang.String,com.mapbox.geojson.BoundingBox,java.util.List)
androidx.core.graphics.drawable.IconCompat
com.dexterous.flutterlocalnotifications.utils.BooleanUtils
com.mapbox.geojson.Feature$GsonTypeAdapter: void write(com.google.gson.stream.JsonWriter,com.mapbox.geojson.Feature)
com.mapbox.mapboxsdk.style.layers.CircleLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetCircleStrokeColorTransition()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: void pushTransform(float[])
android.support.v4.graphics.drawable.IconCompatParcelizer: IconCompatParcelizer()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$InsetsListener insetsListener
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeAddAnnotationIcon(java.lang.String,int,int,float,byte[])
androidx.window.layout.WindowBackend: void registerLayoutChangeCallback(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference: androidx.lifecycle.Lifecycle getLifecycle()
io.flutter.view.AccessibilityViewEmbedder: boolean onAccessibilityHoverEvent(int,android.view.MotionEvent)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.util.ArrayList loadScheduledNotifications(android.content.Context)
androidx.window.embedding.EmbeddingTranslatingCallback: androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface callback
io.flutter.plugins.firebase.messaging.FlutterFirebaseMessagingService
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.HardwareFoldingFeature$Companion Companion
com.mapbox.geojson.FeatureCollection: java.lang.String toJson()
com.mapbox.mapboxsdk.offline.OfflineRegionStatus: OfflineRegionStatus(int,long,long,long,long,long,boolean)
com.baseflow.geolocator.permission.LocationPermission: com.baseflow.geolocator.permission.LocationPermission valueOf(java.lang.String)
com.mapbox.mapboxsdk.style.sources.Source: void nativeSetVolatile(java.lang.Boolean)
com.mapbox.mapboxsdk.util.TileServerOptions: java.lang.String glyphsTemplate
androidx.appcompat.widget.AppCompatAutoCompleteTextView: void setSupportBackgroundTintList(android.content.res.ColorStateList)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String HTML_FORMAT_BIG_TEXT
androidx.window.embedding.SplitInfo: androidx.window.embedding.ActivityStack getPrimaryActivityStack()
androidx.appcompat.widget.AppCompatButton: void setSupportBackgroundTintList(android.content.res.ColorStateList)
kotlin.coroutines.AbstractCoroutineContextElement: AbstractCoroutineContextElement(kotlin.coroutines.CoroutineContext$Key)
androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Rect computeWindowBoundsP$window_release(android.app.Activity)
androidx.window.java.R
com.mapbox.mapboxsdk.offline.OfflineManager$CreateOfflineRegionCallback: void onError(java.lang.String)
com.mapbox.mapboxsdk.maps.NativeMapView: com.mapbox.mapboxsdk.style.sources.Source[] nativeGetSources()
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeAddImage(java.lang.String,android.graphics.Bitmap,float,boolean)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SCHEDULED_NOTIFICATION_REPEAT_FREQUENCY
io.flutter.embedding.engine.FlutterJNI: void dispatchPointerDataPacket(java.nio.ByteBuffer,int)
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: void addListener(androidx.core.util.Consumer)
androidx.window.embedding.ActivityStack: java.util.List activities
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: android.graphics.Matrix getLocalMatrix()
com.google.android.gms.location.zzaj: android.os.Parcelable$Creator CREATOR
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetIconRotate()
com.mapbox.mapboxsdk.offline.OfflineRegion$OfflineRegionDeleteCallback: void onDelete()
com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation: java.lang.Boolean htmlFormatTitle
com.mapbox.geojson.MultiLineString$GsonTypeAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
com.mapbox.mapboxsdk.offline.OfflineManager$FileSourceCallback: void onSuccess()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readProgressInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
com.mapbox.mapboxsdk.http.NativeHttpRequest: NativeHttpRequest(long,java.lang.String,java.lang.String,java.lang.String,boolean)
androidx.window.core.Version: java.math.BigInteger getBigInteger()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CONTENT_TITLE
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointEmojiModifier(int)
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: java.util.WeakHashMap mActivityWindowLayoutInfo
androidx.appcompat.widget.Toolbar: void setTitleMarginStart(int)
com.mapbox.geojson.shifter.CoordinateShifter
androidx.window.layout.FoldingFeature$OcclusionType: java.lang.String description
com.mapbox.mapboxsdk.style.types.Formatted: java.lang.Object[] toArray()
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.Boolean enableLights
com.mapbox.mapboxsdk.style.layers.TransitionOptions: com.mapbox.mapboxsdk.style.layers.TransitionOptions fromTransitionOptions(long,long)
com.mapbox.mapboxsdk.style.layers.FillExtrusionLayer: void nativeSetFillExtrusionBaseTransition(long,long)
androidx.appcompat.widget.AppCompatImageButton: AppCompatImageButton(android.content.Context,android.util.AttributeSet)
com.mapbox.mapboxsdk.snapshotter.MapSnapshotter: com.mapbox.mapboxsdk.style.layers.Layer nativeGetLayer(java.lang.String)
androidx.window.layout.SidecarWindowBackend$Companion
androidx.appcompat.widget.ActionBarContextView: int getAnimatedVisibility()
androidx.constraintlayout.widget.Guideline: void setVisibility(int)
io.flutter.view.AccessibilityBridge$StringAttributeType: io.flutter.view.AccessibilityBridge$StringAttributeType[] values()
com.mapbox.mapboxsdk.util.DefaultStyle: java.lang.String name
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ICON
androidx.appcompat.widget.AppCompatTextView: int getAutoSizeTextType()
com.mapbox.geojson.Point: int hashCode()
com.mapbox.mapboxsdk.offline.OfflineManager$MergeOfflineRegionsCallback: void onMerge(com.mapbox.mapboxsdk.offline.OfflineRegion[])
com.mapbox.geojson.MultiLineString: java.util.List coordinates()
com.mapbox.mapboxsdk.style.layers.HillshadeLayer: java.lang.Object nativeGetHillshadeIlluminationAnchor()
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: android.app.Activity activity
androidx.appcompat.widget.AppCompatCheckBox: void setSupportButtonTintMode(android.graphics.PorterDuff$Mode)
androidx.window.embedding.SplitController: java.util.Set staticSplitRules
com.mapbox.mapboxsdk.WellKnownTileServer: com.mapbox.mapboxsdk.WellKnownTileServer valueOf(java.lang.String)
androidx.appcompat.view.menu.ActionMenuItemView
com.google.gson.JsonArray: java.util.List elements
com.google.android.material.appbar.AppBarLayout: float getTargetElevation()
androidx.window.embedding.EmbeddingTranslatingCallback: EmbeddingTranslatingCallback(androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface,androidx.window.embedding.EmbeddingAdapter)
com.mapbox.geojson.MultiLineString: com.mapbox.geojson.MultiLineString fromLineStrings(java.util.List)
com.mapbox.mapboxsdk.style.layers.RasterLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetRasterOpacityTransition()
com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory: java.lang.String typeFieldName
io.flutter.embedding.engine.FlutterJNI: void onSurfaceDestroyed()
androidx.appcompat.widget.ActionBarContainer: void setStackedBackground(android.graphics.drawable.Drawable)
kotlinx.coroutines.channels.ConflatedChannel
androidx.lifecycle.ReportFragment$LifecycleCallbacks: ReportFragment$LifecycleCallbacks()
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeResizeView(int,int)
android.support.v4.media.MediaBrowserCompat$MediaItem: android.os.Parcelable$Creator CREATOR
com.mapbox.mapboxsdk.style.layers.CircleLayer: java.lang.Object nativeGetCirclePitchAlignment()
android.support.v4.media.session.MediaSessionCompat$Token: android.os.Parcelable$Creator CREATOR
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.HardwareFoldingFeature$Type getType$window_release()
org.threeten.bp.ZoneRegion: java.lang.Object readResolve()
com.mapbox.geojson.GeometryCollection: java.lang.String toString()
com.mapbox.mapboxsdk.offline.OfflineRegionDefinition: java.lang.String getType()
androidx.coordinatorlayout.widget.CoordinatorLayout: void setFitsSystemWindows(boolean)
androidx.window.layout.DisplayCompatHelperApi17: androidx.window.layout.DisplayCompatHelperApi17 INSTANCE
androidx.window.core.Version: int compareTo(androidx.window.core.Version)
com.google.android.material.internal.NavigationMenuItemView
androidx.window.layout.SidecarWindowBackend: SidecarWindowBackend(androidx.window.layout.ExtensionInterfaceCompat)
com.mapbox.mapboxsdk.style.layers.FillExtrusionLayer: FillExtrusionLayer(long)
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource[] values()
com.baseflow.geolocator.location.LocationAccuracyStatus: com.baseflow.geolocator.location.LocationAccuracyStatus valueOf(java.lang.String)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetTextColorTransition()
kotlin.coroutines.jvm.internal.SuspendLambda: int getArity()
com.google.android.material.bottomappbar.BottomAppBar: int getFabAlignmentMode()
com.mapbox.mapboxsdk.maps.MapView: float getPixelRatio()
androidx.appcompat.widget.AppCompatImageButton: void setImageBitmap(android.graphics.Bitmap)
androidx.constraintlayout.solver.widgets.ConstraintAnchor$ConnectionType: androidx.constraintlayout.solver.widgets.ConstraintAnchor$ConnectionType[] values()
androidx.appcompat.widget.SearchView: void setQueryRefinementEnabled(boolean)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String MILLISECONDS_SINCE_EPOCH
androidx.window.layout.SidecarAdapter$Companion: int getRawSidecarDevicePosture(androidx.window.sidecar.SidecarDeviceState)
com.mapbox.geojson.GeometryCollection: com.mapbox.geojson.GeometryCollection fromGeometry(com.mapbox.geojson.Geometry,com.mapbox.geojson.BoundingBox)
com.mapbox.mapboxsdk.offline.OfflineManager$FileSourceCallback
com.mapbox.mapboxsdk.location.LocationIndicatorLayer: java.lang.Object nativeGetShadowImageSize()
androidx.window.embedding.EmbeddingCompat$Companion: boolean isEmbeddingAvailable()
com.google.firebase.encoders.proto.Protobuf$IntEncoding: com.google.firebase.encoders.proto.Protobuf$IntEncoding[] values()
androidx.window.embedding.ExtensionEmbeddingBackend: void setEmbeddingExtension(androidx.window.embedding.EmbeddingInterfaceCompat)
com.mapbox.geojson.MultiPoint$GsonTypeAdapter: MultiPoint$GsonTypeAdapter(com.google.gson.Gson)
com.mapbox.mapboxsdk.style.types.Formatted: Formatted(com.mapbox.mapboxsdk.style.types.FormattedSection[])
com.google.android.material.bottomappbar.BottomAppBar: float getFabTranslationX()
androidx.appcompat.widget.ActionMenuView: void setOverflowReserved(boolean)
com.mapbox.mapboxsdk.snapshotter.MapSnapshotter: void nativeAddLayerBelow(long,java.lang.String)
androidx.core.content.ContextCompat$Api19Impl: java.io.File[] getExternalCacheDirs(android.content.Context)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: void addListener(java.util.concurrent.Executor,androidx.core.util.Consumer,kotlinx.coroutines.flow.Flow)
io.flutter.view.AccessibilityViewEmbedder: boolean performAction(int,int,android.os.Bundle)
io.flutter.embedding.engine.FlutterJNI: void onVsync(long,long,long)
androidx.appcompat.app.AppCompatViewInflater: androidx.appcompat.widget.AppCompatRatingBar createRatingBar(android.content.Context,android.util.AttributeSet)
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.Boolean enableVibration
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setInboxStyle(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
com.mapbox.mapboxsdk.style.sources.RasterSource: java.lang.String nativeGetUrl()
com.mapbox.geojson.FeatureCollection$GsonTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
android.support.v4.media.MediaBrowserCompat$CustomActionResultReceiver
androidx.window.layout.WindowMetricsCalculator$Companion: void reset()
com.mapbox.mapboxsdk.maps.renderer.glsurfaceview.MapboxGLSurfaceView: void setDetachedListener(com.mapbox.mapboxsdk.maps.renderer.glsurfaceview.MapboxGLSurfaceView$OnGLSurfaceViewDetachedListener)
com.mapbox.mapboxsdk.maps.NativeMapView: long nativeGetTransitionDuration()
androidx.window.layout.FoldingFeature$State: FoldingFeature$State(java.lang.String)
com.mapbox.mapboxsdk.log.Logger: void d(java.lang.String,java.lang.String,java.lang.Throwable)
androidx.recyclerview.widget.RecyclerView: RecyclerView(android.content.Context,android.util.AttributeSet)
com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory$1
com.mapbox.geojson.Polygon: java.lang.String TYPE
androidx.appcompat.widget.AppCompatSpinner: void setDropDownHorizontalOffset(int)
androidx.window.embedding.ActivityFilter: int hashCode()
com.mapbox.geojson.MultiLineString: com.mapbox.geojson.BoundingBox bbox()
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: long[] vibrationPattern
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointEmojiModifierBase(int)
androidx.appcompat.widget.ActionBarOverlayLayout: void setIcon(int)
com.mapbox.geojson.Polygon: com.mapbox.geojson.Polygon fromOuterInner(com.mapbox.geojson.LineString,com.mapbox.geojson.BoundingBox,java.util.List)
com.mapbox.mapboxsdk.location.LocationIndicatorLayer: java.lang.Object nativeGetPerspectiveCompensation()
androidx.window.embedding.EmbeddingCompat: androidx.window.embedding.EmbeddingCompat$Companion Companion
com.mapbox.geojson.Feature$GsonTypeAdapter: com.google.gson.Gson gson
com.google.android.gms.location.zzae: android.os.Parcelable$Creator CREATOR
com.mapbox.geojson.MultiPolygon: java.lang.Object coordinates()
com.google.android.material.internal.VisibilityAwareImageButton: void setVisibility(int)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: float getFillAlpha()
com.mapbox.mapboxsdk.annotations.BubbleLayout: float getArrowHeight()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_LED_DETAILS_ERROR_CODE
com.mapbox.mapboxsdk.maps.NativeMapView: double nativeGetMetersPerPixelAtLatitude(double,double)
com.mapbox.geojson.GeoJson
com.mapbox.mapboxsdk.style.layers.SymbolLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetIconHaloBlurTransition()
com.mapbox.geojson.ListOfPointCoordinatesTypeAdapter: java.util.List read(com.google.gson.stream.JsonReader)
androidx.appcompat.widget.ViewStubCompat: ViewStubCompat(android.content.Context,android.util.AttributeSet)
com.mapbox.geojson.LineString$GsonTypeAdapter: com.mapbox.geojson.CoordinateContainer createCoordinateContainer(java.lang.String,com.mapbox.geojson.BoundingBox,java.util.List)
com.mapbox.mapboxsdk.offline.OfflineTilePyramidRegionDefinition: OfflineTilePyramidRegionDefinition(java.lang.String,com.mapbox.mapboxsdk.geometry.LatLngBounds,double,double,float)
androidx.window.embedding.EmptyEmbeddingComponent
androidx.window.embedding.ActivityStack: int hashCode()
com.google.android.material.bottomsheet.BottomSheetBehavior
io.flutter.embedding.engine.FlutterJNI: void unregisterTexture(long)
com.mapbox.mapboxsdk.location.LocationIndicatorLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetAccuracyRadiusTransition()
androidx.window.R$styleable: int SplitPairRule_splitRatio
androidx.appcompat.widget.Toolbar: android.view.Menu getMenu()
com.google.android.gms.location.zzj: android.os.Parcelable$Creator CREATOR
io.flutter.embedding.engine.FlutterJNI: void updateJavaAssetManager(android.content.res.AssetManager,java.lang.String)
com.mapbox.mapboxsdk.util.TileServerOptions
kotlin.jvm.internal.CallableReference: java.util.List getAnnotations()
android.support.v4.app.RemoteActionCompatParcelizer
com.mapbox.mapboxsdk.maps.renderer.glsurfaceview.MapboxGLSurfaceView: int getRenderMode()
com.google.firebase.heartbeatinfo.HeartBeatInfo$HeartBeat: com.google.firebase.heartbeatinfo.HeartBeatInfo$HeartBeat valueOf(java.lang.String)
com.mapbox.mapboxsdk.style.layers.Layer: void nativeSetFilter(java.lang.Object[])
com.mapbox.mapboxsdk.style.sources.Source: void setVolatile(java.lang.Boolean)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: void nativeSetIconOpacityTransition(long,long)
androidx.appcompat.widget.LinearLayoutCompat: void setDividerPadding(int)
androidx.appcompat.widget.SearchView: SearchView(android.content.Context)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: void removeWindowLayoutInfoListener(androidx.core.util.Consumer)
com.google.android.material.button.MaterialButton: void setSupportBackgroundTintList(android.content.res.ColorStateList)
com.mapbox.mapboxsdk.style.sources.GeoJsonSource: java.lang.String nativeGetUrl()
com.mapbox.mapboxsdk.log.Logger: void v(java.lang.String,java.lang.String,java.lang.Throwable)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetTextTransform()
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: void accept$lambda-1(androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper,java.util.List)
kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue
com.mapbox.geojson.MultiPolygon$GsonTypeAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
com.google.android.material.button.MaterialButton: void setCornerRadiusResource(int)
com.google.android.material.snackbar.SnackbarContentLayout: android.widget.TextView getMessageView()
com.google.android.gms.cloudmessaging.CloudMessage: android.os.Parcelable$Creator CREATOR
com.mapbox.geojson.shifter.CoordinateShifterManager: com.mapbox.geojson.shifter.CoordinateShifter coordinateShifter
androidx.appcompat.widget.AppCompatTextView
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityCreated(android.app.Activity,android.os.Bundle)
com.mapbox.mapboxsdk.net.NativeConnectivityListener: void nativeOnConnectivityStateChanged(boolean)
com.dexterous.flutterlocalnotifications.models.PersonDetails: com.dexterous.flutterlocalnotifications.models.IconSource iconBitmapSource
androidx.appcompat.widget.Toolbar
com.mapbox.mapboxsdk.maps.NativeMapView: boolean nativeRemoveLayer(long)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization valueOf(java.lang.String)
io.flutter.embedding.android.FlutterTextureView: void setRenderSurface(android.view.Surface)
com.google.android.material.floatingactionbutton.FloatingActionButton: void setBackgroundResource(int)
androidx.constraintlayout.widget.Placeholder: void setEmptyVisibility(int)
kotlin.jvm.internal.CallableReference: java.lang.Object callBy(java.util.Map)
kotlin.jvm.internal.CallableReference: CallableReference(java.lang.Object)
androidx.appcompat.widget.AppCompatRadioButton: void setSupportButtonTintList(android.content.res.ColorStateList)
org.threeten.bp.Year: java.lang.Object readResolve()
com.mapbox.mapboxsdk.maps.NativeMapView: void onWillStartLoadingMap()
com.mapbox.mapboxsdk.geometry.LatLngBounds: LatLngBounds(double,double,double,double)
com.mapbox.mapboxsdk.style.layers.LineLayer: void nativeSetLinePatternTransition(long,long)
com.google.android.material.floatingactionbutton.FloatingActionButton: void setCompatHoveredFocusedTranslationZ(float)
androidx.appcompat.widget.AppCompatTextView: int getAutoSizeMaxTextSize()
com.dexterous.flutterlocalnotifications.ScheduledNotificationReceiver: void onReceive(android.content.Context,android.content.Intent)
com.mapbox.mapboxsdk.offline.OfflineGeometryRegionDefinition: double minZoom
com.mapbox.mapboxsdk.offline.OfflineGeometryRegionDefinition: OfflineGeometryRegionDefinition(java.lang.String,com.mapbox.geojson.Geometry,double,double,float,boolean)
androidx.window.embedding.SplitRule$LayoutDir
androidx.appcompat.widget.Toolbar: int getCurrentContentInsetLeft()
com.mapbox.mapboxsdk.style.sources.UnknownSource: void finalize()
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String NAME
com.mapbox.mapboxsdk.style.layers.RasterLayer: void nativeSetRasterBrightnessMinTransition(long,long)
com.mapbox.mapboxsdk.offline.OfflineRegion: void setOfflineRegionObserver(com.mapbox.mapboxsdk.offline.OfflineRegion$OfflineRegionObserver)
androidx.lifecycle.ReflectiveGenericLifecycleObserver
com.mapbox.mapboxgl.MapboxMapController
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String channelName
com.google.android.gms.common.internal.zat: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.styles.StyleInformation
com.google.gson.JsonArray: void add(java.lang.Boolean)
com.mapbox.mapboxsdk.style.layers.FillExtrusionLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetFillExtrusionTranslateTransition()
androidx.recyclerview.widget.LinearLayoutManager: LinearLayoutManager(android.content.Context,android.util.AttributeSet,int,int)
androidx.media.AudioAttributesImplApi21Parcelizer
androidx.window.layout.ExtensionInterfaceCompat: boolean validateExtensionInterface()
com.dexterous.flutterlocalnotifications.NotificationStyle: com.dexterous.flutterlocalnotifications.NotificationStyle[] $VALUES
com.mapbox.mapboxsdk.offline.OfflineTilePyramidRegionDefinition: java.lang.String styleURL
androidx.window.embedding.ExtensionEmbeddingBackend: void setSplitRules(java.util.Set)
androidx.window.layout.HardwareFoldingFeature: java.lang.String toString()
androidx.window.embedding.SplitRuleParser: SplitRuleParser()
androidx.window.embedding.EmbeddingAdapter: EmbeddingAdapter()
io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action,java.lang.Object)
com.mapbox.geojson.MultiLineString: com.mapbox.geojson.MultiLineString fromJson(java.lang.String)
com.mapbox.mapboxsdk.style.layers.FillExtrusionLayer: java.lang.Object nativeGetFillExtrusionHeight()
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: com.dexterous.flutterlocalnotifications.models.BitmapSource bigPictureBitmapSource
androidx.window.layout.SidecarAdapter$Companion: SidecarAdapter$Companion()
com.mapbox.geojson.MultiPoint: com.mapbox.geojson.BoundingBox bbox
androidx.appcompat.widget.AppCompatCheckBox
com.mapbox.geojson.MultiPoint: MultiPoint(java.lang.String,com.mapbox.geojson.BoundingBox,java.util.List)
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: BigPictureStyleInformation(java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Boolean,java.lang.String,java.lang.Boolean,java.lang.Object,com.dexterous.flutterlocalnotifications.models.BitmapSource,java.lang.Object,com.dexterous.flutterlocalnotifications.models.BitmapSource,java.lang.Boolean)
com.mapbox.geojson.ListofListofListOfPointCoordinatesTypeAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
android.support.v4.media.AudioAttributesImplApi26Parcelizer: AudioAttributesImplApi26Parcelizer()
com.mapbox.mapboxsdk.Mapbox: com.mapbox.mapboxsdk.ModuleProvider moduleProvider
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event[] values()
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeGetVisibleCoordinateBounds(double[])
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1
com.mapbox.geojson.FeatureCollection: int hashCode()
com.mapbox.mapboxsdk.style.sources.GeoJsonSource: void nativeSetGeometry(com.mapbox.geojson.Geometry)
com.mapbox.mapboxsdk.location.LocationIndicatorLayer: java.lang.Object nativeGetImageTiltDisplacement()
androidx.window.embedding.ExtensionEmbeddingBackend: java.lang.String TAG
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
com.google.android.material.floatingactionbutton.FloatingActionButton: android.content.res.ColorStateList getSupportBackgroundTintList()
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void release()
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsVariationSelector(int)
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String LED_COLOR_ALPHA
android.support.v4.media.session.PlaybackStateCompat
com.google.android.material.internal.NavigationMenuView: NavigationMenuView(android.content.Context,android.util.AttributeSet)
androidx.appcompat.widget.ButtonBarLayout: void setAllowStacking(boolean)
com.google.android.material.circularreveal.cardview.CircularRevealCardView: android.graphics.drawable.Drawable getCircularRevealOverlayDrawable()
com.mapbox.geojson.MultiPoint: boolean equals(java.lang.Object)
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: java.util.concurrent.locks.ReentrantLock lock
com.mapbox.geojson.BoundingBox: com.mapbox.geojson.BoundingBox fromLngLats(double,double,double,double)
com.mapbox.geojson.MultiPoint: java.lang.String type
com.google.android.material.theme.MaterialComponentsViewInflater: androidx.appcompat.widget.AppCompatButton createButton(android.content.Context,android.util.AttributeSet)
com.google.gson.JsonPrimitive: int hashCode()
androidx.appcompat.widget.AppCompatAutoCompleteTextView: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
androidx.window.layout.SidecarWindowBackend: boolean DEBUG
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView
android.support.v4.graphics.drawable.IconCompatParcelizer: void write(androidx.core.graphics.drawable.IconCompat,androidx.versionedparcelable.VersionedParcel)
com.mapbox.mapboxsdk.style.light.Light: java.lang.String nativeGetAnchor()
androidx.window.embedding.ActivityStack: boolean isEmpty()
com.mapbox.geojson.GeometryCollection: com.mapbox.geojson.GeometryCollection fromGeometries(java.util.List)
androidx.window.core.Version: boolean equals(java.lang.Object)
io.flutter.embedding.engine.FlutterJNI: void addIsDisplayingFlutterUiListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener)
com.mapbox.mapboxsdk.offline.OfflineRegionDefinition: com.mapbox.mapboxsdk.geometry.LatLngBounds getBounds()
androidx.appcompat.app.AppCompatViewInflater: AppCompatViewInflater()
io.flutter.embedding.engine.FlutterJNI: java.util.Set flutterUiDisplayListeners
com.mapbox.geojson.FeatureCollection$GsonTypeAdapter: com.mapbox.geojson.FeatureCollection read(com.google.gson.stream.JsonReader)
androidx.window.layout.WindowInfoTrackerDecorator: androidx.window.layout.WindowInfoTracker decorate(androidx.window.layout.WindowInfoTracker)
com.mapbox.mapboxsdk.maps.renderer.MapRenderer: void onStop()
androidx.appcompat.widget.AppCompatImageView: void setImageResource(int)
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: com.dexterous.flutterlocalnotifications.models.SoundSource soundSource
androidx.appcompat.widget.LinearLayoutCompat: int getOrientation()
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeLatLngsForPixels(double[],double[],float)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: SurfaceTextureWrapper(android.graphics.SurfaceTexture)
com.mapbox.mapboxsdk.style.layers.Layer: float nativeGetMinZoom()
com.mapbox.geojson.MultiPoint$GsonTypeAdapter: void write(com.google.gson.stream.JsonWriter,com.mapbox.geojson.MultiPoint)
androidx.lifecycle.DefaultLifecycleObserver
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback
androidx.window.embedding.SplitInfo: boolean equals(java.lang.Object)
com.mapbox.mapboxsdk.maps.Image
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: androidx.window.layout.ExtensionsWindowLayoutInfoAdapter INSTANCE
androidx.window.layout.SidecarCompat: void register(android.os.IBinder,android.app.Activity)
com.google.android.gms.internal.location.zzbf: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String MATCH_DATE_TIME_COMPONENTS
androidx.media.AudioAttributesImplApi26Parcelizer
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String IMPORTANCE
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetIconPadding()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean fullScreenIntent
org.threeten.bp.LocalDateTime: java.lang.Object readResolve()
com.mapbox.mapboxsdk.style.layers.LineLayer: java.lang.Object nativeGetLineSortKey()
com.mapbox.mapboxsdk.style.types.Formatted
com.google.gson.JsonArray: int getAsInt()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: void remove()
com.mapbox.mapboxsdk.offline.OfflineTilePyramidRegionDefinition: android.os.Parcelable$Creator CREATOR
com.mapbox.mapboxsdk.util.TileServerOptions: com.mapbox.mapboxsdk.util.TileServerOptions mapboxConfiguration()
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object nextParkedWorker
com.google.android.datatransport.cct.internal.ClientInfo$ClientType: com.google.android.datatransport.cct.internal.ClientInfo$ClientType[] values()
com.mapbox.mapboxsdk.maps.Image: java.lang.String name
com.dexterous.flutterlocalnotifications.NotificationStyle
com.google.android.material.circularreveal.CircularRevealFrameLayout: void setRevealInfo(com.google.android.material.circularreveal.CircularRevealWidget$RevealInfo)
androidx.window.embedding.SplitInfo: int hashCode()
com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory: boolean maintainType
com.mapbox.mapboxsdk.style.types.FormattedSection: boolean equals(java.lang.Object)
io.flutter.view.AccessibilityViewEmbedder: void cacheVirtualIdMappings(android.view.View,int,int)
com.mapbox.mapboxsdk.style.layers.RasterLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetRasterBrightnessMinTransition()
androidx.window.core.Version: int patch
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String SELECT_NOTIFICATION
androidx.appcompat.widget.LinearLayoutCompat
kotlinx.coroutines.scheduling.WorkQueue
androidx.appcompat.app.AppCompatViewInflater: androidx.appcompat.widget.AppCompatEditText createEditText(android.content.Context,android.util.AttributeSet)
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceChanged(long,int,int)
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: android.app.Activity getActivity()
com.mapbox.geojson.BaseGeometryTypeAdapter: BaseGeometryTypeAdapter(com.google.gson.Gson,com.google.gson.TypeAdapter)
androidx.recyclerview.widget.RecyclerView: void setItemAnimator(androidx.recyclerview.widget.RecyclerView$ItemAnimator)
kotlinx.coroutines.JobSupport$Finishing
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String PLAY_SOUND
com.google.android.datatransport.runtime.scheduling.jobscheduling.AlarmManagerSchedulerBroadcastReceiver
com.google.gson.JsonPrimitive: java.lang.String getAsString()
androidx.appcompat.widget.ActionBarContainer: void setTransitioning(boolean)
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency: com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency[] $VALUES
org.threeten.bp.chrono.JapaneseDate
com.mapbox.geojson.BaseGeometryTypeAdapter: com.google.gson.Gson gson
com.mapbox.mapboxsdk.maps.renderer.MapRendererRunnable: void nativeInitialize()
com.google.android.gms.common.internal.TelemetryData: android.os.Parcelable$Creator CREATOR
androidx.appcompat.widget.ActionBarContainer: void setSplitBackground(android.graphics.drawable.Drawable)
kotlinx.coroutines.CancellableContinuationImpl: int _decision
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String USES_CHRONOMETER
androidx.window.embedding.SplitController: void registerRule(androidx.window.embedding.EmbeddingRule)
com.mapbox.mapboxsdk.style.layers.TransitionOptions: com.mapbox.mapboxsdk.style.layers.TransitionOptions fromTransitionOptions(long,long,boolean)
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String GROUP_ID
com.google.android.material.appbar.ViewOffsetBehavior: ViewOffsetBehavior()
androidx.window.R$id: int androidx_window_activity_scope
com.mapbox.geojson.LineString: com.mapbox.geojson.LineString fromPolyline(java.lang.String,int)
androidx.window.R$attr: int primaryActivityName
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation
com.google.android.material.button.MaterialButton: int getIconGravity()
androidx.window.core.Bounds: Bounds(android.graphics.Rect)
com.google.android.material.transformation.FabTransformationBehavior: FabTransformationBehavior()
com.google.android.gms.signin.internal.zak: android.os.Parcelable$Creator CREATOR
kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.Continuation create(kotlin.coroutines.Continuation)
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeSetStyleUrl(java.lang.String)
com.mapbox.geojson.GeometryCollection: java.util.List geometries()
com.mapbox.mapboxsdk.style.sources.GeoJsonSource: void nativeSetGeoJsonString(java.lang.String)
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeSetTransitionDuration(long)
kotlin.jvm.internal.Lambda: int getArity()
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag[] values()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readMessagingStyleInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map,com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation)
androidx.appcompat.widget.ActionMenuView
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$300(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
io.flutter.plugins.firebase.core.FlutterFirebaseCoreRegistrar
kotlin.coroutines.jvm.internal.SuspendLambda: SuspendLambda(int)
com.mapbox.mapboxsdk.util.DefaultStyle: android.os.Parcelable$Creator CREATOR
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.FoldingFeature$State state
com.google.firebase.messaging.FirebaseMessagingService: FirebaseMessagingService()
com.mapbox.mapboxsdk.style.layers.FillLayer: void nativeSetFillTranslateTransition(long,long)
com.mapbox.mapboxsdk.style.layers.FillLayer: FillLayer(long)
io.flutter.embedding.engine.FlutterJNI: void onSurfaceCreated(android.view.Surface)
com.mapbox.geojson.MultiLineString: com.mapbox.geojson.MultiLineString fromLngLats(java.util.List)
androidx.window.R: R()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setVisibility(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
com.google.android.material.bottomappbar.BottomAppBar$Behavior: BottomAppBar$Behavior(android.content.Context,android.util.AttributeSet)
com.google.gson.JsonArray: boolean contains(com.google.gson.JsonElement)
androidx.appcompat.widget.AppCompatTextView: int getAutoSizeMinTextSize()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPaused(android.app.Activity)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readGroupingInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
com.mapbox.mapboxsdk.style.layers.FillLayer: java.lang.Object nativeGetFillSortKey()
androidx.appcompat.widget.SearchView: java.lang.CharSequence getQueryHint()
org.threeten.bp.chrono.ThaiBuddhistDate: java.lang.Object writeReplace()
androidx.window.layout.WindowInfoTracker$Companion: androidx.window.layout.WindowInfoTrackerDecorator decorator
com.mapbox.mapboxsdk.log.Logger: int ERROR
io.flutter.view.FlutterCallbackInformation: java.lang.String callbackClassName
androidx.window.embedding.SplitController$Companion: SplitController$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
com.mapbox.mapboxsdk.style.layers.BackgroundLayer
com.mapbox.mapboxsdk.util.TileServerOptions: TileServerOptions(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String,com.mapbox.mapboxsdk.util.DefaultStyle[])
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String STYLE
com.mapbox.geojson.CoordinateContainer: java.lang.Object coordinates()
io.flutter.embedding.engine.FlutterJNI: void nativeRunBundleAndSnapshotFromLibrary(long,java.lang.String,java.lang.String,java.lang.String,android.content.res.AssetManager,java.util.List)
com.mapbox.geojson.Point: com.mapbox.geojson.Point fromLngLat(double,double,double)
androidx.window.embedding.ActivityFilter: java.lang.String toString()
com.mapbox.mapboxsdk.style.sources.Source: java.lang.Long getMinimumTileUpdateInterval()
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation: java.lang.String bigText
com.google.gson.JsonElement: boolean getAsBoolean()
android.support.v4.media.session.MediaControllerCompat$MediaControllerImplApi21$ExtraBinderRequestResultReceiver
com.google.android.material.appbar.AppBarLayout: int getMinimumHeightForVisibleOverlappingContent()
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency: ScheduledNotificationRepeatFrequency(java.lang.String,int)
androidx.appcompat.app.AppCompatViewInflater: void verifyNotNull(android.view.View,java.lang.String)
androidx.window.layout.WindowMetricsCalculatorDecorator: androidx.window.layout.WindowMetricsCalculator decorate(androidx.window.layout.WindowMetricsCalculator)
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents DateAndTime
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetTextOffset()
androidx.appcompat.widget.ActionBarContextView: java.lang.CharSequence getSubtitle()
com.mapbox.geojson.Point: com.mapbox.geojson.Point fromLngLat(double[])
com.mapbox.mapboxsdk.style.layers.BackgroundLayer: java.lang.Object nativeGetBackgroundPattern()
com.mapbox.mapboxsdk.style.sources.VectorSource: java.lang.String nativeGetUrl()
com.mapbox.mapboxsdk.style.layers.HeatmapLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetHeatmapRadiusTransition()
com.dexterous.flutterlocalnotifications.models.Time
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchEmptyPlatformMessage(long,java.lang.String,int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void rescheduleNotifications(android.content.Context)
com.mapbox.mapboxsdk.storage.FileSource$ResourcesCachePathChangeCallback
com.dexterous.flutterlocalnotifications.models.BitmapSource: com.dexterous.flutterlocalnotifications.models.BitmapSource valueOf(java.lang.String)
com.google.gson.JsonElement: java.math.BigDecimal getAsBigDecimal()
android.support.v4.media.AudioAttributesImplApi21Parcelizer
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void repeat(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
org.threeten.bp.chrono.HijrahEra: org.threeten.bp.chrono.HijrahEra valueOf(java.lang.String)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: void setRootAlpha(int)
com.mapbox.mapboxsdk.maps.renderer.MapRenderer: void nativeOnSurfaceChanged(int,int)
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: void accept(java.lang.Object)
org.threeten.bp.chrono.IsoChronology: java.lang.Object readResolve()
androidx.window.layout.DisplayCompatHelperApi17
androidx.appcompat.app.AppCompatViewInflater: int[] sOnClickAttrs
androidx.window.embedding.ActivityRule: ActivityRule(java.util.Set,boolean)
org.threeten.bp.YearMonth
com.google.android.material.internal.NavigationMenuView: int getWindowAnimations()
androidx.window.core.Bounds: int top
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointEmoji(int)
com.mapbox.mapboxsdk.util.TileServerOptions: java.lang.String glyphsDomainName
com.mapbox.mapboxsdk.style.layers.HillshadeLayer: java.lang.Object nativeGetHillshadeIlluminationDirection()
com.mapbox.mapboxsdk.offline.OfflineManager: void nativeInvalidateAmbientCache(com.mapbox.mapboxsdk.offline.OfflineManager$FileSourceCallback)
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory of(java.lang.Class,java.lang.String)
com.mapbox.mapboxsdk.style.layers.BackgroundLayer: void finalize()
androidx.window.layout.HardwareFoldingFeature$Type$Companion: androidx.window.layout.HardwareFoldingFeature$Type getHINGE()
androidx.window.layout.SidecarWindowBackend: androidx.window.layout.SidecarWindowBackend globalInstance
com.mapbox.geojson.LineString: com.mapbox.geojson.LineString fromLngLats(java.util.List)
com.mapbox.mapboxsdk.maps.Image: boolean sdf
com.mapbox.mapboxsdk.geometry.LatLngBounds: double longitudeWest
com.google.android.material.floatingactionbutton.FloatingActionButton: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
com.google.android.material.internal.BaselineLayout: BaselineLayout(android.content.Context,android.util.AttributeSet)
com.mapbox.mapboxsdk.style.sources.Source: java.lang.String nativeGetAttribution()
com.mapbox.mapboxsdk.style.types.FormattedSection: FormattedSection(java.lang.String,java.lang.Number,java.lang.String[],java.lang.String)
com.mapbox.geojson.BaseCoordinatesTypeAdapter: java.util.List readPointList(com.google.gson.stream.JsonReader)
androidx.window.embedding.ExtensionEmbeddingBackend: void getSplitChangeCallbacks$annotations()
com.mapbox.geojson.FeatureCollection$GsonTypeAdapter: com.google.gson.TypeAdapter stringAdapter
com.google.gson.JsonElement: com.google.gson.JsonPrimitive getAsJsonPrimitive()
com.mapbox.geojson.MultiPolygon: com.mapbox.geojson.MultiPolygon fromPolygon(com.mapbox.geojson.Polygon)
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction valueOf(java.lang.String)
com.mapbox.mapboxsdk.style.layers.Layer: Layer(long)
androidx.window.layout.WindowMetricsCalculatorCompat: java.lang.String TAG
androidx.appcompat.widget.SearchView$SearchAutoComplete
androidx.window.layout.WindowLayoutInfo: boolean equals(java.lang.Object)
com.google.gson.JsonPrimitive: com.google.gson.JsonPrimitive deepCopy()
com.google.android.material.floatingactionbutton.FloatingActionButton: void setBackgroundTintMode(android.graphics.PorterDuff$Mode)
androidx.window.core.Version$Companion: androidx.window.core.Version getUNKNOWN()
androidx.appcompat.widget.AppCompatSpinner: void setBackgroundResource(int)
kotlin.jvm.internal.FunctionReference: FunctionReference(int,java.lang.Object)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void cancelAllNotifications(io.flutter.plugin.common.MethodChannel$Result)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter
com.mapbox.geojson.LineString: LineString(java.lang.String,com.mapbox.geojson.BoundingBox,java.util.List)
androidx.window.embedding.SplitPlaceholderRule: java.util.Set filters
androidx.window.layout.ExtensionWindowLayoutInfoBackend: ExtensionWindowLayoutInfoBackend(androidx.window.extensions.layout.WindowLayoutComponent)
androidx.appcompat.widget.AppCompatImageView: android.content.res.ColorStateList getSupportBackgroundTintList()
androidx.window.core.Version: androidx.window.core.Version parse(java.lang.String)
androidx.recyclerview.widget.RecyclerView: void setItemViewCacheSize(int)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetTextHaloColor()
io.flutter.embedding.engine.FlutterJNI: boolean getIsSoftwareRenderingEnabled()
com.mapbox.mapboxsdk.style.layers.LineLayer: void nativeSetLineWidthTransition(long,long)
androidx.window.layout.FoldingFeature$Orientation: androidx.window.layout.FoldingFeature$Orientation HORIZONTAL
com.mapbox.mapboxsdk.offline.OfflineManager$MergeOfflineRegionsCallback: void onError(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void removeIsDisplayingFlutterUiListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener)
okhttp3.internal.http2.ErrorCode: okhttp3.internal.http2.ErrorCode valueOf(java.lang.String)
com.google.gson.JsonArray: byte getAsByte()
com.mapbox.geojson.FeatureCollection: java.lang.String type()
kotlinx.coroutines.internal.LockFreeLinkedListHead
com.mapbox.geojson.MultiPoint: java.lang.String toJson()
com.mapbox.mapboxsdk.annotations.BubbleLayout: float getStrokeWidth()
androidx.media.AudioAttributesImplBase: AudioAttributesImplBase()
androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons valueOf(java.lang.String)
androidx.appcompat.widget.AppCompatButton: android.content.res.ColorStateList getSupportBackgroundTintList()
androidx.appcompat.view.menu.ActionMenuItemView: void setExpandedFormat(boolean)
com.mapbox.mapboxsdk.style.sources.CustomGeometrySource: boolean isCancelled(int,int,int)
com.google.android.material.circularreveal.CircularRevealFrameLayout
androidx.window.embedding.SplitRuleParser: androidx.window.embedding.SplitPlaceholderRule parseSplitPlaceholderRule(android.content.Context,android.content.res.XmlResourceParser)
com.mapbox.mapboxsdk.snapshotter.MapSnapshotter: void setSize(int,int)
com.mapbox.mapboxsdk.style.layers.BackgroundLayer: java.lang.Object nativeGetBackgroundColor()
com.google.android.material.internal.NavigationMenuItemView: androidx.appcompat.view.menu.MenuItemImpl getItemData()
io.flutter.plugins.firebase.core.FlutterFirebasePlugin: com.google.android.gms.tasks.Task getPluginConstantsForFirebaseApp(com.google.firebase.FirebaseApp)
androidx.appcompat.widget.LinearLayoutCompat: int getGravity()
androidx.appcompat.widget.AppCompatTextView: int getLastBaselineToBottomHeight()
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event valueOf(java.lang.String)
io.flutter.embedding.android.FlutterTextureView: io.flutter.embedding.engine.renderer.FlutterRenderer getAttachedRenderer()
androidx.appcompat.widget.LinearLayoutCompat: void setMeasureWithLargestChildEnabled(boolean)
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: java.util.List lastInfo
androidx.window.embedding.EmbeddingCompat
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void setTranslateX(float)
com.mapbox.geojson.Feature: com.google.gson.JsonElement removeProperty(java.lang.String)
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout rootView
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setStrokeAlpha(float)
androidx.appcompat.widget.Toolbar: Toolbar(android.content.Context,android.util.AttributeSet)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readStyleInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List mutators
com.dexterous.flutterlocalnotifications.models.Time: Time()
com.mapbox.geojson.PointAsCoordinatesTypeAdapter: PointAsCoordinatesTypeAdapter()
com.mapbox.geojson.Polygon: com.mapbox.geojson.Polygon fromJson(java.lang.String)
com.mapbox.mapboxsdk.style.sources.GeoJsonSource: com.mapbox.geojson.Feature[] querySourceFeatures(java.lang.Object[])
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: java.util.Map subtypeToLabel
io.flutter.embedding.engine.FlutterJNI: void nativeUpdateJavaAssetManager(long,android.content.res.AssetManager,java.lang.String)
com.mapbox.mapboxsdk.style.layers.HillshadeLayer: void nativeSetHillshadeExaggerationTransition(long,long)
androidx.window.layout.SidecarAdapter$Companion: java.util.List getSidecarDisplayFeatures(androidx.window.sidecar.SidecarWindowLayoutInfo)
com.google.android.material.theme.MaterialComponentsViewInflater
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String LED_COLOR_BLUE
androidx.window.embedding.SplitController: SplitController(kotlin.jvm.internal.DefaultConstructorMarker)
androidx.appcompat.widget.ActionMenuView: int getPopupTheme()
com.mapbox.mapboxsdk.maps.NativeMapView: void onCameraWillChange(boolean)
androidx.window.embedding.SplitRuleParser: android.content.ComponentName buildClassName(java.lang.String,java.lang.CharSequence)
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: void accept(java.util.List)
com.google.gson.LongSerializationPolicy: com.google.gson.LongSerializationPolicy[] values()
kotlinx.coroutines.BlockingEventLoop
kotlinx.coroutines.internal.AtomicOp: java.lang.Object _consensus
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setFillAlpha(float)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetSymbolSpacing()
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int indexInArray
androidx.versionedparcelable.CustomVersionedParcelable: CustomVersionedParcelable()
com.mapbox.mapboxsdk.maps.renderer.MapRenderer: void onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int)
com.google.gson.JsonPrimitive: JsonPrimitive(java.lang.Boolean)
com.google.firebase.datatransport.TransportRegistrar: TransportRegistrar()
androidx.window.embedding.SplitRuleParser: androidx.window.embedding.ActivityRule parseSplitActivityRule(android.content.Context,android.content.res.XmlResourceParser)
io.flutter.embedding.engine.FlutterJNI: void detachFromNativeAndReleaseResources()
com.mapbox.mapboxsdk.Mapbox
com.google.android.datatransport.cct.CctBackendFactory: CctBackendFactory()
com.mapbox.geojson.ListOfPointCoordinatesTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.util.List)
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: java.lang.Boolean htmlFormatContentTitle
com.google.android.material.appbar.AppBarLayout
com.dexterous.flutterlocalnotifications.RepeatInterval: com.dexterous.flutterlocalnotifications.RepeatInterval Hourly
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: android.app.Activity $activity
kotlin.jvm.internal.CallableReference: boolean isFinal()
com.mapbox.mapboxsdk.style.layers.LineLayer: java.lang.Object nativeGetLineTranslateAnchor()
androidx.window.embedding.SplitPairFilter
androidx.appcompat.widget.ViewStubCompat
io.flutter.view.AccessibilityViewEmbedder: android.view.View rootAccessibilityView
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: java.util.Map consumerToJobMap
com.google.android.material.internal.NavigationMenuItemView: void setTextAppearance(int)
com.mapbox.mapboxsdk.storage.FileSource: void setResourceCachePath(java.lang.String,com.mapbox.mapboxsdk.storage.FileSource$ResourcesCachePathChangeCallback)
com.mapbox.mapboxsdk.maps.NativeMapView: void onWillStartRenderingMap()
com.mapbox.mapboxsdk.util.TileServerOptions: java.lang.String styleVersionPrefix
org.threeten.bp.Duration: java.lang.Object readResolve()
com.google.android.material.internal.NavigationMenuItemView: NavigationMenuItemView(android.content.Context,android.util.AttributeSet)
com.mapbox.mapboxsdk.style.types.FormattedSection: void setTextColor(java.lang.String)
androidx.window.embedding.EmbeddingRule: EmbeddingRule()
android.support.v4.media.AudioAttributesCompatParcelizer: androidx.media.AudioAttributesCompat read(androidx.versionedparcelable.VersionedParcel)
kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable computeReflected()
com.mapbox.geojson.LineString: java.lang.Object coordinates()
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: ExtensionsWindowLayoutInfoAdapter()
androidx.appcompat.widget.AppCompatCheckBox: void setButtonDrawable(android.graphics.drawable.Drawable)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath
com.google.gson.JsonArray: com.google.gson.JsonElement remove(int)
androidx.window.embedding.ActivityFilter: boolean matchesIntent(android.content.Intent)
com.google.android.gms.maps.model.PolygonOptions: android.os.Parcelable$Creator CREATOR
com.google.firebase.messaging.reporting.MessagingClientEvent$Event: com.google.firebase.messaging.reporting.MessagingClientEvent$Event valueOf(java.lang.String)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetIconOpacityTransition()
androidx.appcompat.widget.ActionBarContainer
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsRegionalIndicator(int)
androidx.recyclerview.widget.RecyclerView: boolean getClipToPadding()
com.mapbox.mapboxsdk.style.layers.CircleLayer: void nativeSetCircleStrokeColorTransition(long,long)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: com.google.gson.Gson buildGson()
androidx.coordinatorlayout.widget.CoordinatorLayout: androidx.core.view.WindowInsetsCompat getLastWindowInsets()
androidx.appcompat.widget.AppCompatImageView
androidx.window.core.Bounds: java.lang.String toString()
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeJumpTo(double,double,double,double,double,double[])
com.mapbox.geojson.LineString$GsonTypeAdapter: com.mapbox.geojson.LineString read(com.google.gson.stream.JsonReader)
io.flutter.plugins.firebase.messaging.FlutterFirebaseMessagingBackgroundService
androidx.window.layout.WindowMetrics: java.lang.String toString()
com.mapbox.mapboxsdk.style.layers.CircleLayer: java.lang.Object nativeGetCircleStrokeOpacity()
com.mapbox.geojson.Feature: boolean equals(java.lang.Object)
com.mapbox.mapboxsdk.offline.OfflineManager: void listOfflineRegions(com.mapbox.mapboxsdk.storage.FileSource,com.mapbox.mapboxsdk.offline.OfflineManager$ListOfflineRegionsCallback)
androidx.appcompat.widget.LinearLayoutCompat: void setVerticalGravity(int)
com.mapbox.mapboxsdk.offline.OfflineRegionDefinition: double getMaxZoom()
com.mapbox.mapboxsdk.style.layers.FillExtrusionLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetFillExtrusionPatternTransition()
androidx.appcompat.widget.ActionBarOverlayLayout: int getNestedScrollAxes()
com.mapbox.mapboxsdk.log.Logger: void setVerbosity(int)
androidx.window.embedding.SplitController: void clearRegisteredRules()
androidx.appcompat.widget.ActionBarOverlayLayout: void setOverlayMode(boolean)
com.google.android.material.floatingactionbutton.FloatingActionButton: FloatingActionButton(android.content.Context,android.util.AttributeSet)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String subText
androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State valueOf(java.lang.String)
androidx.appcompat.widget.ActionBarContextView: void setVisibility(int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String PERIODICALLY_SHOW_METHOD
androidx.appcompat.widget.ActionBarOverlayLayout: void setShowingForActionMode(boolean)
com.google.android.gms.internal.location.zzo: android.os.Parcelable$Creator CREATOR
com.mapbox.geojson.LineString
androidx.window.layout.FoldingFeature$OcclusionType$Companion: FoldingFeature$OcclusionType$Companion()
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate asyncWaitForVsyncDelegate
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void getTransformMatrix(float[])
org.threeten.bp.DayOfWeek: org.threeten.bp.DayOfWeek[] values()
androidx.appcompat.widget.Toolbar: void setNavigationContentDescription(java.lang.CharSequence)
androidx.window.layout.SidecarCompat$DistinctElementCallback: androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface callbackInterface
androidx.cardview.widget.CardView: void setCardBackgroundColor(int)
android.support.v4.graphics.drawable.IconCompatParcelizer
androidx.fragment.app.FragmentManagerViewModel
androidx.cardview.widget.CardView: void setUseCompatPadding(boolean)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer priority
androidx.window.layout.WindowMetricsCalculator$Companion$overrideDecorator$1: androidx.window.layout.WindowMetricsCalculator invoke(androidx.window.layout.WindowMetricsCalculator)
com.google.android.datatransport.Priority: com.google.android.datatransport.Priority valueOf(java.lang.String)
com.mapbox.mapboxsdk.style.layers.FillExtrusionLayer: java.lang.Object nativeGetFillExtrusionBase()
kotlinx.coroutines.CancelledContinuation: int _resumed
androidx.window.layout.ActivityCompatHelperApi30: ActivityCompatHelperApi30()
com.mapbox.geojson.MultiLineString: MultiLineString(java.lang.String,com.mapbox.geojson.BoundingBox,java.util.List)
com.mapbox.geojson.BoundingBox: com.mapbox.geojson.BoundingBox fromLngLats(double,double,double,double,double,double)
androidx.window.core.Bounds: int getWidth()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void schedule(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.google.gson.JsonObject: com.google.gson.JsonElement remove(java.lang.String)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: java.lang.Object invokeSuspend(java.lang.Object)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType[] values()
com.mapbox.mapboxsdk.maps.renderer.MapRenderer: void nativeRender()
com.google.android.datatransport.Priority: com.google.android.datatransport.Priority[] values()
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.concurrent.locks.ReentrantLock access$getGlobalLock$cp()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onAttachedToActivity(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
org.threeten.bp.chrono.ChronoZonedDateTimeImpl
com.example.takecare_user.MainActivity: MainActivity()
androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowBackend windowBackend
com.mapbox.geojson.BaseGeometryTypeAdapter: com.mapbox.geojson.CoordinateContainer createCoordinateContainer(java.lang.String,com.mapbox.geojson.BoundingBox,java.lang.Object)
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource BitmapFilePath
com.mapbox.mapboxsdk.offline.OfflineManager$FileSourceCallback: void onError(java.lang.String)
com.mapbox.mapboxsdk.maps.NativeMapView: void onSourceChanged(java.lang.String)
com.mapbox.mapboxsdk.http.NativeHttpRequest: void handleFailure(int,java.lang.String)
androidx.appcompat.widget.SearchView$SavedState: android.os.Parcelable$Creator CREATOR
com.google.gson.JsonObject: com.google.gson.JsonElement get(java.lang.String)
io.flutter.view.AccessibilityBridge$StringAttributeType: io.flutter.view.AccessibilityBridge$StringAttributeType valueOf(java.lang.String)
androidx.core.content.ContextCompat$Api21Impl: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)
com.mapbox.mapboxsdk.style.layers.CircleLayer: java.lang.Object nativeGetCircleBlur()
com.mapbox.geojson.Polygon: com.mapbox.geojson.LineString outer()
com.mapbox.mapboxsdk.style.sources.Source: void setMinimumTileUpdateInterval(java.lang.Long)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String DATA_URI
com.mapbox.mapboxsdk.offline.OfflineTilePyramidRegionDefinition
io.flutter.plugins.firebase.messaging.FlutterFirebaseMessagingService: FlutterFirebaseMessagingService()
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeTriggerRepaint()
com.google.android.material.button.MaterialButton: void setStrokeColorResource(int)
androidx.window.layout.WindowInfoTracker$Companion: void overrideDecorator(androidx.window.layout.WindowInfoTrackerDecorator)
kotlinx.coroutines.JobImpl
com.dexterous.flutterlocalnotifications.models.BitmapSource
com.dexterous.flutterlocalnotifications.models.MessageDetails
androidx.window.layout.SidecarCompat$Companion
androidx.core.app.RemoteActionCompat
androidx.appcompat.widget.AppCompatImageView: void setBackgroundResource(int)
com.mapbox.mapboxsdk.style.layers.FillLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetFillTranslateTransition()
androidx.window.embedding.SplitPairFilter: java.lang.String secondaryActivityIntentAction
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation: java.util.ArrayList lines
kotlin.jvm.internal.CallableReference: boolean isSuspend()
com.mapbox.mapboxsdk.style.layers.SymbolLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetIconColorTransition()
androidx.window.embedding.ExtensionEmbeddingBackend: boolean isSplitSupported()
com.mapbox.mapboxsdk.style.layers.RasterLayer: java.lang.Object nativeGetRasterBrightnessMax()
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onAttachedToEngine(android.content.Context,io.flutter.plugin.common.BinaryMessenger)
com.google.firebase.installations.FirebaseInstallationsException$Status: com.google.firebase.installations.FirebaseInstallationsException$Status valueOf(java.lang.String)
androidx.constraintlayout.widget.ConstraintLayout: void setMaxHeight(int)
com.mapbox.mapboxsdk.style.types.FormattedSection: FormattedSection(java.lang.String,java.lang.Number)
com.mapbox.geojson.FeatureCollection$GsonTypeAdapter: com.google.gson.Gson gson
com.mapbox.geojson.exception.GeoJsonException: GeoJsonException(java.lang.String)
androidx.window.embedding.ActivityFilter: ActivityFilter(android.content.ComponentName,java.lang.String)
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: int label
com.google.android.material.bottomappbar.BottomAppBar: void setBackgroundTint(android.content.res.ColorStateList)
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String SOUND_SOURCE
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String DELETE_NOTIFICATION_CHANNEL_METHOD
com.google.android.material.bottomappbar.BottomAppBar: void setFabAlignmentMode(int)
com.mapbox.mapboxsdk.net.NativeConnectivityListener: boolean invalidated
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setupNotificationChannel(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails)
kotlinx.coroutines.channels.LinkedListChannel
com.mapbox.mapboxsdk.style.layers.TransitionOptions: long delay
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String shortcutId
androidx.appcompat.app.AppCompatViewInflater: android.view.View createView(android.content.Context,java.lang.String,android.util.AttributeSet)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onReattachedToActivityForConfigChanges(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
androidx.appcompat.widget.AppCompatImageButton: void setImageURI(android.net.Uri)
androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1
io.flutter.embedding.engine.FlutterJNI: void handlePlatformMessageResponse(int,java.nio.ByteBuffer)
androidx.constraintlayout.widget.ConstraintHelper: void setIds(java.lang.String)
com.mapbox.mapboxsdk.annotations.BubbleLayout: int getBubbleColor()
com.google.gson.JsonArray: JsonArray()
com.mapbox.mapboxsdk.offline.OfflineRegion$OfflineRegionDeleteCallback: void onError(java.lang.String)
androidx.window.layout.FoldingFeature: androidx.window.layout.FoldingFeature$State getState()
com.dexterous.flutterlocalnotifications.models.Time: java.lang.Integer second
com.google.android.material.transformation.ExpandableTransformationBehavior: ExpandableTransformationBehavior(android.content.Context,android.util.AttributeSet)
kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.Continuation intercepted()
io.flutter.embedding.engine.FlutterJNI: java.lang.String TAG
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: java.lang.String summaryText
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.PlatformView getView()
com.google.android.material.appbar.AppBarLayout: void setExpanded(boolean)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean hasInvalidLedDetails(io.flutter.plugin.common.MethodChannel$Result,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
androidx.core.graphics.drawable.IconCompat: IconCompat()
androidx.media.AudioAttributesImplApi21Parcelizer: androidx.media.AudioAttributesImplApi21 read(androidx.versionedparcelable.VersionedParcel)
androidx.constraintlayout.widget.ConstraintLayout
com.mapbox.mapboxsdk.offline.OfflineRegion$OfflineRegionInvalidateCallback: void onError(java.lang.String)
com.google.android.material.internal.NavigationMenuItemView: void setIconTintList(android.content.res.ColorStateList)
com.mapbox.mapboxsdk.snapshotter.MapSnapshotter: void nativeCancel()
com.google.firebase.messaging.reporting.MessagingClientEvent$SDKPlatform: com.google.firebase.messaging.reporting.MessagingClientEvent$SDKPlatform valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.dart.PlatformMessageHandler platformMessageHandler
com.google.gson.JsonElement: short getAsShort()
io.flutter.embedding.engine.FlutterJNI: void asyncWaitForVsync(long)
com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory$1: RuntimeTypeAdapterFactory$1(com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory,java.util.Map,java.util.Map)
kotlinx.coroutines.CommonPool: java.util.concurrent.Executor pool
androidx.lifecycle.Lifecycling$1
androidx.appcompat.widget.AppCompatTextView: void setTextMetricsParamsCompat(androidx.core.text.PrecomputedTextCompat$Params)
com.mapbox.geojson.GeometryCollection$GsonTypeAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readPlatformSpecifics(java.util.Map,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
com.mapbox.mapboxsdk.style.layers.CircleLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetCircleColorTransition()
kotlin.jvm.internal.CallableReference: boolean isAbstract()
com.mapbox.geojson.gson.GeoJsonAdapterFactory$GeoJsonAdapterFactoryIml: GeoJsonAdapterFactory$GeoJsonAdapterFactoryIml()
com.mapbox.mapboxsdk.log.Logger
com.mapbox.mapboxsdk.location.LocationIndicatorLayer: java.lang.Object nativeGetBearing()
com.mapbox.mapboxsdk.offline.OfflineRegionDefinition: double getMinZoom()
com.mapbox.geojson.LineString: java.lang.String type()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup
androidx.window.layout.WindowInfoTrackerImpl$Companion
com.mapbox.mapboxsdk.camera.CameraPosition: double[] padding
com.google.gson.JsonArray: double getAsDouble()
org.threeten.bp.LocalDateTime
com.google.android.material.circularreveal.CircularRevealFrameLayout: com.google.android.material.circularreveal.CircularRevealWidget$RevealInfo getRevealInfo()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.content.Intent getLaunchIntent(android.content.Context)
androidx.window.layout.WindowMetricsCalculator: androidx.window.layout.WindowMetricsCalculator$Companion Companion
org.threeten.bp.ZonedDateTime: java.lang.Object readResolve()
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: java.lang.String DESCRIPTION
com.mapbox.geojson.MultiPolygon: com.mapbox.geojson.MultiPolygon fromPolygons(java.util.List)
com.google.android.material.floatingactionbutton.FloatingActionButton: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
kotlin.jvm.internal.FunctionReference: FunctionReference(int)
androidx.window.layout.SidecarCompat$Companion: SidecarCompat$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart valueOf(java.lang.String)
com.mapbox.geojson.gson.GeoJsonAdapterFactory$GeoJsonAdapterFactoryIml: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetTextAnchor()
kotlin.jvm.internal.CallableReference: java.lang.String getName()
com.mapbox.mapboxsdk.maps.NativeMapView: boolean nativeRemoveLayerAt(int)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: kotlinx.coroutines.flow.Flow windowLayoutInfo(android.app.Activity)
androidx.window.core.Version$Companion: Version$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
androidx.window.embedding.EmbeddingAdapter: java.lang.Object component1(android.util.Pair)
com.mapbox.geojson.LineString: java.util.List coordinates()
androidx.appcompat.widget.SearchView$SearchAutoComplete: void setThreshold(int)
com.google.android.material.button.MaterialButton: void setStrokeWidth(int)
com.mapbox.geojson.GeometryCollection: com.mapbox.geojson.GeometryCollection fromJson(java.lang.String)
com.mapbox.geojson.shifter.CoordinateShifterManager$1
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void setScaleY(float)
com.mapbox.mapboxsdk.style.layers.Layer
com.google.android.gms.internal.location.zzm: android.os.Parcelable$Creator CREATOR
com.mapbox.mapboxsdk.style.layers.BackgroundLayer: void nativeSetBackgroundColorTransition(long,long)
com.google.android.material.floatingactionbutton.FloatingActionButton: void setCompatPressedTranslationZResource(int)
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory registerSubtype(java.lang.Class,java.lang.String)
com.dexterous.flutterlocalnotifications.models.styles.MessagingStyleInformation: java.lang.String conversationTitle
kotlinx.coroutines.android.AndroidDispatcherFactory: java.lang.String hintOnError()
com.mapbox.mapboxsdk.style.types.FormattedSection: FormattedSection(java.lang.String,java.lang.String[])
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails from(java.util.Map)
androidx.window.embedding.SplitController: java.util.Set getSplitRules()
io.flutter.plugins.GeneratedPluginRegistrant
com.google.gson.JsonObject: void addProperty(java.lang.String,java.lang.Character)
com.mapbox.mapboxsdk.location.LocationIndicatorLayer: void nativeSetBearingImageSizeTransition(long,long)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)
androidx.window.layout.SidecarCompat: androidx.window.layout.WindowLayoutInfo getWindowLayoutInfo(android.app.Activity)
androidx.window.layout.WindowInfoTrackerImpl: kotlinx.coroutines.flow.Flow windowLayoutInfo(android.app.Activity)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LED_COLOR_BLUE
androidx.window.R$styleable: int[] SplitPairRule
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void saveScheduledNotifications(android.content.Context,java.util.ArrayList)
com.mapbox.mapboxsdk.maps.NativeMapView: java.lang.String nativeGetStyleJson()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String title
androidx.recyclerview.widget.GridLayoutManager: GridLayoutManager(android.content.Context,android.util.AttributeSet,int,int)
androidx.appcompat.widget.AppCompatSpinner: int getDropDownWidth()
com.mapbox.mapboxsdk.style.sources.Source: Source(long)
com.mapbox.mapboxsdk.style.sources.CustomGeometrySource: void finalize()
com.google.android.material.button.MaterialButton: android.content.res.ColorStateList getBackgroundTintList()
com.mapbox.mapboxsdk.style.types.Formatted: com.mapbox.mapboxsdk.style.types.FormattedSection[] formattedSections
com.mapbox.mapboxsdk.style.layers.HillshadeLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetHillshadeExaggerationTransition()
com.mapbox.mapboxsdk.style.sources.GeoJsonSource: void initialize(java.lang.String,java.lang.Object)
com.mapbox.geojson.BoundingBox: com.mapbox.geojson.Point southwest()
kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable reflected
com.mapbox.geojson.MultiLineString: java.lang.String toJson()
com.mapbox.mapboxsdk.style.layers.RasterLayer
androidx.appcompat.widget.LinearLayoutCompat: void setWeightSum(float)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String HTML_FORMAT_SUMMARY_TEXT
com.mapbox.geojson.LineString: boolean equals(java.lang.Object)
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: androidx.window.sidecar.SidecarDeviceState lastDeviceState
com.mapbox.mapboxsdk.style.types.Formatted: com.mapbox.mapboxsdk.style.types.FormattedSection[] getFormattedSections()
com.mapbox.mapboxsdk.maps.renderer.MapRenderer: long nativePtr
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: void onConfigurationChanged(android.content.res.Configuration)
androidx.window.embedding.SplitController: void unregisterRule(androidx.window.embedding.EmbeddingRule)
androidx.window.layout.WindowMetricsCalculator$Companion: WindowMetricsCalculator$Companion()
com.mapbox.geojson.FeatureCollection: java.util.List features
androidx.appcompat.widget.AppCompatEditText: void setSupportBackgroundTintList(android.content.res.ColorStateList)
androidx.core.content.ContextCompat$Api21Impl: java.io.File getNoBackupFilesDir(android.content.Context)
androidx.appcompat.widget.AppCompatTextView: void setPrecomputedText(androidx.core.text.PrecomputedTextCompat)
com.mapbox.mapboxsdk.style.layers.Layer: java.lang.String nativeGetSourceLayer()
com.mapbox.mapboxsdk.style.layers.HillshadeLayer: java.lang.Object nativeGetHillshadeHighlightColor()
androidx.window.embedding.SplitPairFilter: java.lang.String toString()
com.google.android.gms.maps.model.LatLngBounds: android.os.Parcelable$Creator CREATOR
com.google.firebase.messaging.RemoteMessage: android.os.Parcelable$Creator CREATOR
com.mapbox.mapboxsdk.http.NativeHttpRequest: void executeLocalRequest(java.lang.String)
androidx.appcompat.widget.ActionBarContextView: void setSubtitle(java.lang.CharSequence)
com.mapbox.mapboxsdk.offline.OfflineRegion$OfflineRegionInvalidateCallback
org.threeten.bp.LocalTime
androidx.coordinatorlayout.widget.CoordinatorLayout
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeSetLatLngBounds(com.mapbox.mapboxsdk.geometry.LatLngBounds)
com.google.android.material.floatingactionbutton.FloatingActionButton: void setCompatPressedTranslationZ(float)
com.mapbox.mapboxsdk.style.layers.LineLayer: void nativeSetLineTranslateTransition(long,long)
androidx.window.layout.SidecarAdapter: androidx.window.layout.WindowLayoutInfo translate(androidx.window.sidecar.SidecarWindowLayoutInfo,androidx.window.sidecar.SidecarDeviceState)
kotlin.jvm.internal.FunctionReference: int flags
androidx.recyclerview.widget.RecyclerView: int getMinFlingVelocity()
org.threeten.bp.chrono.MinguoEra
androidx.appcompat.widget.Toolbar: void setTitleMarginEnd(int)
com.google.gson.JsonArray: void add(java.lang.Number)
com.mapbox.geojson.MultiPoint: int hashCode()
com.mapbox.mapboxsdk.snapshotter.MapSnapshotter: void onSnapshotReady(com.mapbox.mapboxsdk.snapshotter.MapSnapshot)
com.mapbox.mapboxsdk.style.layers.FillLayer
com.google.android.material.internal.NavigationMenuItemView: void setNeedsEmptyIcon(boolean)
androidx.appcompat.widget.SearchView$SearchAutoComplete: int getSearchViewTextMinWidthDp()
com.google.android.material.internal.NavigationMenuItemView: void setActionView(android.view.View)
androidx.window.core.Version$bigInteger$2
androidx.activity.ImmLeaksCleaner
com.google.android.material.floatingactionbutton.FloatingActionButton: com.google.android.material.animation.MotionSpec getHideMotionSpec()
androidx.appcompat.widget.AppCompatButton: void setAutoSizeTextTypeWithDefaults(int)
androidx.lifecycle.ViewModel: ViewModel()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setSmallIcon(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
androidx.window.embedding.ActivityFilter: android.content.ComponentName componentName
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onDetachedFromActivityForConfigChanges()
org.threeten.bp.zone.Ser
androidx.media.AudioAttributesImplApi21: AudioAttributesImplApi21()
com.mapbox.geojson.ListOfListOfPointCoordinatesTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
androidx.window.embedding.EmbeddingBackend: void registerRule(androidx.window.embedding.EmbeddingRule)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LARGE_ICON
com.mapbox.geojson.shifter.CoordinateShifterManager$1: java.util.List shiftLonLat(double,double)
com.mapbox.mapboxsdk.maps.renderer.MapRenderer: void queueEvent(com.mapbox.mapboxsdk.maps.renderer.MapRendererRunnable)
androidx.core.content.FileProvider: FileProvider()
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetIconTranslate()
com.mapbox.mapboxsdk.net.NativeConnectivityListener
com.mapbox.mapboxsdk.geometry.LatLng: double latitude
androidx.appcompat.widget.Toolbar: void setContentInsetStartWithNavigation(int)
com.mapbox.geojson.GeometryCollection: boolean equals(java.lang.Object)
com.dexterous.flutterlocalnotifications.models.BitmapSource: com.dexterous.flutterlocalnotifications.models.BitmapSource DrawableResource
androidx.recyclerview.widget.RecyclerView: void setAccessibilityDelegateCompat(androidx.recyclerview.widget.RecyclerViewAccessibilityDelegate)
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails
androidx.appcompat.widget.ActionBarContextView: void setContentHeight(int)
com.google.android.gms.location.LocationAvailability: android.os.Parcelable$Creator CREATOR
com.mapbox.geojson.Feature: com.mapbox.geojson.BoundingBox bbox
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
com.mapbox.mapboxsdk.log.Logger: int logLevel
com.mapbox.mapboxsdk.style.layers.BackgroundLayer: void initialize(java.lang.String)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readBigPictureStyleInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map,com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation)
com.mapbox.geojson.FeatureCollection: com.google.gson.TypeAdapter typeAdapter(com.google.gson.Gson)
kotlinx.coroutines.android.AndroidExceptionPreHandler: AndroidExceptionPreHandler()
io.flutter.embedding.engine.FlutterJNI: void removeEngineLifecycleListener(io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void cancel(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Waiter waiters
com.mapbox.mapboxsdk.offline.OfflineTilePyramidRegionDefinition: com.mapbox.mapboxsdk.geometry.LatLngBounds bounds
com.mapbox.geojson.BoundingBox: com.mapbox.geojson.BoundingBox fromCoordinates(double,double,double,double)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_ACTIVE_NOTIFICATIONS_ERROR_CODE
androidx.window.layout.HardwareFoldingFeature$Type: androidx.window.layout.HardwareFoldingFeature$Type HINGE
com.mapbox.mapboxsdk.style.layers.FillLayer: java.lang.Object nativeGetFillAntialias()
androidx.window.embedding.SplitPairRule: java.util.Set getFilters()
androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type: androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type[] values()
io.flutter.embedding.android.TransparencyMode: io.flutter.embedding.android.TransparencyMode[] values()
androidx.appcompat.widget.Toolbar: void setNavigationOnClickListener(android.view.View$OnClickListener)
com.mapbox.geojson.ListofListofListOfPointCoordinatesTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.util.List)
io.flutter.embedding.android.FlutterView$ZeroSides: io.flutter.embedding.android.FlutterView$ZeroSides[] values()
com.mapbox.mapboxsdk.style.layers.CircleLayer: java.lang.Object nativeGetCircleStrokeColor()
com.mapbox.mapboxsdk.offline.OfflineRegion$OfflineRegionStatusCallback: void onError(java.lang.String)
com.mapbox.geojson.ListOfPointCoordinatesTypeAdapter: ListOfPointCoordinatesTypeAdapter()
com.mapbox.mapboxsdk.offline.OfflineRegion: void deleteOfflineRegion(com.mapbox.mapboxsdk.offline.OfflineRegion$OfflineRegionDeleteCallback)
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeSetVisibleCoordinateBounds(com.mapbox.mapboxsdk.geometry.LatLng[],android.graphics.RectF,double,long)
org.threeten.bp.zone.ZoneOffsetTransition: java.lang.Object writeReplace()
com.google.android.material.floatingactionbutton.FloatingActionButton: void setBackgroundDrawable(android.graphics.drawable.Drawable)
com.mapbox.geojson.Feature: com.google.gson.JsonObject properties
androidx.window.embedding.SplitRuleParser: androidx.window.embedding.ActivityFilter parseActivityFilter(android.content.Context,android.content.res.XmlResourceParser)
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency: com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency valueOf(java.lang.String)
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: WindowInfoTrackerImpl$windowLayoutInfo$1(androidx.window.layout.WindowInfoTrackerImpl,android.app.Activity,kotlin.coroutines.Continuation)
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeSetStyleJson(java.lang.String)
com.google.gson.JsonArray: void add(java.lang.String)
androidx.window.embedding.SplitController$Companion: androidx.window.embedding.SplitController getInstance()
androidx.appcompat.widget.AppCompatImageView: android.content.res.ColorStateList getSupportImageTintList()
androidx.window.embedding.ActivityRule: java.util.Set getFilters()
androidx.appcompat.view.menu.ExpandedMenuView: ExpandedMenuView(android.content.Context,android.util.AttributeSet)
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeEaseTo(double,double,double,long,double,double,double[],boolean)
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeResetPosition()
androidx.window.embedding.ActivityFilter: android.content.ComponentName getComponentName()
com.google.gson.JsonArray: java.lang.Number getAsNumber()
android.support.v4.app.RemoteActionCompatParcelizer: RemoteActionCompatParcelizer()
com.mapbox.mapboxsdk.style.layers.LineLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetLineGapWidthTransition()
com.mapbox.geojson.gson.GeoJsonAdapterFactory$GeoJsonAdapterFactoryIml
com.mapbox.geojson.gson.BoundingBoxTypeAdapter
androidx.window.R$attr: int splitMinSmallestWidth
com.mapbox.geojson.MultiPoint: com.mapbox.geojson.MultiPoint fromLngLats(double[][])
androidx.window.embedding.EmbeddingCompat: EmbeddingCompat()
androidx.window.layout.DisplayCompatHelperApi28: androidx.window.layout.DisplayCompatHelperApi28 INSTANCE
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.BitmapSource largeIconBitmapSource
com.mapbox.mapboxsdk.style.layers.LineLayer: java.lang.Object nativeGetLineGradient()
androidx.appcompat.app.AppCompatViewInflater: void checkOnClickListener(android.view.View,android.util.AttributeSet)
androidx.appcompat.widget.ActionBarOverlayLayout: void setWindowTitle(java.lang.CharSequence)
androidx.core.content.ContextCompat$Api16Impl: void startActivities(android.content.Context,android.content.Intent[],android.os.Bundle)
com.mapbox.geojson.ListOfListOfPointCoordinatesTypeAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
com.mapbox.geojson.Polygon: java.lang.String toJson()
kotlinx.coroutines.JobSupport: java.lang.Object _parentHandle
com.mapbox.mapboxsdk.style.sources.ImageSource: void nativeSetImage(android.graphics.Bitmap)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String IMPORTANT
com.google.gson.TypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: io.flutter.plugin.common.MethodChannel channel
androidx.appcompat.app.AlertController$RecycleListView: AlertController$RecycleListView(android.content.Context,android.util.AttributeSet)
androidx.appcompat.widget.AppCompatImageButton: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
kotlinx.coroutines.NodeList
kotlinx.coroutines.JobSupport$Finishing: java.lang.Object _exceptionsHolder
kotlin.jvm.internal.Lambda: int arity
androidx.window.layout.WindowMetricsCalculatorCompat: android.view.DisplayCutout getCutoutForDisplay(android.view.Display)
com.dexterous.flutterlocalnotifications.models.SoundSource: com.dexterous.flutterlocalnotifications.models.SoundSource[] $VALUES
androidx.core.content.ContextCompat$Api28Impl: java.util.concurrent.Executor getMainExecutor(android.content.Context)
com.google.android.material.floatingactionbutton.FloatingActionButton: android.content.res.ColorStateList getRippleColorStateList()
androidx.appcompat.widget.SearchView: SearchView(android.content.Context,android.util.AttributeSet)
androidx.coordinatorlayout.widget.CoordinatorLayout: void setStatusBarBackground(android.graphics.drawable.Drawable)
androidx.window.embedding.ExtensionEmbeddingBackend: void unregisterSplitListenerForActivity(androidx.core.util.Consumer)
androidx.window.layout.ActivityCompatHelperApi24: boolean isInMultiWindowMode(android.app.Activity)
androidx.window.embedding.ExtensionEmbeddingBackend$Companion: androidx.window.embedding.EmbeddingInterfaceCompat initAndVerifyEmbeddingExtension()
com.google.android.datatransport.runtime.backends.BackendResponse$Status: com.google.android.datatransport.runtime.backends.BackendResponse$Status valueOf(java.lang.String)
androidx.media.AudioAttributesCompat
androidx.core.app.RemoteActionCompatParcelizer
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetTextMaxWidth()
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeTakeSnapshot()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String TEXT
androidx.appcompat.widget.LinearLayoutCompat: void setHorizontalGravity(int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void areNotificationsEnabled(io.flutter.plugin.common.MethodChannel$Result)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String HTML_FORMAT_TITLE
androidx.recyclerview.widget.RecyclerView$SavedState: android.os.Parcelable$Creator CREATOR
androidx.cardview.widget.CardView: float getCardElevation()
androidx.window.R$styleable: int SplitPlaceholderRule_splitRatio
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setFillColor(int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.mapbox.mapboxsdk.maps.NativeMapView: boolean onCanRemoveUnusedStyleImage(java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState valueOf(java.lang.String)
com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory: java.util.Map subtypeToLabel
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeSetBearingXY(double,double,double,long)
com.mapbox.mapboxsdk.style.layers.RasterLayer: void nativeSetRasterBrightnessMaxTransition(long,long)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: void finalize()
androidx.window.layout.FoldingFeature$OcclusionType: androidx.window.layout.FoldingFeature$OcclusionType NONE
androidx.window.embedding.SplitRule: boolean checkParentMetrics(android.view.WindowMetrics)
org.threeten.bp.format.TextStyle: org.threeten.bp.format.TextStyle valueOf(java.lang.String)
androidx.window.R$styleable: int[] ActivityFilter
com.mapbox.mapboxsdk.snapshotter.MapSnapshotter
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetTextPitchAlignment()
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.ExtensionEmbeddingBackend globalInstance
androidx.recyclerview.widget.RecyclerView: int getItemDecorationCount()
com.mapbox.geojson.Feature: void addStringProperty(java.lang.String,java.lang.String)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction channelAction
com.mapbox.mapboxsdk.style.layers.LineLayer: java.lang.Object nativeGetLineWidth()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean colorized
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.SingleViewPresentation$PresentationState state
com.mapbox.mapboxsdk.style.layers.Layer: java.lang.Object nativeGetVisibility()
androidx.appcompat.widget.AppCompatSpinner: void setPopupBackgroundDrawable(android.graphics.drawable.Drawable)
io.flutter.view.AccessibilityViewEmbedder: int nextFlutterId
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String AUTO_CANCEL
com.mapbox.geojson.constants.GeoJsonConstants: GeoJsonConstants()
androidx.window.layout.SidecarWindowBackend$Companion: androidx.window.layout.SidecarWindowBackend getInstance(android.content.Context)
com.google.android.material.internal.CheckableImageButton: void setChecked(boolean)
org.threeten.bp.temporal.IsoFields$Unit: org.threeten.bp.temporal.IsoFields$Unit valueOf(java.lang.String)
com.google.android.material.bottomappbar.BottomAppBar: void setTitle(java.lang.CharSequence)
com.dexterous.flutterlocalnotifications.models.PersonDetails: java.lang.Boolean important
androidx.window.layout.WindowInfoTracker$Companion: boolean DEBUG
com.google.android.material.button.MaterialButton: void setIconSize(int)
androidx.appcompat.view.menu.ListMenuItemView
com.mapbox.mapboxsdk.annotations.Polyline
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float getScaleY()
androidx.appcompat.view.menu.ExpandedMenuView: int getWindowAnimations()
com.mapbox.mapboxsdk.snapshotter.MapSnapshotter: void setCameraPosition(com.mapbox.mapboxsdk.camera.CameraPosition)
androidx.fragment.app.Fragment$2
com.mapbox.geojson.utils.PolylineUtils: double getSqDist(com.mapbox.geojson.Point,com.mapbox.geojson.Point)
kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow[] values()
com.google.android.material.internal.NavigationMenuItemView: void setCheckable(boolean)
com.google.common.util.concurrent.AbstractFuture: java.lang.Object value
androidx.media.AudioAttributesCompatParcelizer
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: androidx.core.util.Consumer callback
androidx.window.embedding.ActivityStack: java.lang.String toString()
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: NotificationChannelGroupDetails()
com.mapbox.geojson.MultiLineString: java.util.List lineStrings()
com.mapbox.mapboxsdk.style.light.Light: void nativeSetIntensityTransition(long,long)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetIconPitchAlignment()
io.flutter.plugins.firebase.core.FlutterFirebasePlugin
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: java.util.Set registeredListeners
io.flutter.embedding.android.FlutterSurfaceView
com.google.android.gms.maps.model.Cap: android.os.Parcelable$Creator CREATOR
androidx.window.embedding.SplitPlaceholderRule: SplitPlaceholderRule(java.util.Set,android.content.Intent,int,int,float,int)
androidx.savedstate.Recreator
com.mapbox.geojson.Polygon: java.util.List inner()
kotlinx.coroutines.internal.LockFreeTaskQueue
androidx.window.embedding.EmbeddingTranslatingCallback
com.mapbox.mapboxsdk.style.light.Light: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetPositionTransition()
com.mapbox.geojson.BoundingBox: double east()
com.mapbox.mapboxsdk.offline.OfflineRegion$OfflineRegionUpdateMetadataCallback: void onError(java.lang.String)
androidx.appcompat.widget.ActionBarContextView: java.lang.CharSequence getTitle()
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeSetPrefetchZoomDelta(int)
com.mapbox.mapboxsdk.style.layers.Layer: void nativeSetSourceLayer(java.lang.String)
androidx.appcompat.widget.FitWindowsLinearLayout: void setOnFitSystemWindowsListener(androidx.appcompat.widget.FitWindowsViewGroup$OnFitSystemWindowsListener)
kotlinx.coroutines.JobSupport$Finishing: java.lang.Object _rootCause
io.flutter.plugin.platform.SingleViewPresentation: void onCreate(android.os.Bundle)
com.mapbox.geojson.MultiPoint$GsonTypeAdapter: com.mapbox.geojson.CoordinateContainer createCoordinateContainer(java.lang.String,com.mapbox.geojson.BoundingBox,java.lang.Object)
com.google.firebase.datatransport.TransportRegistrar: java.util.List getComponents()
com.google.gson.JsonArray: short getAsShort()
com.mapbox.mapboxsdk.maps.NativeMapView: int nativeGetPrefetchZoomDelta()
com.mapbox.mapboxsdk.annotations.Marker
com.mapbox.mapboxsdk.style.layers.FillLayer: void finalize()
com.mapbox.geojson.ListOfPointCoordinatesTypeAdapter
com.mapbox.mapboxsdk.location.LocationIndicatorLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetAccuracyRadiusBorderColorTransition()
com.mapbox.mapboxsdk.style.layers.HillshadeLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetHillshadeAccentColorTransition()
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.Integer ledColor
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetTextField()
androidx.window.layout.ExtensionWindowLayoutInfoBackend: java.util.Map listenerToActivity
kotlin.jvm.internal.FunctionReference: int getArity()
androidx.recyclerview.widget.RecyclerView: androidx.recyclerview.widget.RecyclerView$RecycledViewPool getRecycledViewPool()
com.mapbox.mapboxsdk.snapshotter.MapSnapshot: long nativePtr
org.threeten.bp.LocalDate: java.lang.Object readResolve()
androidx.window.embedding.EmbeddingBackend: void setSplitRules(java.util.Set)
io.flutter.embedding.engine.FlutterJNI: void nativeNotifyLowMemoryWarning(long)
androidx.window.core.Version: androidx.window.core.Version VERSION_0_1
androidx.appcompat.widget.ActionBarContainer: void setVisibility(int)
com.mapbox.mapboxsdk.http.NativeHttpRequest: java.util.concurrent.locks.ReentrantLock lock
androidx.appcompat.widget.SearchView: void setOnQueryTextFocusChangeListener(android.view.View$OnFocusChangeListener)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsetsAnimation$Callback getAnimationCallback()
androidx.window.layout.SidecarCompat$DistinctElementCallback: SidecarCompat$DistinctElementCallback(androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: kotlinx.coroutines.flow.Flow $flow
kotlin.jvm.internal.CallableReference: java.lang.Object receiver
com.google.android.material.internal.ForegroundLinearLayout: int getForegroundGravity()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: FlutterLocalNotificationsPlugin()
androidx.window.embedding.ActivityRule: java.util.Set filters
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void scheduleNextRepeatingNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
com.mapbox.mapboxsdk.http.NativeHttpRequest: void access$200(com.mapbox.mapboxsdk.http.NativeHttpRequest,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[])
androidx.window.layout.HardwareFoldingFeature: int hashCode()
kotlinx.coroutines.channels.AbstractChannel
androidx.cardview.widget.CardView: int getContentPaddingRight()
org.threeten.bp.chrono.HijrahEra: org.threeten.bp.chrono.HijrahEra[] values()
com.dexterous.flutterlocalnotifications.models.BitmapSource: com.dexterous.flutterlocalnotifications.models.BitmapSource FilePath
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void applyGrouping(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
com.mapbox.mapboxsdk.storage.FileSource: java.lang.String getApiKey()
com.mapbox.mapboxsdk.snapshotter.MapSnapshotter: void onStyleImageMissing(java.lang.String)
com.google.android.material.internal.NavigationMenuView
com.mapbox.geojson.GeoJson: java.lang.String toJson()
com.google.android.material.transformation.TransformationChildLayout
org.threeten.bp.Instant
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection[] values()
androidx.appcompat.widget.Toolbar: void setLogoDescription(int)
com.mapbox.mapboxsdk.style.sources.Source: java.lang.Integer getMaxOverscaleFactorForParentTiles()
com.mapbox.mapboxsdk.style.sources.CustomGeometrySource: void releaseThreads()
androidx.appcompat.widget.Toolbar: void setSubtitleTextColor(int)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String GROUP_ALERT_BEHAVIOR
com.google.gson.JsonElement: com.google.gson.JsonArray getAsJsonArray()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsets lastWindowInsets
androidx.window.embedding.SplitInfo: androidx.window.embedding.ActivityStack getSecondaryActivityStack()
androidx.appcompat.widget.LinearLayoutCompat: float getWeightSum()
androidx.appcompat.widget.AppCompatSpinner: android.content.Context getPopupContext()
com.mapbox.mapboxsdk.style.types.FormattedSection: java.lang.Number getFontScale()
android.support.v4.media.RatingCompat: android.os.Parcelable$Creator CREATOR
androidx.appcompat.widget.LinearLayoutCompat: int getBaseline()
androidx.appcompat.widget.ActionBarOverlayLayout: java.lang.CharSequence getTitle()
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String CHANNEL_ACTION
com.mapbox.mapboxsdk.offline.OfflineGeometryRegionDefinition: android.os.Parcelable$Creator CREATOR
androidx.appcompat.widget.AppCompatButton: void setSupportAllCaps(boolean)
com.mapbox.mapboxsdk.style.sources.CustomGeometrySource: void nativeInvalidateBounds(com.mapbox.mapboxsdk.geometry.LatLngBounds)
com.mapbox.mapboxsdk.text.LocalGlyphRasterizer: android.graphics.Bitmap drawGlyphBitmap(java.lang.String,boolean,char)
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeDestroy()
com.mapbox.mapboxsdk.style.layers.SymbolLayer: void nativeSetTextHaloWidthTransition(long,long)
com.mapbox.mapboxsdk.geometry.ProjectedMeters: ProjectedMeters(double,double)
com.google.android.gms.dynamite.DynamiteModule$DynamiteLoaderClassLoader: DynamiteModule$DynamiteLoaderClassLoader()
androidx.appcompat.widget.SearchView: void setIconifiedByDefault(boolean)
com.google.android.material.bottomappbar.BottomAppBar$SavedState: android.os.Parcelable$Creator CREATOR
io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)
androidx.window.core.Bounds: int getHeight()
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeOnLowMemory()
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: androidx.window.layout.WindowInfoTracker tracker
com.mapbox.mapboxsdk.geometry.LatLng: LatLng(double,double)
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation: java.lang.Boolean htmlFormatBigText
com.google.firebase.messaging.FirebaseMessagingRegistrar: FirebaseMessagingRegistrar()
com.mapbox.mapboxsdk.Mapbox: com.mapbox.mapboxsdk.Mapbox INSTANCE
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int workerCtl
com.google.android.material.circularreveal.cardview.CircularRevealCardView: com.google.android.material.circularreveal.CircularRevealWidget$RevealInfo getRevealInfo()
io.flutter.plugins.GeneratedPluginRegistrant: java.lang.String TAG
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: float getStrokeAlpha()
com.dexterous.flutterlocalnotifications.RepeatInterval: com.dexterous.flutterlocalnotifications.RepeatInterval EveryMinute
com.google.gson.FieldNamingPolicy: com.google.gson.FieldNamingPolicy[] values()
com.mapbox.geojson.Feature: void addNumberProperty(java.lang.String,java.lang.Number)
org.threeten.bp.Month: org.threeten.bp.Month valueOf(java.lang.String)
androidx.window.embedding.ActivityStack: boolean isEmpty
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_ACTIVE_NOTIFICATIONS_METHOD
com.dexterous.flutterlocalnotifications.RepeatInterval: com.dexterous.flutterlocalnotifications.RepeatInterval[] $VALUES
androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable
com.mapbox.mapboxsdk.storage.FileSource: void deactivate()
com.mapbox.geojson.CoordinateContainer
com.mapbox.mapboxsdk.style.layers.LineLayer: void nativeSetLineBlurTransition(long,long)
com.mapbox.mapboxsdk.style.sources.Source: Source()
com.mapbox.mapboxsdk.Mapbox: void setApiKey(java.lang.String)
androidx.recyclerview.widget.RecyclerView: androidx.recyclerview.widget.RecyclerView$OnFlingListener getOnFlingListener()
com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory$1: com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory this$0
androidx.appcompat.widget.ContentFrameLayout: android.util.TypedValue getMinWidthMinor()
androidx.window.R$styleable: int SplitPlaceholderRule_splitLayoutDirection
kotlin.jvm.internal.Lambda: Lambda(int)
org.threeten.bp.LocalTime: java.lang.Object writeReplace()
io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action)
com.dexterous.flutterlocalnotifications.models.MessageDetails: java.lang.String dataUri
com.mapbox.geojson.Feature: com.mapbox.geojson.Geometry geometry
androidx.window.R$attr: int splitMinWidth
androidx.window.R$attr: int secondaryActivityAction
io.flutter.embedding.engine.FlutterJNI: void ensureNotAttachedToNative()
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.ExtensionEmbeddingBackend$Companion Companion
androidx.appcompat.widget.AppCompatButton
androidx.appcompat.widget.LinearLayoutCompat: void setBaselineAlignedChildIndex(int)
com.mapbox.geojson.MultiPolygon: com.mapbox.geojson.MultiPolygon fromLngLats(java.util.List,com.mapbox.geojson.BoundingBox)
androidx.window.embedding.SplitPairFilter: boolean matchesActivityIntentPair(android.app.Activity,android.content.Intent)
org.threeten.bp.ZonedDateTime: java.lang.Object writeReplace()
android.support.v4.media.AudioAttributesImplBaseParcelizer: void write(androidx.media.AudioAttributesImplBase,androidx.versionedparcelable.VersionedParcel)
androidx.appcompat.widget.SearchView: int getImeOptions()
com.mapbox.mapboxsdk.http.NativeHttpRequest: com.mapbox.mapboxsdk.http.HttpRequest httpRequest
com.mapbox.geojson.gson.BoundingBoxTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
androidx.appcompat.view.menu.ListMenuItemView: android.view.LayoutInflater getInflater()
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_PAUSE
com.mapbox.mapboxsdk.style.light.Light: java.lang.String nativeGetColor()
androidx.window.embedding.SplitPlaceholderRule
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState[] values()
com.google.android.gms.common.internal.zav: android.os.Parcelable$Creator CREATOR
com.mapbox.mapboxsdk.annotations.Polygon: int strokeColor
io.flutter.embedding.android.FlutterView$ZeroSides: io.flutter.embedding.android.FlutterView$ZeroSides valueOf(java.lang.String)
com.mapbox.mapboxsdk.style.sources.ImageSource: ImageSource(long)
com.mapbox.mapboxsdk.location.LocationIndicatorLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetLocationTransition()
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.FoldingFeature$Orientation getOrientation()
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeCancelTransitions()
androidx.window.R$attr: int activityAction
com.google.android.material.floatingactionbutton.FloatingActionButton: void setExpandedComponentIdHint(int)
com.mapbox.geojson.Polygon: java.util.List coordinates
com.google.android.gms.dynamite.DynamiteModule$DynamiteLoaderClassLoader: java.lang.ClassLoader sClassLoader
io.flutter.plugins.googlemaps.GoogleMapController
com.dexterous.flutterlocalnotifications.models.MessageDetails: java.lang.String text
com.mapbox.mapboxsdk.offline.OfflineManager: void putResourceWithUrl(java.lang.String,byte[],long,long,java.lang.String,boolean)
com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)
com.mapbox.mapboxsdk.style.layers.LineLayer: void nativeSetLineOpacityTransition(long,long)
androidx.appcompat.widget.FitWindowsFrameLayout: FitWindowsFrameLayout(android.content.Context,android.util.AttributeSet)
io.flutter.embedding.engine.FlutterJNI: void dispatchEmptyPlatformMessage(java.lang.String,int)
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: void registerPlugin(java.lang.String,io.flutter.plugins.firebase.core.FlutterFirebasePlugin)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LED_COLOR_RED
androidx.window.core.Version: androidx.window.core.Version access$getUNKNOWN$cp()
io.flutter.embedding.engine.FlutterJNI: void ensureAttachedToNative()
com.mapbox.mapboxsdk.maps.NativeMapView: void onDidFinishRenderingFrame(boolean)
androidx.core.widget.NestedScrollView: float getBottomFadingEdgeStrength()
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation
com.mapbox.geojson.gson.GeoJsonAdapterFactory: com.google.gson.TypeAdapterFactory create()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ENABLE_VIBRATION
androidx.window.layout.FoldingFeature$State$Companion: FoldingFeature$State$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.concurrent.locks.ReentrantLock globalLock
com.google.android.gms.maps.model.LatLng: android.os.Parcelable$Creator CREATOR
android.support.v4.media.session.MediaSessionCompat$Token
androidx.window.layout.SidecarAdapter$Companion: void setSidecarDisplayFeatures(androidx.window.sidecar.SidecarWindowLayoutInfo,java.util.List)
com.mapbox.mapboxsdk.style.layers.LineLayer
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CANCEL_TAG
androidx.window.layout.WindowMetrics: android.graphics.Rect getBounds()
com.mapbox.mapboxsdk.geometry.LatLngBounds: android.os.Parcelable$Creator CREATOR
com.mapbox.mapboxsdk.maps.NativeMapView: long[] nativeQueryShapeAnnotations(android.graphics.RectF)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String STYLE_INFORMATION
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: void install()
com.mapbox.mapboxsdk.offline.OfflineManager: void finalize()
com.mapbox.mapboxsdk.maps.NativeMapView: long[] nativeAddMarkers(com.mapbox.mapboxsdk.annotations.Marker[])
com.google.android.material.floatingactionbutton.FloatingActionButton$Behavior
androidx.recyclerview.widget.RecyclerView: void setHasFixedSize(boolean)
androidx.window.layout.SidecarWindowBackend: void access$setGlobalInstance$cp(androidx.window.layout.SidecarWindowBackend)
com.mapbox.geojson.Feature: com.mapbox.geojson.Feature fromGeometry(com.mapbox.geojson.Geometry,com.google.gson.JsonObject,java.lang.String,com.mapbox.geojson.BoundingBox)
com.mapbox.mapboxsdk.style.layers.LineLayer: java.lang.Object nativeGetLineBlur()
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents valueOf(java.lang.String)
org.threeten.bp.chrono.JapaneseDate: java.lang.Object writeReplace()
com.dexterous.flutterlocalnotifications.RepeatInterval: com.dexterous.flutterlocalnotifications.RepeatInterval[] values()
com.mapbox.mapboxsdk.style.light.Position: float radialCoordinate
org.threeten.bp.temporal.IsoFields$Field: org.threeten.bp.temporal.IsoFields$Field[] values()
com.dexterous.flutterlocalnotifications.models.MessageDetails: MessageDetails(java.lang.String,java.lang.Long,com.dexterous.flutterlocalnotifications.models.PersonDetails,java.lang.String,java.lang.String)
com.mapbox.mapboxsdk.style.layers.CircleLayer: void nativeSetCircleBlurTransition(long,long)
com.google.gson.JsonPrimitive: JsonPrimitive(java.lang.String)
androidx.appcompat.widget.Toolbar: int getTitleMarginEnd()
org.threeten.bp.chrono.HijrahDate: java.lang.Object writeReplace()
com.mapbox.geojson.Point: boolean equals(java.lang.Object)
androidx.window.core.Bounds: boolean equals(java.lang.Object)
com.google.android.datatransport.runtime.backends.BackendResponse$Status: com.google.android.datatransport.runtime.backends.BackendResponse$Status[] values()
com.mapbox.mapboxsdk.style.layers.CustomLayer: void finalize()
com.mapbox.mapboxsdk.util.TileServerOptions: java.lang.String styleDomainName
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation: java.lang.String summaryText
androidx.window.embedding.ActivityFilter: java.lang.String intentAction
com.mapbox.mapboxsdk.maps.renderer.MapRenderer: void updateFps()
com.google.gson.JsonArray: java.lang.String getAsString()
com.mapbox.mapboxsdk.offline.OfflineRegion: void initialize(long,com.mapbox.mapboxsdk.storage.FileSource)
androidx.activity.ComponentActivity$2
io.flutter.embedding.engine.FlutterJNI: void markTextureFrameAvailable(long)
io.flutter.embedding.engine.FlutterJNI: void onDisplayOverlaySurface(int,int,int,int,int)
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeAddLayerAbove(long,java.lang.String)
kotlin.jvm.internal.CallableReference: java.lang.Object NO_RECEIVER
io.flutter.embedding.android.FlutterSplashView$SavedState
androidx.appcompat.widget.AppCompatAutoCompleteTextView: void setBackgroundResource(int)
androidx.appcompat.app.AppCompatActivity: void setContentView(android.view.View)
okhttp3.TlsVersion: okhttp3.TlsVersion valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.models.Time: java.lang.String MINUTE
androidx.lifecycle.ReportFragment$LifecycleCallbacks
androidx.window.embedding.SplitRule: int getMinSmallestWidth()
com.mapbox.mapboxsdk.style.layers.BackgroundLayer: BackgroundLayer(long)
androidx.appcompat.widget.AppCompatTextView: void setFirstBaselineToTopHeight(int)
com.mapbox.geojson.Polygon$GsonTypeAdapter: com.mapbox.geojson.Polygon read(com.google.gson.stream.JsonReader)
com.mapbox.mapboxsdk.style.layers.RasterLayer: java.lang.Object nativeGetRasterFadeDuration()
androidx.window.R$styleable
org.threeten.bp.chrono.ThaiBuddhistChronology: java.lang.Object readResolve()
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: WindowInfoTrackerCallbackAdapter(androidx.window.layout.WindowInfoTracker)
androidx.window.layout.DisplayCompatHelperApi28
com.google.gson.TypeAdapter: TypeAdapter()
com.mapbox.mapboxsdk.style.layers.CircleLayer: void nativeSetCircleColorTransition(long,long)
io.flutter.embedding.android.DrawableSplashScreen$DrawableSplashScreenView
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String COLOR_ALPHA
kotlinx.coroutines.scheduling.CoroutineScheduler
androidx.appcompat.widget.ContentFrameLayout
com.mapbox.mapboxsdk.style.layers.HillshadeLayer: java.lang.Object nativeGetHillshadeAccentColor()
androidx.window.layout.SidecarCompat: void setExtensionCallback(androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface)
com.mapbox.geojson.shifter.CoordinateShifterManager$1: java.util.List unshiftPoint(java.util.List)
androidx.recyclerview.widget.RecyclerView: int getMaxFlingVelocity()
com.mapbox.mapboxsdk.style.layers.HeatmapLayer: void nativeSetHeatmapRadiusTransition(long,long)
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeSetReachability(boolean)
com.google.gson.FieldNamingPolicy: com.google.gson.FieldNamingPolicy valueOf(java.lang.String)
com.mapbox.geojson.MultiLineString: com.google.gson.TypeAdapter typeAdapter(com.google.gson.Gson)
androidx.window.layout.FoldingFeature$Orientation$Companion
com.mapbox.mapboxsdk.offline.OfflineRegion$OfflineRegionStatusCallback: void onStatus(com.mapbox.mapboxsdk.offline.OfflineRegionStatus)
com.mapbox.mapboxsdk.style.layers.LineLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetLineDasharrayTransition()
androidx.appcompat.widget.ViewStubCompat: void setInflatedId(int)
androidx.constraintlayout.widget.ConstraintLayout: void setMaxWidth(int)
com.mapbox.mapboxsdk.camera.CameraPosition
androidx.appcompat.widget.SearchView: androidx.cursoradapter.widget.CursorAdapter getSuggestionsAdapter()
androidx.media.AudioAttributesImplBaseParcelizer: AudioAttributesImplBaseParcelizer()
com.mapbox.mapboxsdk.maps.MapView: android.view.View getRenderView()
com.mapbox.geojson.MultiPolygon: com.mapbox.geojson.BoundingBox bbox()
androidx.constraintlayout.widget.ConstraintLayout: void setMinWidth(int)
androidx.window.layout.SidecarCompat$FirstAttachAdapter: void onViewAttachedToWindow(android.view.View)
com.mapbox.geojson.gson.BoundingBoxTypeAdapter: com.mapbox.geojson.BoundingBox read(com.google.gson.stream.JsonReader)
com.google.gson.JsonObject: java.util.Set keySet()
io.flutter.embedding.engine.FlutterJNI: void invokePlatformMessageEmptyResponseCallback(int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String START_FOREGROUND_SERVICE
com.mapbox.mapboxsdk.location.LocationIndicatorLayer: void nativeSetAccuracyRadiusColorTransition(long,long)
com.google.android.material.circularreveal.cardview.CircularRevealCardView: void setRevealInfo(com.google.android.material.circularreveal.CircularRevealWidget$RevealInfo)
com.mapbox.mapboxsdk.maps.renderer.MapRendererRunnable
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper
com.mapbox.geojson.FeatureCollection: java.lang.String type
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String DAY
androidx.window.layout.WindowInfoTracker$Companion: WindowInfoTracker$Companion()
org.threeten.bp.chrono.MinguoEra: org.threeten.bp.chrono.MinguoEra valueOf(java.lang.String)
com.mapbox.mapboxsdk.offline.OfflineTilePyramidRegionDefinition: double maxZoom
com.google.android.material.internal.ForegroundLinearLayout: void setForegroundGravity(int)
kotlinx.coroutines.UndispatchedCoroutine
com.mapbox.geojson.ListOfDoublesCoordinatesTypeAdapter: ListOfDoublesCoordinatesTypeAdapter()
com.dexterous.flutterlocalnotifications.models.BitmapSource: BitmapSource(java.lang.String,int)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostCreated(android.app.Activity,android.os.Bundle)
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: java.util.concurrent.Executor executor
androidx.window.embedding.SplitController: void access$setStaticSplitRules(androidx.window.embedding.SplitController,java.util.Set)
com.google.android.material.button.MaterialButton: void setIconTintMode(android.graphics.PorterDuff$Mode)
org.threeten.bp.chrono.MinguoChronology: java.lang.Object readResolve()
com.google.android.material.snackbar.Snackbar$SnackbarLayout
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String PAYLOAD
androidx.window.embedding.EmbeddingBackend: boolean isSplitSupported()
androidx.window.core.Version$bigInteger$2: Version$bigInteger$2(androidx.window.core.Version)
org.threeten.bp.chrono.ChronoZonedDateTimeImpl: java.lang.Object readResolve()
androidx.appcompat.widget.Toolbar: void setTitle(int)
com.dexterous.flutterlocalnotifications.models.SoundSource
com.mapbox.mapboxsdk.style.layers.RasterLayer: void nativeSetRasterContrastTransition(long,long)
org.threeten.bp.ZoneOffset: java.lang.Object readResolve()
kotlinx.coroutines.internal.ThreadSafeHeap
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CHANNEL_NAME
com.google.android.gms.maps.model.PatternItem: android.os.Parcelable$Creator CREATOR
com.mapbox.mapboxsdk.utils.StringUtils
com.google.android.material.internal.VisibilityAwareImageButton
androidx.appcompat.widget.ActionBarContainer: android.view.View getTabContainer()
com.mapbox.geojson.shifter.CoordinateShifterManager: void setCoordinateShifter(com.mapbox.geojson.shifter.CoordinateShifter)
androidx.constraintlayout.widget.ConstraintHelper: void setReferencedIds(int[])
androidx.appcompat.app.AppCompatViewInflater: java.lang.Class[] sConstructorSignature
com.google.android.material.internal.VisibilityAwareImageButton: int getUserSetVisibility()
com.mapbox.mapboxsdk.style.layers.FillExtrusionLayer
io.flutter.embedding.engine.FlutterOverlaySurface: int getId()
androidx.fragment.app.FragmentActivity: FragmentActivity()
com.mapbox.mapboxsdk.Mapbox: com.mapbox.mapboxsdk.util.DefaultStyle[] getPredefinedStyles()
com.mapbox.mapboxsdk.Mapbox: android.content.res.AssetManager getAssetManager()
com.mapbox.mapboxsdk.style.layers.BackgroundLayer: java.lang.Object nativeGetBackgroundOpacity()
com.mapbox.geojson.MultiLineString$GsonTypeAdapter: com.mapbox.geojson.MultiLineString read(com.google.gson.stream.JsonReader)
androidx.window.embedding.ActivityRule: boolean alwaysExpand
kotlin.jvm.internal.CallableReference: boolean isTopLevel
androidx.appcompat.widget.ViewStubCompat: void setLayoutResource(int)
androidx.core.content.ContextCompat$Api23Impl: android.content.res.ColorStateList getColorStateList(android.content.Context,int)
androidx.window.layout.SidecarCompat: androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface access$getExtensionCallback$p(androidx.window.layout.SidecarCompat)
androidx.window.embedding.ActivityFilter: java.lang.String getIntentAction()
com.mapbox.mapboxsdk.maps.NativeMapView: double nativeGetMinZoom()
androidx.appcompat.widget.ActivityChooserView$InnerLayout
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String LED_COLOR_RED
com.mapbox.geojson.MultiPoint: com.mapbox.geojson.MultiPoint fromJson(java.lang.String)
androidx.appcompat.widget.SearchView$SearchAutoComplete: void setSearchView(androidx.appcompat.widget.SearchView)
com.mapbox.geojson.GeoJson: com.mapbox.geojson.BoundingBox bbox()
androidx.window.embedding.SplitRuleParser: androidx.window.embedding.SplitPairRule parseSplitPairRule(android.content.Context,android.content.res.XmlResourceParser)
androidx.window.core.Bounds: Bounds(int,int,int,int)
com.mapbox.mapboxsdk.location.LocationIndicatorLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetTopImageSizeTransition()
com.dexterous.flutterlocalnotifications.models.PersonDetails: PersonDetails(java.lang.Boolean,java.lang.Object,com.dexterous.flutterlocalnotifications.models.IconSource,java.lang.Boolean,java.lang.String,java.lang.String,java.lang.String)
androidx.appcompat.app.AppCompatViewInflater: androidx.appcompat.widget.AppCompatImageView createImageView(android.content.Context,android.util.AttributeSet)
com.google.android.gms.common.api.GoogleApiActivity
com.mapbox.mapboxsdk.style.sources.GeoJsonSource: void nativeSetUrl(java.lang.String)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean launchedActivityFromHistory(android.content.Intent)
com.mapbox.mapboxsdk.style.layers.RasterLayer: java.lang.Object nativeGetRasterOpacity()
com.mapbox.geojson.Point$GsonTypeAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
androidx.window.layout.FoldingFeature
kotlin.jvm.internal.CallableReference: java.lang.String signature
androidx.appcompat.widget.AppCompatSpinner: void setDropDownVerticalOffset(int)
io.flutter.embedding.engine.FlutterJNI: boolean initCalled
com.mapbox.geojson.BaseCoordinatesTypeAdapter: BaseCoordinatesTypeAdapter()
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction CreateIfNotExists
org.threeten.bp.YearMonth: java.lang.Object readResolve()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void getNotificationAppLaunchDetails(io.flutter.plugin.common.MethodChannel$Result)
androidx.window.embedding.SplitPairRule: int hashCode()
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: void accept(androidx.window.extensions.layout.WindowLayoutInfo)
com.google.android.material.appbar.AppBarLayout: int getTotalScrollRange()
com.mapbox.mapboxsdk.style.layers.SymbolLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetTextTranslateTransition()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency scheduledNotificationRepeatFrequency
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: com.google.android.gms.tasks.Task didReinitializeFirebaseCore()
com.google.android.material.transformation.FabTransformationSheetBehavior: FabTransformationSheetBehavior(android.content.Context,android.util.AttributeSet)
androidx.appcompat.view.menu.ListMenuItemView: void setGroupDividerEnabled(boolean)
com.google.android.material.transformation.FabTransformationBehavior: FabTransformationBehavior(android.content.Context,android.util.AttributeSet)
com.google.gson.JsonElement: com.google.gson.JsonElement deepCopy()
kotlin.jvm.internal.FunctionReference: int hashCode()
com.mapbox.mapboxsdk.offline.OfflineTilePyramidRegionDefinition: OfflineTilePyramidRegionDefinition(java.lang.String,com.mapbox.mapboxsdk.geometry.LatLngBounds,double,double,float,boolean)
com.mapbox.mapboxsdk.style.layers.FillLayer: void nativeSetFillColorTransition(long,long)
io.flutter.plugins.firebase.messaging.FlutterFirebaseMessagingBackgroundService: FlutterFirebaseMessagingBackgroundService()
kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext$Key key
com.google.android.material.internal.ForegroundLinearLayout: ForegroundLinearLayout(android.content.Context,android.util.AttributeSet)
com.mapbox.geojson.LineString$GsonTypeAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
io.flutter.embedding.engine.FlutterJNI: void nativeLoadDartDeferredLibrary(long,int,java.lang.String[])
com.mapbox.mapboxsdk.style.sources.CustomGeometrySource: void nativeSetTileData(int,int,int,com.mapbox.geojson.FeatureCollection)
androidx.appcompat.widget.Toolbar: int getContentInsetStartWithNavigation()
androidx.window.embedding.MatcherUtils: boolean areComponentsMatching$window_release(android.content.ComponentName,android.content.ComponentName)
com.mapbox.mapboxsdk.style.layers.HillshadeLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetHillshadeShadowColorTransition()
androidx.window.embedding.EmbeddingAdapter: boolean translateActivityPairPredicates$lambda-1(androidx.window.embedding.EmbeddingAdapter,java.util.Set,android.util.Pair)
com.google.gson.JsonPrimitive: int getAsInt()
com.mapbox.mapboxsdk.style.layers.RasterLayer: RasterLayer(long)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String STOP_FOREGROUND_SERVICE
androidx.window.layout.ExtensionWindowLayoutInfoBackend: java.util.Map activityToListeners
androidx.appcompat.widget.SearchView: void setOnSuggestionListener(androidx.appcompat.widget.SearchView$OnSuggestionListener)
com.mapbox.mapboxsdk.maps.renderer.MapRenderer: void onResume()
androidx.appcompat.widget.ScrollingTabContainerView: void setContentHeight(int)
org.threeten.bp.format.DateTimeFormatterBuilder$SettingsParser: org.threeten.bp.format.DateTimeFormatterBuilder$SettingsParser[] values()
androidx.appcompat.widget.DialogTitle: DialogTitle(android.content.Context,android.util.AttributeSet)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.NotificationStyle style
io.flutter.plugins.firebase.messaging.JobIntentService: JobIntentService()
com.mapbox.mapboxsdk.style.layers.CircleLayer: java.lang.Object nativeGetCircleRadius()
androidx.window.layout.WindowLayoutInfo: java.util.List displayFeatures
com.google.android.material.button.MaterialButton: void setBackgroundColor(int)
com.mapbox.mapboxsdk.style.layers.HeatmapLayer: java.lang.Object nativeGetHeatmapColor()
io.flutter.embedding.android.FlutterImageView: io.flutter.embedding.engine.renderer.FlutterRenderer getAttachedRenderer()
com.mapbox.mapboxsdk.offline.OfflineManager: void initialize(com.mapbox.mapboxsdk.storage.FileSource)
com.google.android.material.button.MaterialButton: void setStrokeWidthResource(int)
com.mapbox.mapboxsdk.snapshotter.MapSnapshotter: void setStyleUrl(java.lang.String)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetIconOptional()
androidx.window.R$attr: int activityName
com.google.android.gms.maps.model.PolylineOptions: android.os.Parcelable$Creator CREATOR
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeRemoveAnnotationIcon(java.lang.String)
kotlinx.coroutines.android.AndroidDispatcherFactory: kotlinx.coroutines.android.HandlerContext createDispatcher(java.util.List)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float getRotation()
com.dexterous.flutterlocalnotifications.models.MessageDetails: com.dexterous.flutterlocalnotifications.models.PersonDetails person
androidx.appcompat.widget.ScrollingTabContainerView: void setAllowCollapse(boolean)
androidx.cardview.widget.CardView: boolean getUseCompatPadding()
com.mapbox.geojson.MultiLineString$GsonTypeAdapter
com.mapbox.geojson.BoundingBox: boolean equals(java.lang.Object)
io.flutter.embedding.engine.FlutterJNI: void setAsyncWaitForVsyncDelegate(io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate)
android.support.v4.media.session.PlaybackStateCompat: android.os.Parcelable$Creator CREATOR
androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface: void onSplitInfoChanged(java.util.List)
androidx.window.layout.HardwareFoldingFeature$Companion: void validateFeatureBounds$window_release(androidx.window.core.Bounds)
com.google.android.gms.common.api.GoogleApiActivity: GoogleApiActivity()
com.mapbox.mapboxsdk.style.layers.LineLayer: LineLayer(long)
androidx.appcompat.widget.AppCompatCheckBox: android.content.res.ColorStateList getSupportButtonTintList()
org.threeten.bp.zone.StandardZoneRules
com.google.gson.JsonElement: boolean isJsonNull()
com.mapbox.mapboxsdk.style.layers.TransitionOptions: boolean enablePlacementTransitions
androidx.appcompat.widget.AppCompatTextView: void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)
com.google.firebase.installations.FirebaseInstallationsException$Status: com.google.firebase.installations.FirebaseInstallationsException$Status[] values()
androidx.constraintlayout.solver.widgets.ConstraintAnchor$Strength: androidx.constraintlayout.solver.widgets.ConstraintAnchor$Strength[] values()
androidx.window.embedding.SplitPairRule
androidx.window.layout.HardwareFoldingFeature$Type: java.lang.String toString()
io.flutter.plugins.imagepicker.ImagePickerPlugin$LifeCycleObserver
com.mapbox.geojson.MultiPoint$GsonTypeAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
com.google.android.material.snackbar.Snackbar$SnackbarLayout: Snackbar$SnackbarLayout(android.content.Context,android.util.AttributeSet)
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: androidx.window.layout.WindowLayoutInfo translate$window_release(android.app.Activity,androidx.window.extensions.layout.WindowLayoutInfo)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
com.mapbox.mapboxsdk.style.layers.CircleLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetCircleStrokeWidthTransition()
com.mapbox.geojson.Feature$GsonTypeAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
androidx.core.graphics.drawable.IconCompatParcelizer: void write(androidx.core.graphics.drawable.IconCompat,androidx.versionedparcelable.VersionedParcel)
com.mapbox.mapboxsdk.style.sources.RasterSource: void finalize()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CANCEL_ALL_METHOD
androidx.window.embedding.SplitPairRule: boolean finishPrimaryWithSecondary
com.mapbox.geojson.Geometry
com.mapbox.mapboxsdk.style.layers.RasterLayer: void initialize(java.lang.String,java.lang.String)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean enableVibration
com.google.firebase.messaging.EnhancedIntentService: EnhancedIntentService()
com.google.gson.JsonArray: int size()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_BIG_PICTURE_ERROR_CODE
com.mapbox.mapboxsdk.util.DefaultStyle
androidx.window.core.Version$bigInteger$2: java.lang.Object invoke()
androidx.window.embedding.ExtensionEmbeddingBackend: ExtensionEmbeddingBackend(androidx.window.embedding.EmbeddingInterfaceCompat)
androidx.window.layout.WindowLayoutInfo: WindowLayoutInfo(java.util.List)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1
com.google.android.material.snackbar.BaseTransientBottomBar$Behavior: BaseTransientBottomBar$Behavior()
androidx.window.R$attr: int placeholderActivityName
com.google.android.material.appbar.AppBarLayout$ScrollingViewBehavior: AppBarLayout$ScrollingViewBehavior()
androidx.window.embedding.SplitPairRule: SplitPairRule(java.util.Set,boolean,boolean,boolean,int,int,float,int,int,kotlin.jvm.internal.DefaultConstructorMarker)
com.mapbox.mapboxsdk.storage.FileSource: void setResourceTransform(com.mapbox.mapboxsdk.storage.FileSource$ResourceTransformCallback)
com.mapbox.mapboxsdk.style.light.Light: void nativeSetPositionTransition(long,long)
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: void onDeviceStateChanged(androidx.window.sidecar.SidecarDeviceState)
androidx.window.embedding.ActivityStack: boolean contains(android.app.Activity)
androidx.window.layout.WindowBackend
org.threeten.bp.Instant: java.lang.Object writeReplace()
org.threeten.bp.chrono.MinguoDate: java.lang.Object writeReplace()
com.mapbox.geojson.shifter.CoordinateShifterManager: com.mapbox.geojson.shifter.CoordinateShifter DEFAULT
com.mapbox.mapboxsdk.location.LocationIndicatorLayer: void nativeSetAccuracyRadiusBorderColorTransition(long,long)
androidx.appcompat.widget.ActionMenuView: void setExpandedActionViewsExclusive(boolean)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void setScaleX(float)
com.mapbox.mapboxsdk.offline.OfflineRegion$OfflineRegionObserver: void mapboxTileCountLimitExceeded(long)
androidx.appcompat.widget.AppCompatSpinner: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
androidx.appcompat.widget.Toolbar: int getCurrentContentInsetRight()
com.mapbox.mapboxsdk.maps.widgets.CompassView: void setCompassImage(android.graphics.drawable.Drawable)
com.mapbox.mapboxsdk.style.layers.LineLayer: java.lang.Object nativeGetLinePattern()
org.threeten.bp.chrono.Chronology: java.lang.Object readResolve()
com.mapbox.mapboxsdk.maps.NativeMapView: double nativeGetMaxPitch()
com.mapbox.geojson.shifter.CoordinateShifterManager: boolean isUsingDefaultShifter()
androidx.window.layout.SidecarCompat$TranslatingCallback
io.flutter.embedding.engine.FlutterJNI: void onSurfaceChanged(int,int)
androidx.appcompat.widget.AppCompatEditText
com.google.android.gms.maps.model.MapStyleOptions: android.os.Parcelable$Creator CREATOR
io.flutter.plugin.platform.SingleViewPresentation: java.lang.Object createParams
androidx.appcompat.widget.FitWindowsLinearLayout
android.support.v4.media.MediaBrowserCompat$MediaItem
io.flutter.view.AccessibilityViewEmbedder: void addChildrenToFlutterNode(android.view.accessibility.AccessibilityNodeInfo,android.view.View,android.view.accessibility.AccessibilityNodeInfo)
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: androidx.core.util.Consumer getCallback()
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void updateTexImage()
com.mapbox.geojson.BaseGeometryTypeAdapter: com.mapbox.geojson.CoordinateContainer readCoordinateContainer(com.google.gson.stream.JsonReader)
androidx.core.app.RemoteActionCompatParcelizer: void write(androidx.core.app.RemoteActionCompat,androidx.versionedparcelable.VersionedParcel)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetTextHaloBlur()
com.mapbox.mapboxsdk.maps.renderer.MapRenderer: void finalize()
androidx.transition.ChangeBounds$7: androidx.transition.ChangeBounds$ViewBounds mViewBounds
androidx.window.embedding.SplitController: void setStaticSplitRules(java.util.Set)
com.mapbox.mapboxsdk.maps.renderer.MapRenderer: void onStart()
com.google.android.material.floatingactionbutton.FloatingActionButton: android.graphics.drawable.Drawable getContentBackground()
com.mapbox.mapboxsdk.Mapbox: void setConnected(java.lang.Boolean)
androidx.core.widget.NestedScrollView: void setOnScrollChangeListener(androidx.core.widget.NestedScrollView$OnScrollChangeListener)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float getTranslateY()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void stopForegroundService(io.flutter.plugin.common.MethodChannel$Result)
com.mapbox.mapboxsdk.style.layers.FillLayer: java.lang.Object nativeGetFillColor()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin
androidx.window.embedding.SplitPairFilter: boolean equals(java.lang.Object)
com.dexterous.flutterlocalnotifications.NotificationStyle: com.dexterous.flutterlocalnotifications.NotificationStyle Default
com.mapbox.mapboxsdk.http.NativeHttpRequest: long access$100(com.mapbox.mapboxsdk.http.NativeHttpRequest)
androidx.window.layout.WindowMetricsCalculator: androidx.window.layout.WindowMetrics computeMaximumWindowMetrics(android.app.Activity)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Long parseLong(java.lang.Object)
androidx.recyclerview.widget.LinearLayoutManager$SavedState: android.os.Parcelable$Creator CREATOR
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: void removeListener(androidx.core.util.Consumer)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String HIDE_EXPANDED_LARGE_ICON
com.mapbox.mapboxsdk.camera.CameraPosition: double tilt
com.mapbox.mapboxsdk.style.types.FormattedSection
kotlinx.coroutines.CancelledContinuation
com.mapbox.mapboxsdk.style.layers.CircleLayer: void nativeSetCircleTranslateTransition(long,long)
com.mapbox.mapboxsdk.annotations.Marker: java.lang.String iconId
androidx.appcompat.widget.SearchView: void setOnQueryTextListener(androidx.appcompat.widget.SearchView$OnQueryTextListener)
com.google.android.material.button.MaterialButton: int getIconPadding()
androidx.coordinatorlayout.widget.CoordinatorLayout: int getSuggestedMinimumWidth()
com.google.firebase.provider.FirebaseInitProvider
com.mapbox.mapboxsdk.maps.renderer.MapRenderer: void nativeReset()
android.support.v4.media.MediaBrowserCompat$SearchResultReceiver
com.mapbox.geojson.shifter.CoordinateShifter: java.util.List shiftLonLatAlt(double,double,double)
com.mapbox.mapboxsdk.style.layers.LineLayer: void nativeSetLineColorTransition(long,long)
com.mapbox.geojson.FeatureCollection: com.mapbox.geojson.FeatureCollection fromFeatures(java.util.List)
androidx.window.layout.FoldingFeature$Orientation: java.lang.String toString()
com.google.android.material.button.MaterialButton: android.graphics.PorterDuff$Mode getBackgroundTintMode()
com.mapbox.mapboxsdk.storage.FileSource: boolean isActivated()
com.google.android.material.button.MaterialButton: void setIcon(android.graphics.drawable.Drawable)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: void pushClipRRect(int,int,int,int,float[])
io.flutter.plugin.platform.SingleViewPresentation
com.google.firebase.messaging.FirebaseMessagingRegistrar
io.flutter.view.FlutterCallbackInformation
com.google.gson.JsonPrimitive: java.math.BigDecimal getAsBigDecimal()
com.mapbox.mapboxsdk.maps.NativeMapView: void onCameraIsChanging()
com.mapbox.geojson.Point: com.mapbox.geojson.Point fromJson(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void updateSemantics(java.nio.ByteBuffer,java.lang.String[],java.nio.ByteBuffer[])
com.mapbox.mapboxsdk.style.sources.Source: java.lang.String getId()
com.dexterous.flutterlocalnotifications.models.MessageDetails: java.lang.Long timestamp
androidx.window.embedding.ActivityRule: androidx.window.embedding.ActivityRule plus$window_release(androidx.window.embedding.ActivityFilter)
com.mapbox.geojson.Point: java.lang.String type()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String SHARED_PREFERENCES_KEY
com.mapbox.mapboxsdk.style.sources.CustomGeometrySource: void fetchTile(int,int,int)
androidx.window.core.Bounds: boolean isEmpty()
androidx.appcompat.widget.SearchView: void setImeOptions(int)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void setTranslateY(float)
androidx.media.AudioAttributesImplApi26Parcelizer: AudioAttributesImplApi26Parcelizer()
com.mapbox.mapboxsdk.location.LocationIndicatorLayer: LocationIndicatorLayer(long)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: java.lang.String getGroupName()
com.mapbox.mapboxsdk.maps.Image: float[] stretchY
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetIconColor()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.styles.StyleInformation styleInformation
com.mapbox.geojson.Feature$GsonTypeAdapter
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation: java.lang.Boolean htmlFormatContentTitle
io.flutter.embedding.engine.FlutterJNI: void nativeDeferredComponentInstallFailure(int,java.lang.String,boolean)
com.mapbox.mapboxsdk.style.sources.GeoJsonSource
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String TIME_ZONE_NAME
com.mapbox.mapboxsdk.style.sources.Source: java.lang.Boolean nativeIsVolatile()
com.mapbox.mapboxsdk.style.layers.SymbolLayer: void nativeSetIconColorTransition(long,long)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer iconResourceId
com.dexterous.flutterlocalnotifications.ScheduledNotificationReceiver
com.mapbox.geojson.gson.GeoJsonAdapterFactory
androidx.window.embedding.ActivityFilter: boolean matchesActivity(android.app.Activity)
com.mapbox.mapboxsdk.style.layers.CircleLayer: CircleLayer(long)
androidx.window.embedding.ExtensionEmbeddingBackend: void access$setGlobalInstance$cp(androidx.window.embedding.ExtensionEmbeddingBackend)
androidx.window.R$styleable: int SplitPairRule_clearTop
com.mapbox.geojson.ListOfDoublesCoordinatesTypeAdapter: java.util.List read(com.google.gson.stream.JsonReader)
com.mapbox.mapboxsdk.camera.CameraPosition: com.mapbox.mapboxsdk.geometry.LatLng target
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeSetPitch(double,long)
androidx.window.layout.SidecarCompat$Companion: SidecarCompat$Companion()
com.google.android.material.floatingactionbutton.FloatingActionButton: void setBackgroundTintList(android.content.res.ColorStateList)
com.mapbox.mapboxsdk.maps.renderer.glsurfaceview.MapboxGLSurfaceView
androidx.appcompat.widget.AppCompatAutoCompleteTextView: void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)
com.google.gson.JsonPrimitive: char getAsCharacter()
com.google.android.material.bottomappbar.BottomAppBar: float getFabCradleRoundedCornerRadius()
io.flutter.embedding.engine.FlutterJNI: void attachToNative()
androidx.window.layout.WindowMetrics: int hashCode()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void initialize(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.mapbox.geojson.Polygon: com.mapbox.geojson.Polygon fromOuterInner(com.mapbox.geojson.LineString,java.util.List)
androidx.appcompat.view.menu.ListMenuItemView: void setForceShowIcon(boolean)
com.google.gson.JsonObject: void addProperty(java.lang.String,java.lang.Number)
com.mapbox.mapboxsdk.style.sources.RasterSource
com.mapbox.mapboxsdk.style.sources.CustomGeometrySource: void initialize(java.lang.String,java.lang.Object)
com.mapbox.mapboxsdk.maps.MapView: com.mapbox.mapboxsdk.maps.MapboxMap getMapboxMap()
com.mapbox.mapboxsdk.style.layers.FillExtrusionLayer: java.lang.Object nativeGetFillExtrusionOpacity()
com.mapbox.geojson.MultiPoint: java.lang.String toString()
com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory: com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory of(java.lang.Class)
com.dexterous.flutterlocalnotifications.NotificationStyle: com.dexterous.flutterlocalnotifications.NotificationStyle Messaging
com.mapbox.geojson.MultiPolygon: java.util.List coordinates
com.mapbox.geojson.Feature: java.lang.Character getCharacterProperty(java.lang.String)
androidx.window.core.Version: java.lang.String toString()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readColor(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
kotlinx.coroutines.android.AndroidDispatcherFactory: kotlinx.coroutines.MainCoroutineDispatcher createDispatcher(java.util.List)
com.mapbox.geojson.ListOfPointCoordinatesTypeAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
kotlin.jvm.internal.FunctionReference: java.lang.String toString()
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: ExtensionEmbeddingBackend$SplitListenerWrapper(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String name
com.mapbox.mapboxsdk.style.layers.CircleLayer: void nativeSetCircleOpacityTransition(long,long)
com.mapbox.geojson.GeometryCollection$GsonTypeAdapter
com.mapbox.mapboxsdk.log.Logger: void d(java.lang.String,java.lang.String)
com.mapbox.mapboxsdk.style.layers.LineLayer: java.lang.Object nativeGetLineTranslate()
androidx.appcompat.widget.AppCompatAutoCompleteTextView: AppCompatAutoCompleteTextView(android.content.Context,android.util.AttributeSet)
androidx.appcompat.widget.AppCompatTextView: java.lang.CharSequence getText()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostStarted(android.app.Activity)
androidx.window.layout.SidecarCompat: void onWindowLayoutChangeListenerRemoved(android.app.Activity)
com.mapbox.mapboxsdk.maps.renderer.glsurfaceview.MapboxGLSurfaceView: void setEGLContextFactory(android.opengl.GLSurfaceView$EGLContextFactory)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.content.Intent launchIntent
com.mapbox.mapboxsdk.log.Logger: void v(java.lang.String,java.lang.String)
androidx.window.embedding.SplitController
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState
io.flutter.plugins.firebase.messaging.FlutterFirebaseMessagingInitProvider
com.google.gson.JsonObject: void addProperty(java.lang.String,java.lang.Boolean)
com.mapbox.mapboxsdk.style.layers.Layer: java.lang.String nativeGetId()
io.flutter.embedding.engine.FlutterJNI: void nativeSetAccessibilityFeatures(long,int)
io.flutter.plugins.firebase.core.FlutterFirebaseCoreRegistrar: java.util.List getComponents()
com.google.android.material.appbar.AppBarLayout$ScrollingViewBehavior: AppBarLayout$ScrollingViewBehavior(android.content.Context,android.util.AttributeSet)
com.google.gson.JsonPrimitive: long getAsLong()
com.mapbox.mapboxsdk.style.layers.FillExtrusionLayer: void nativeSetFillExtrusionPatternTransition(long,long)
com.google.android.material.internal.VisibilityAwareImageButton: VisibilityAwareImageButton(android.content.Context,android.util.AttributeSet)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SOUND_SOURCE
kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: void nativeSetIconHaloBlurTransition(long,long)
com.mapbox.geojson.shifter.CoordinateShifterManager
androidx.window.embedding.SplitPairFilter: android.content.ComponentName secondaryActivityName
androidx.window.embedding.MatcherUtils: MatcherUtils()
com.mapbox.mapboxsdk.offline.OfflineGeometryRegionDefinition: boolean includeIdeographs
androidx.window.core.Version: int getMajor()
androidx.window.layout.FoldingFeature: androidx.window.layout.FoldingFeature$Orientation getOrientation()
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: void accept$lambda-0(androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper,androidx.window.layout.WindowLayoutInfo)
androidx.appcompat.widget.LinearLayoutCompat: int getDividerWidth()
androidx.window.layout.SidecarCompat$TranslatingCallback: void onDeviceStateChanged(androidx.window.sidecar.SidecarDeviceState)
kotlinx.coroutines.android.HandlerDispatcherKt: android.view.Choreographer choreographer
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: ImeSyncDeferringInsetsCallback$AnimationCallback(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
com.mapbox.geojson.Polygon
com.mapbox.mapboxsdk.maps.NativeMapView: long nativePtr
androidx.media.AudioAttributesCompatParcelizer: androidx.media.AudioAttributesCompat read(androidx.versionedparcelable.VersionedParcel)
com.mapbox.mapboxsdk.style.sources.Source: java.lang.Integer getPrefetchZoomDelta()
androidx.constraintlayout.solver.widgets.ConstraintAnchor$Strength: androidx.constraintlayout.solver.widgets.ConstraintAnchor$Strength valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.models.styles.StyleInformation: StyleInformation()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String PLATFORM_SPECIFICS
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointRegionalIndicator(int)
com.mapbox.mapboxsdk.storage.FileSource: void setApiBaseUrl(java.lang.String)
androidx.appcompat.widget.SearchView: void setSearchableInfo(android.app.SearchableInfo)
com.mapbox.geojson.utils.PolylineUtils: java.util.List simplifyDpStep(java.util.List,int,int,double,java.util.List)
com.mapbox.mapboxsdk.offline.OfflineRegion$OfflineRegionDeleteCallback
androidx.window.layout.WindowMetricsCalculatorCompat: void getRectSizeFromDisplay(android.app.Activity,android.graphics.Rect)
com.mapbox.mapboxsdk.style.types.FormattedSection: java.lang.String getText()
com.mapbox.mapboxsdk.maps.renderer.MapRenderer: void setOnFpsChangedListener(com.mapbox.mapboxsdk.maps.MapboxMap$OnFpsChangedListener)
androidx.window.core.Bounds
org.threeten.bp.zone.ZoneOffsetTransitionRule$TimeDefinition: org.threeten.bp.zone.ZoneOffsetTransitionRule$TimeDefinition[] values()
com.mapbox.mapboxsdk.http.NativeHttpRequest: void nativeOnFailure(int,java.lang.String)
com.mapbox.mapboxsdk.style.layers.RasterLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetRasterHueRotateTransition()
com.mapbox.mapboxsdk.style.types.FormattedSection: void setFontStack(java.lang.String[])
androidx.window.core.Version$Companion
androidx.window.R$styleable: R$styleable()
androidx.media.AudioAttributesImplApi26Parcelizer: androidx.media.AudioAttributesImplApi26 read(androidx.versionedparcelable.VersionedParcel)
com.google.android.material.internal.ForegroundLinearLayout: android.graphics.drawable.Drawable getForeground()
okhttp3.Protocol: okhttp3.Protocol valueOf(java.lang.String)
androidx.window.layout.SidecarCompat: androidx.window.layout.SidecarAdapter access$getSidecarAdapter$p(androidx.window.layout.SidecarCompat)
com.mapbox.geojson.BoundingBox
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction channelAction
com.google.android.material.circularreveal.CircularRevealFrameLayout: void setCircularRevealScrimColor(int)
com.mapbox.mapboxsdk.style.layers.CircleLayer: java.lang.Object nativeGetCircleColor()
androidx.window.layout.WindowInfoTracker$Companion
androidx.appcompat.widget.AppCompatCheckedTextView
androidx.appcompat.widget.SearchView: void setIconified(boolean)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean isValidDrawableResource(android.content.Context,java.lang.String,io.flutter.plugin.common.MethodChannel$Result,java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void nativeImageHeaderCallback(long,int,int)
com.mapbox.mapboxsdk.snapshotter.MapSnapshotter: void onDidFinishLoadingStyle()
com.mapbox.geojson.Feature: com.mapbox.geojson.Feature fromGeometry(com.mapbox.geojson.Geometry,com.google.gson.JsonObject,java.lang.String)
com.mapbox.mapboxsdk.style.layers.SymbolLayer
com.google.android.material.floatingactionbutton.FloatingActionButton: void setCompatElevation(float)
androidx.window.layout.SidecarWindowBackend: androidx.window.layout.SidecarWindowBackend$Companion Companion
com.google.android.material.floatingactionbutton.FloatingActionButton: void setCompatHoveredFocusedTranslationZResource(int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CREATE_NOTIFICATION_CHANNEL_GROUP_METHOD
android.support.v4.media.AudioAttributesCompatParcelizer: AudioAttributesCompatParcelizer()
io.flutter.embedding.engine.FlutterJNI: void cleanupMessageData(long)
androidx.appcompat.widget.Toolbar: int getContentInsetStart()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View access$600(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
androidx.appcompat.widget.SearchView: void setMaxWidth(int)
androidx.coordinatorlayout.widget.CoordinatorLayout$SavedState: android.os.Parcelable$Creator CREATOR
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: long nativeAttach(io.flutter.embedding.engine.FlutterJNI)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: com.dexterous.flutterlocalnotifications.models.NotificationDetails extractNotificationDetails(io.flutter.plugin.common.MethodChannel$Result,java.util.Map)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: androidx.core.app.NotificationCompat$MessagingStyle$Message createMessage(android.content.Context,com.dexterous.flutterlocalnotifications.models.MessageDetails)
org.threeten.bp.chrono.ThaiBuddhistEra
com.google.gson.JsonObject: com.google.gson.JsonArray getAsJsonArray(java.lang.String)
com.mapbox.mapboxsdk.location.LocationIndicatorLayer: java.lang.Object nativeGetBearingImageSize()
com.google.android.material.behavior.HideBottomViewOnScrollBehavior
com.mapbox.mapboxsdk.style.layers.SymbolLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetIconHaloWidthTransition()
org.threeten.bp.format.SignStyle: org.threeten.bp.format.SignStyle valueOf(java.lang.String)
androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State[] values()
io.flutter.embedding.android.FlutterImageView: android.media.ImageReader getImageReader()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View view
com.mapbox.mapboxsdk.offline.OfflineRegionDefinition: boolean getIncludeIdeographs()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String REPEAT_INTERVAL
com.mapbox.mapboxsdk.geometry.LatLngQuad: android.os.Parcelable$Creator CREATOR
com.google.android.gms.common.api.internal.LifecycleCallback
com.google.android.material.floatingactionbutton.FloatingActionButton: void setHideMotionSpecResource(int)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View$OnApplyWindowInsetsListener getInsetsListener()
com.mapbox.mapboxsdk.location.LocationIndicatorLayer: java.lang.Object nativeGetTopImageSize()
androidx.window.layout.WindowMetricsCalculator$Companion$reset$1: androidx.window.layout.WindowMetricsCalculator invoke(androidx.window.layout.WindowMetricsCalculator)
com.mapbox.mapboxsdk.style.sources.Source: void nativeSetPrefetchZoomDelta(java.lang.Integer)
io.flutter.plugins.GeneratedPluginRegistrant: GeneratedPluginRegistrant()
androidx.appcompat.view.menu.ListMenuItemView: androidx.appcompat.view.menu.MenuItemImpl getItemData()
androidx.appcompat.widget.AppCompatSpinner
com.mapbox.mapboxsdk.maps.MapView: void setMaximumFps(int)
io.flutter.embedding.engine.FlutterJNI: void onDisplayPlatformView(int,int,int,int,int,int,int,io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack)
com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Flag: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Flag[] values()
com.mapbox.geojson.FeatureCollection: com.mapbox.geojson.FeatureCollection fromFeatures(java.util.List,com.mapbox.geojson.BoundingBox)
kotlinx.coroutines.CancellableContinuationImpl
androidx.window.layout.SidecarWindowBackend$ExtensionListenerImpl
androidx.appcompat.widget.ViewStubCompat: void setVisibility(int)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetIconHaloColor()
androidx.appcompat.widget.ActionMenuView: void setOverflowIcon(android.graphics.drawable.Drawable)
com.google.android.material.floatingactionbutton.FloatingActionButton: android.content.res.ColorStateList getBackgroundTintList()
com.google.android.gms.common.api.Scope: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ICON_SOURCE
com.mapbox.mapboxsdk.storage.FileSource: java.lang.String getApiBaseUrl()
com.mapbox.mapboxsdk.snapshotter.MapSnapshotter: void setStyleJson(java.lang.String)
androidx.window.layout.SidecarCompat: java.util.Map windowListenerRegisteredContexts
androidx.window.layout.SidecarWindowBackend$ExtensionListenerImpl: androidx.window.layout.SidecarWindowBackend this$0
androidx.window.embedding.SplitRule$Api30Impl: SplitRule$Api30Impl()
com.google.android.material.snackbar.SnackbarContentLayout: SnackbarContentLayout(android.content.Context,android.util.AttributeSet)
androidx.window.layout.WindowInfoTracker: androidx.window.layout.WindowInfoTracker$Companion Companion
androidx.cardview.widget.CardView: int getContentPaddingBottom()
com.mapbox.mapboxsdk.maps.renderer.MapRendererRunnable: void run()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer maxProgress
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String FULL_SCREEN_INTENT
com.mapbox.geojson.MultiPoint: com.mapbox.geojson.BoundingBox bbox()
com.dexterous.flutterlocalnotifications.NotificationStyle: NotificationStyle(java.lang.String,int)
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String ENABLE_VIBRATION
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetTextRadialOffset()
com.google.android.material.floatingactionbutton.FloatingActionButton: void setHideMotionSpec(com.google.android.material.animation.MotionSpec)
com.google.gson.JsonObject: int size()
io.flutter.embedding.engine.FlutterJNI: void nativeInvokePlatformMessageEmptyResponseCallback(long,int)
com.google.gson.JsonElement: long getAsLong()
androidx.appcompat.app.AppCompatViewInflater: androidx.appcompat.widget.AppCompatTextView createTextView(android.content.Context,android.util.AttributeSet)
androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface: void onWindowLayoutChanged(android.app.Activity,androidx.window.layout.WindowLayoutInfo)
androidx.window.embedding.SplitPairRule: boolean clearTop
androidx.window.layout.SidecarWindowBackend$ExtensionListenerImpl: SidecarWindowBackend$ExtensionListenerImpl(androidx.window.layout.SidecarWindowBackend)
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: boolean isEmpty()
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl splitInfoEmbeddingCallback
com.mapbox.geojson.BoundingBox: java.lang.String toJson()
com.mapbox.mapboxsdk.util.TileServerOptions: android.os.Parcelable$Creator CREATOR
androidx.coordinatorlayout.widget.CoordinatorLayout: void setVisibility(int)
androidx.appcompat.widget.ContentFrameLayout: android.util.TypedValue getFixedWidthMajor()
com.mapbox.geojson.LineString: com.mapbox.geojson.LineString fromLngLats(com.mapbox.geojson.MultiPoint)
com.mapbox.mapboxsdk.geometry.LatLngQuad: com.mapbox.mapboxsdk.geometry.LatLng topLeft
com.google.android.gms.signin.internal.zaa: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ticker
kotlinx.coroutines.EventLoopImplBase: int _isCompleted
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LED_OFF_MS
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean hasInvalidLargeIcon(io.flutter.plugin.common.MethodChannel$Result,java.lang.Object,com.dexterous.flutterlocalnotifications.models.BitmapSource)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetTextTranslate()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer day
androidx.window.layout.SidecarAdapter$Companion: SidecarAdapter$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
androidx.window.core.Bounds: int right
com.google.gson.JsonArray: java.math.BigDecimal getAsBigDecimal()
com.mapbox.mapboxsdk.style.layers.CircleLayer: void finalize()
com.mapbox.mapboxsdk.style.layers.HeatmapLayer: java.lang.Object nativeGetHeatmapIntensity()
androidx.window.layout.FoldingFeature$State: androidx.window.layout.FoldingFeature$State HALF_OPENED
com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout: void setOnAttachStateChangeListener(com.google.android.material.snackbar.BaseTransientBottomBar$OnAttachStateChangeListener)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType valueOf(java.lang.String)
com.google.android.material.appbar.HeaderScrollingViewBehavior: HeaderScrollingViewBehavior()
kotlin.jvm.internal.FunctionReference: int arity
androidx.window.embedding.SplitController$Companion: void initialize(android.content.Context,int)
com.mapbox.mapboxsdk.text.LocalGlyphRasterizer: LocalGlyphRasterizer()
androidx.appcompat.widget.ActionBarOverlayLayout: ActionBarOverlayLayout(android.content.Context,android.util.AttributeSet)
kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.Continuation intercepted
androidx.coordinatorlayout.widget.CoordinatorLayout: void setStatusBarBackgroundColor(int)
com.mapbox.geojson.Point: com.mapbox.geojson.Point fromLngLat(double,double)
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: java.lang.String access$000(com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory)
androidx.appcompat.widget.LinearLayoutCompat: void setDividerDrawable(android.graphics.drawable.Drawable)
io.flutter.embedding.engine.FlutterJNI: void addEngineLifecycleListener(io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener)
com.mapbox.mapboxsdk.offline.OfflineTilePyramidRegionDefinition: float pixelRatio
com.mapbox.geojson.FeatureCollection$GsonTypeAdapter: com.google.gson.TypeAdapter boundingBoxAdapter
io.flutter.plugin.platform.SingleViewPresentation: android.view.View$OnFocusChangeListener focusChangeListener
androidx.window.layout.DisplayCompatHelperApi17: void getRealSize(android.view.Display,android.graphics.Point)
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference
com.mapbox.geojson.BoundingBox: com.mapbox.geojson.Point northeast
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: void accept(androidx.window.layout.WindowLayoutInfo)
io.flutter.embedding.engine.FlutterJNI: void nativeUnregisterTexture(long,long)
androidx.recyclerview.widget.RecyclerView: boolean getPreserveFocusAfterLayout()
com.google.android.gms.maps.GoogleMapOptions: android.os.Parcelable$Creator CREATOR
com.mapbox.mapboxsdk.style.layers.RasterLayer: void finalize()
androidx.window.embedding.SplitPairFilter: boolean matchesActivityPair(android.app.Activity,android.app.Activity)
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: ExtensionEmbeddingBackend$EmbeddingCallbackImpl(androidx.window.embedding.ExtensionEmbeddingBackend)
com.mapbox.geojson.Point: java.lang.String type
androidx.window.embedding.SplitRule: SplitRule(int,int,float,int)
androidx.appcompat.widget.AppCompatTextView: void setSupportBackgroundTintList(android.content.res.ColorStateList)
com.mapbox.mapboxsdk.maps.MapView: MapView(android.content.Context,android.util.AttributeSet)
androidx.appcompat.widget.AppCompatTextView: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
androidx.appcompat.widget.AppCompatAutoCompleteTextView: void setDropDownBackgroundResource(int)
androidx.recyclerview.widget.RecyclerView: void setChildDrawingOrderCallback(androidx.recyclerview.widget.RecyclerView$ChildDrawingOrderCallback)
org.threeten.bp.LocalTime: java.lang.Object readResolve()
com.mapbox.mapboxsdk.offline.OfflineTilePyramidRegionDefinition: double minZoom
com.mapbox.geojson.PointAsCoordinatesTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
com.mapbox.geojson.FeatureCollection: com.mapbox.geojson.BoundingBox bbox()
androidx.constraintlayout.widget.Barrier: void setAllowsGoneWidget(boolean)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean indeterminate
com.mapbox.geojson.MultiPolygon: boolean equals(java.lang.Object)
com.mapbox.mapboxsdk.style.layers.Layer: void nativeSetMinZoom(float)
androidx.media.AudioAttributesImplApi21
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer id
com.mapbox.geojson.FeatureCollection: com.mapbox.geojson.FeatureCollection fromJson(java.lang.String)
com.google.gson.JsonPrimitive: java.math.BigInteger getAsBigInteger()
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetTextPadding()
androidx.appcompat.widget.SearchView: int getSuggestionRowLayout()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsets access$400(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateParentMetricsPredicate(androidx.window.embedding.SplitRule)
androidx.window.embedding.SplitController: void addSplitListener(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
com.mapbox.mapboxsdk.maps.renderer.MapRendererScheduler: void requestRender()
kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState valueOf(java.lang.String)
androidx.window.embedding.SplitPlaceholderRule: android.content.Intent placeholderIntent
com.mapbox.mapboxsdk.style.types.FormattedSection: FormattedSection(java.lang.String)
com.mapbox.mapboxsdk.maps.NativeMapView: com.mapbox.mapboxsdk.camera.CameraPosition nativeGetCameraForLatLngBounds(com.mapbox.mapboxsdk.geometry.LatLngBounds,double,double,double,double,double,double)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LED_COLOR_ALPHA
com.dexterous.flutterlocalnotifications.models.MessageDetails: java.lang.String dataMimeType
io.flutter.plugin.platform.SingleViewPresentation: boolean startFocused
androidx.appcompat.view.menu.ActionMenuItemView: void setPopupCallback(androidx.appcompat.view.menu.ActionMenuItemView$PopupCallback)
com.mapbox.mapboxsdk.style.layers.CircleLayer
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_LARGE_ICON_ERROR_CODE
com.google.gson.JsonObject: boolean has(java.lang.String)
androidx.appcompat.widget.SearchView: int getSuggestionCommitIconResId()
io.flutter.embedding.engine.FlutterJNI: void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[])
io.flutter.embedding.android.TransparencyMode: io.flutter.embedding.android.TransparencyMode valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CATEGORY
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void zonedSchedule(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
kotlinx.coroutines.channels.RendezvousChannel
com.mapbox.mapboxsdk.style.layers.LineLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetLinePatternTransition()
androidx.appcompat.view.menu.ActionMenuItemView: void setChecked(boolean)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: android.graphics.Matrix getFinalMatrix()
com.mapbox.mapboxsdk.maps.Image: int width
androidx.window.core.Bounds: int getLeft()
androidx.appcompat.widget.AppCompatImageButton: void setBackgroundResource(int)
com.dexterous.flutterlocalnotifications.models.BitmapSource: com.dexterous.flutterlocalnotifications.models.BitmapSource[] $VALUES
androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Point getRealSizeForDisplay$window_release(android.view.Display)
com.google.android.material.button.MaterialButton: void setIconGravity(int)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String COLOR_GREEN
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType[] values()
com.mapbox.mapboxsdk.style.layers.Layer: com.google.gson.JsonElement nativeGetFilter()
com.mapbox.mapboxsdk.storage.FileSource
com.mapbox.geojson.constants.GeoJsonConstants: double MIN_LATITUDE
android.support.v4.media.RatingCompat
com.mapbox.geojson.Feature$GsonTypeAdapter: com.mapbox.geojson.Feature read(com.google.gson.stream.JsonReader)
androidx.core.content.ContextCompat$Api16Impl: void startActivity(android.content.Context,android.content.Intent,android.os.Bundle)
kotlinx.coroutines.JobNode
com.baseflow.geolocator.GeolocatorLocationService
androidx.lifecycle.LiveData$LifecycleBoundObserver
com.mapbox.geojson.GeometryAdapterFactory: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)
androidx.appcompat.widget.ActionBarContextView: int getContentHeight()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float getTranslateX()
com.mapbox.geojson.MultiPolygon$GsonTypeAdapter: com.mapbox.geojson.CoordinateContainer createCoordinateContainer(java.lang.String,com.mapbox.geojson.BoundingBox,java.lang.Object)
androidx.window.R$styleable: int SplitPairFilter_secondaryActivityAction
androidx.appcompat.widget.ActionBarOverlayLayout: void setLogo(int)
io.flutter.embedding.engine.FlutterJNI: long performNativeAttach(io.flutter.embedding.engine.FlutterJNI)
com.mapbox.geojson.FeatureCollection: com.mapbox.geojson.FeatureCollection fromFeatures(com.mapbox.geojson.Feature[],com.mapbox.geojson.BoundingBox)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: int access$100(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
com.mapbox.mapboxsdk.maps.renderer.MapRenderer: void onPause()
com.mapbox.mapboxsdk.style.layers.HeatmapLayer: void initialize(java.lang.String,java.lang.String)
androidx.appcompat.widget.SearchView: java.lang.CharSequence getQuery()
com.mapbox.geojson.Feature: java.lang.String id()
kotlin.coroutines.jvm.internal.ContinuationImpl: ContinuationImpl(kotlin.coroutines.Continuation,kotlin.coroutines.CoroutineContext)
androidx.core.widget.NestedScrollView: int getMaxScrollAmount()
com.dexterous.flutterlocalnotifications.NotificationStyle: com.dexterous.flutterlocalnotifications.NotificationStyle BigPicture
kotlinx.coroutines.channels.ArrayChannel: int size
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat[] values()
androidx.window.layout.SidecarCompat: void registerConfigurationChangeListener(android.app.Activity)
androidx.window.layout.SidecarCompat: boolean validateExtensionInterface()
com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Flag: com.google.android.datatransport.runtime.scheduling.jobscheduling.SchedulerConfig$Flag valueOf(java.lang.String)
androidx.media.AudioAttributesImplBase
com.google.android.material.button.MaterialButton: int getIconSize()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String TITLE
com.mapbox.geojson.GeometryCollection
com.mapbox.geojson.Polygon$GsonTypeAdapter: com.mapbox.geojson.CoordinateContainer createCoordinateContainer(java.lang.String,com.mapbox.geojson.BoundingBox,java.util.List)
androidx.window.layout.WindowMetricsCalculatorCompat
org.threeten.bp.chrono.JapaneseEra: java.lang.Object readResolve()
kotlinx.coroutines.internal.ScopeCoroutine
com.google.gson.JsonElement: boolean isJsonPrimitive()
com.google.gson.TypeAdapter: void toJson(java.io.Writer,java.lang.Object)
com.mapbox.mapboxsdk.offline.OfflineManager: void createOfflineRegion(com.mapbox.mapboxsdk.storage.FileSource,com.mapbox.mapboxsdk.offline.OfflineRegionDefinition,byte[],com.mapbox.mapboxsdk.offline.OfflineManager$CreateOfflineRegionCallback)
androidx.coordinatorlayout.widget.CoordinatorLayout$Behavior: CoordinatorLayout$Behavior()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CALLED_AT
com.google.android.material.bottomsheet.BottomSheetBehavior: BottomSheetBehavior()
com.mapbox.mapboxsdk.plugins.offline.ui.OfflineActivity: OfflineActivity()
com.mapbox.geojson.shifter.CoordinateShifter: java.util.List unshiftPoint(com.mapbox.geojson.Point)
com.mapbox.geojson.LineString: com.mapbox.geojson.LineString fromLngLats(java.util.List,com.mapbox.geojson.BoundingBox)
com.mapbox.geojson.MultiLineString: com.mapbox.geojson.MultiLineString fromLineString(com.mapbox.geojson.LineString)
io.flutter.embedding.engine.FlutterJNI: void onSurfaceWindowChanged(android.view.Surface)
com.google.gson.JsonElement: java.lang.String toString()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SUMMARY_TEXT
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int getChangingConfigurations()
com.mapbox.mapboxsdk.maps.renderer.MapRendererRunnable: void finalize()
androidx.appcompat.widget.DropDownListView: void setSelector(android.graphics.drawable.Drawable)
io.flutter.embedding.engine.FlutterJNI: void nativeMarkTextureFrameAvailable(long,long)
androidx.constraintlayout.widget.Guideline: void setGuidelinePercent(float)
com.google.android.material.floatingactionbutton.FloatingActionButton: void setSupportImageTintList(android.content.res.ColorStateList)
com.mapbox.mapboxsdk.plugins.offline.ui.OfflineActivity
com.mapbox.mapboxsdk.offline.OfflineRegion: void setOfflineRegionDownloadState(int)
androidx.appcompat.view.menu.ActionMenuItemView: void setTitle(java.lang.CharSequence)
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory of(java.lang.Class)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setCategory(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
com.mapbox.geojson.GeometryCollection: com.mapbox.geojson.BoundingBox bbox
com.mapbox.mapboxsdk.style.sources.GeoJsonSource: com.mapbox.geojson.Feature[] nativeGetClusterLeaves(com.mapbox.geojson.Feature,long,long)
androidx.appcompat.widget.ActionMenuView: void setPopupTheme(int)
androidx.recyclerview.widget.RecyclerView: androidx.recyclerview.widget.RecyclerViewAccessibilityDelegate getCompatAccessibilityDelegate()
com.mapbox.mapboxsdk.offline.OfflineManager: void nativeClearAmbientCache(com.mapbox.mapboxsdk.offline.OfflineManager$FileSourceCallback)
com.mapbox.geojson.LineString: com.mapbox.geojson.LineString fromJson(java.lang.String)
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource ContentUri
com.mapbox.mapboxsdk.util.TileServerOptions: java.lang.String tileVersionPrefix
androidx.window.embedding.SplitController: void access$setGlobalInstance$cp(androidx.window.embedding.SplitController)
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag valueOf(java.lang.String)
androidx.window.embedding.SplitPairRule: SplitPairRule(java.util.Set,boolean,boolean,boolean,int,int,float,int)
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String DESCRIPTION
androidx.window.layout.HardwareFoldingFeature$Type: androidx.window.layout.HardwareFoldingFeature$Type FOLD
io.flutter.embedding.android.FlutterImageView$SurfaceKind: io.flutter.embedding.android.FlutterImageView$SurfaceKind valueOf(java.lang.String)
org.threeten.bp.Period: java.lang.Object readResolve()
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization[] values()
com.mapbox.geojson.Polygon: com.mapbox.geojson.Polygon fromLngLats(java.util.List)
com.mapbox.geojson.FeatureCollection$GsonTypeAdapter: FeatureCollection$GsonTypeAdapter(com.google.gson.Gson)
kotlinx.coroutines.CompletionHandlerBase
androidx.window.layout.DisplayCompatHelperApi28: int safeInsetLeft(android.view.DisplayCutout)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String DATA_MIME_TYPE
com.mapbox.geojson.Polygon: java.lang.Object coordinates()
com.mapbox.mapboxsdk.style.layers.CircleLayer: java.lang.Object nativeGetCirclePitchScale()
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: void onWindowLayoutChanged(android.os.IBinder,androidx.window.sidecar.SidecarWindowLayoutInfo)
org.threeten.bp.OffsetDateTime: java.lang.Object readResolve()
com.dexterous.flutterlocalnotifications.ScheduledNotificationBootReceiver
androidx.window.layout.HardwareFoldingFeature$Companion: HardwareFoldingFeature$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
androidx.constraintlayout.solver.widgets.ConstraintWidget$DimensionBehaviour: androidx.constraintlayout.solver.widgets.ConstraintWidget$DimensionBehaviour[] values()
org.threeten.bp.chrono.ThaiBuddhistEra: java.lang.Object writeReplace()
androidx.appcompat.widget.ActionMenuView: android.graphics.drawable.Drawable getOverflowIcon()
com.mapbox.mapboxsdk.maps.renderer.glsurfaceview.MapboxGLSurfaceView: void setRenderMode(int)
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String VIBRATION_PATTERN
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_NOTIFICATION_CHANNELS_ERROR_CODE
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetIconHaloWidth()
org.threeten.bp.zone.ZoneOffsetTransitionRule
com.mapbox.mapboxsdk.log.Logger: com.mapbox.mapboxsdk.log.LoggerDefinition logger
androidx.window.R$attr: int alwaysExpand
com.dexterous.flutterlocalnotifications.NotificationStyle: com.dexterous.flutterlocalnotifications.NotificationStyle Inbox
kotlin.jvm.internal.CallableReference: java.lang.Object getBoundReceiver()
androidx.window.layout.ExtensionInterfaceCompat: void setExtensionCallback(androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String category
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String DEFAULT_ICON
com.mapbox.mapboxsdk.maps.widgets.CompassView: void setEnabled(boolean)
androidx.recyclerview.widget.StaggeredGridLayoutManager: StaggeredGridLayoutManager(android.content.Context,android.util.AttributeSet,int,int)
com.google.android.material.button.MaterialButton: void setRippleColor(android.content.res.ColorStateList)
androidx.appcompat.widget.AbsActionBarView: void setVisibility(int)
androidx.appcompat.widget.SearchView$SearchAutoComplete: SearchView$SearchAutoComplete(android.content.Context,android.util.AttributeSet)
com.google.gson.JsonElement: java.lang.String getAsString()
io.flutter.view.AccessibilityViewEmbedder: java.util.Map embeddedViewToDisplayBounds
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readInboxStyleInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map,com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation)
androidx.appcompat.widget.Toolbar: androidx.appcompat.widget.ActionMenuPresenter getOuterActionMenuPresenter()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String COLOR_RED
com.mapbox.mapboxsdk.maps.renderer.egl.EGLConfigChooser$DepthStencilFormat: com.mapbox.mapboxsdk.maps.renderer.egl.EGLConfigChooser$DepthStencilFormat[] values()
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.EmbeddingInterfaceCompat getEmbeddingExtension()
androidx.appcompat.widget.Toolbar: int getCurrentContentInsetStart()
com.mapbox.mapboxsdk.style.layers.HeatmapLayer
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: android.app.Activity activity
android.support.v4.media.session.MediaSessionCompat$QueueItem: android.os.Parcelable$Creator CREATOR
com.mapbox.geojson.constants.GeoJsonConstants: double MAX_LATITUDE
com.google.android.material.appbar.AppBarLayout$BaseBehavior
androidx.appcompat.widget.AlertDialogLayout
com.mapbox.mapboxsdk.style.layers.TransitionOptions
com.google.gson.JsonElement: boolean isJsonArray()
androidx.appcompat.widget.ViewStubCompat: android.view.LayoutInflater getLayoutInflater()
com.mapbox.mapboxsdk.Mapbox: Mapbox(android.content.Context,java.lang.String,com.mapbox.mapboxsdk.util.TileServerOptions)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: androidx.core.util.Consumer $consumer
com.mapbox.geojson.Feature: java.lang.String getStringProperty(java.lang.String)
com.google.android.material.appbar.HeaderBehavior: HeaderBehavior(android.content.Context,android.util.AttributeSet)
kotlin.jvm.internal.CallableReference: CallableReference()
com.google.gson.JsonElement: int getAsInt()
com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeAddImages(com.mapbox.mapboxsdk.maps.Image[])
io.flutter.embedding.android.FlutterSplashView$SavedState: void writeToParcel(android.os.Parcel,int)
io.flutter.embedding.engine.FlutterOverlaySurface: FlutterOverlaySurface(int,android.view.Surface)
io.flutter.embedding.android.FlutterView: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()
androidx.window.embedding.ActivityRule: ActivityRule(java.util.Set,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)
androidx.window.layout.FoldingFeature$OcclusionType$Companion
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation: java.lang.Boolean htmlFormatSummaryText
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory registerSubtype(java.lang.Class)
com.mapbox.mapboxsdk.util.TileServerOptions: java.lang.String spritesVersionPrefix
com.dexterous.flutterlocalnotifications.models.Time: java.lang.String SECOND
androidx.recyclerview.widget.RecyclerView: int getBaseline()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String icon
com.mapbox.mapboxsdk.maps.NativeMapView: android.graphics.PointF nativePixelForLatLng(double,double)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean animating
androidx.window.layout.SidecarAdapter: java.lang.String TAG
androidx.window.embedding.SplitController: SplitController()
com.mapbox.geojson.ListOfDoublesCoordinatesTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
org.threeten.bp.LocalDate: java.lang.Object writeReplace()
androidx.appcompat.widget.AppCompatImageButton: void setSupportImageTintList(android.content.res.ColorStateList)
com.google.gson.JsonObject: JsonObject()
org.threeten.bp.zone.ZoneOffsetTransition
com.google.android.material.internal.NavigationMenuItemView: void setChecked(boolean)
org.threeten.bp.DayOfWeek: org.threeten.bp.DayOfWeek valueOf(java.lang.String)
com.mapbox.mapboxsdk.geometry.LatLngQuad
com.mapbox.geojson.BoundingBox: java.lang.String toString()
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer
androidx.media.AudioAttributesImplApi26Parcelizer: void write(androidx.media.AudioAttributesImplApi26,androidx.versionedparcelable.VersionedParcel)
com.mapbox.mapboxsdk.maps.Image: float[] content
androidx.fragment.app.FragmentState: android.os.Parcelable$Creator CREATOR
com.google.android.gms.common.internal.ConnectionTelemetryConfiguration: android.os.Parcelable$Creator CREATOR
com.google.android.material.stateful.ExtendableSavedState: android.os.Parcelable$Creator CREATOR
androidx.window.layout.SidecarCompat$Companion: android.os.IBinder getActivityWindowToken$window_release(android.app.Activity)
com.mapbox.geojson.utils.PolylineUtils: double SIMPLIFY_DEFAULT_TOLERANCE
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)
com.mapbox.mapboxsdk.log.Logger: void log(int,java.lang.String,java.lang.String)
androidx.window.embedding.SplitPairRule: java.util.Set filters
androidx.appcompat.widget.Toolbar: int getContentInsetEnd()
com.mapbox.mapboxsdk.style.layers.HillshadeLayer: java.lang.Object nativeGetHillshadeShadowColor()
com.mapbox.mapboxsdk.style.sources.Source: java.lang.Integer nativeGetMaxOverscaleFactorForParentTiles()
com.mapbox.geojson.MultiPolygon: com.google.gson.TypeAdapter typeAdapter(com.google.gson.Gson)
com.google.android.material.floatingactionbutton.FloatingActionButton: void setBackgroundColor(int)
androidx.appcompat.widget.AppCompatImageView: void setImageDrawable(android.graphics.drawable.Drawable)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CHANNEL_ID
kotlin.jvm.internal.FunctionReferenceImpl: FunctionReferenceImpl(int,kotlin.reflect.KDeclarationContainer,java.lang.String,java.lang.String)
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.FoldingFeature$OcclusionType getOcclusionType()
com.google.android.material.internal.NavigationMenuItemView: void setIconPadding(int)
kotlinx.coroutines.scheduling.CoroutineScheduler: long controlState
com.mapbox.geojson.Point: double latitude()
androidx.constraintlayout.widget.ConstraintLayout: ConstraintLayout(android.content.Context,android.util.AttributeSet)
com.mapbox.geojson.MultiPolygon: java.lang.String toJson()
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetTextRotationAlignment()
io.flutter.embedding.android.FlutterView: io.flutter.embedding.engine.FlutterEngine getAttachedFlutterEngine()
io.flutter.embedding.engine.FlutterJNI: java.util.concurrent.locks.ReentrantReadWriteLock shellHolderLock
com.mapbox.mapboxsdk.style.layers.RasterLayer: void nativeSetRasterSaturationTransition(long,long)
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String groupId
com.mapbox.mapboxsdk.style.layers.RasterLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetRasterContrastTransition()
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.ExtensionEmbeddingBackend access$getGlobalInstance$cp()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation getDefaultStyleInformation(java.util.Map)
androidx.constraintlayout.widget.Barrier
com.mapbox.geojson.MultiPolygon: java.lang.String type
okhttp3.internal.http2.ErrorCode: okhttp3.internal.http2.ErrorCode[] values()
com.mapbox.mapboxsdk.style.layers.CustomLayer: CustomLayer(long)
com.mapbox.mapboxsdk.snapshotter.MapSnapshot: void initialize()
androidx.appcompat.view.menu.ListMenuItemView: void setSubMenuArrowVisible(boolean)
com.mapbox.geojson.Feature: com.mapbox.geojson.Feature fromGeometry(com.mapbox.geojson.Geometry,com.google.gson.JsonObject)
androidx.window.layout.EmptyDecorator
com.google.android.material.button.MaterialButton: void setCornerRadius(int)
io.flutter.embedding.android.FlutterView: void setWindowInfoListenerDisplayFeatures(androidx.window.layout.WindowLayoutInfo)
androidx.window.layout.WindowInfoTracker
okhttp3.TlsVersion: okhttp3.TlsVersion[] values()
org.threeten.bp.ZonedDateTime
androidx.appcompat.widget.AppCompatEditText: void setBackgroundDrawable(android.graphics.drawable.Drawable)
com.mapbox.geojson.utils.GeoJsonUtils: double trim(double)
androidx.window.embedding.SplitPairRule: boolean equals(java.lang.Object)
androidx.window.core.Version: androidx.window.core.Version access$getVERSION_0_1$cp()
kotlinx.coroutines.InvokeOnCompletion
com.mapbox.mapboxsdk.maps.NativeMapView: void onWillStartRenderingFrame()
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat valueOf(java.lang.String)
androidx.appcompat.widget.AppCompatTextView: void setTextFuture(java.util.concurrent.Future)
com.google.android.gms.signin.internal.zai: android.os.Parcelable$Creator CREATOR
org.threeten.bp.chrono.IsoEra: org.threeten.bp.chrono.IsoEra valueOf(java.lang.String)
com.mapbox.mapboxsdk.util.DefaultStyle: int version
androidx.window.embedding.SplitRule: int minWidth
com.mapbox.geojson.MultiLineString: java.lang.String type
com.mapbox.mapboxsdk.style.types.FormattedSection: java.lang.String text
com.google.android.material.transformation.FabTransformationScrimBehavior: FabTransformationScrimBehavior(android.content.Context,android.util.AttributeSet)
com.mapbox.mapboxsdk.style.sources.Source: java.lang.Boolean isVolatile()
kotlinx.coroutines.internal.LockFreeTaskQueueCore
io.flutter.embedding.engine.FlutterJNI: void onPreEngineRestart()
androidx.appcompat.view.menu.ListMenuItemView: void setCheckable(boolean)
com.google.firebase.iid.FirebaseInstanceIdReceiver: FirebaseInstanceIdReceiver()
io.flutter.embedding.engine.FlutterJNI: io.flutter.plugin.platform.PlatformViewsController platformViewsController
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: android.view.WindowInsets onProgress(android.view.WindowInsets,java.util.List)
com.mapbox.mapboxsdk.style.layers.LineLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetLineOffsetTransition()
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeSetDebug(boolean)
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails from(java.util.Map)
androidx.window.layout.FoldingFeature$Orientation: androidx.window.layout.FoldingFeature$Orientation VERTICAL
com.mapbox.mapboxsdk.text.LocalGlyphRasterizer: android.graphics.Paint paint
androidx.window.core.Version$Companion: androidx.window.core.Version getVERSION_1_0()
com.mapbox.geojson.GeoJson: java.lang.String type()
com.mapbox.mapboxsdk.location.LocationIndicatorLayer: java.lang.Object nativeGetAccuracyRadiusColor()
com.mapbox.mapboxsdk.style.layers.SymbolLayer: void nativeSetIconHaloWidthTransition(long,long)
com.mapbox.mapboxsdk.annotations.BubbleLayout: float getArrowPosition()
com.mapbox.mapboxsdk.http.NativeHttpRequest: void onResponse(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[])
kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow valueOf(java.lang.String)
com.mapbox.mapboxsdk.maps.renderer.glsurfaceview.MapboxGLSurfaceView: boolean getPreserveEGLContextOnPause()
com.mapbox.mapboxsdk.annotations.BubbleLayout: BubbleLayout(android.content.Context,android.util.AttributeSet)
com.mapbox.geojson.MultiPolygon: com.mapbox.geojson.BoundingBox bbox
androidx.lifecycle.CompositeGeneratedAdaptersObserver
androidx.core.widget.NestedScrollView$SavedState: android.os.Parcelable$Creator CREATOR
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeSetMinPitch(double)
com.google.gson.JsonObject
com.mapbox.geojson.Point: java.lang.String toString()
androidx.window.layout.DisplayCompatHelperApi28: int safeInsetBottom(android.view.DisplayCutout)
androidx.constraintlayout.widget.Barrier: void setType(int)
org.threeten.bp.YearMonth: java.lang.Object writeReplace()
com.mapbox.mapboxsdk.offline.OfflineRegion: void updateOfflineRegionMetadata(byte[],com.mapbox.mapboxsdk.offline.OfflineRegion$OfflineRegionUpdateMetadataCallback)
com.google.android.material.internal.NavigationMenuItemView: void setTitle(java.lang.CharSequence)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: void initialize(java.lang.String,java.lang.String)
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: void setLastInfo(java.util.List)
androidx.appcompat.widget.AppCompatEditText: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
androidx.appcompat.widget.ContentFrameLayout: ContentFrameLayout(android.content.Context,android.util.AttributeSet)
org.threeten.bp.ZoneOffset: java.lang.Object writeReplace()
androidx.window.layout.HardwareFoldingFeature: boolean equals(java.lang.Object)
com.mapbox.mapboxsdk.style.layers.HeatmapLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetHeatmapIntensityTransition()
io.flutter.embedding.android.FlutterImageView
com.mapbox.mapboxsdk.style.layers.BackgroundLayer: void nativeSetBackgroundPatternTransition(long,long)
androidx.window.embedding.EmbeddingCompat$Companion
androidx.window.R$styleable: int SplitPairFilter_secondaryActivityName
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: java.lang.Boolean htmlFormatSummaryText
com.mapbox.mapboxsdk.style.layers.Layer: void finalize()
io.flutter.embedding.engine.FlutterJNI: void registerTexture(long,io.flutter.embedding.engine.renderer.SurfaceTextureWrapper)
androidx.window.embedding.ActivityFilter
androidx.appcompat.widget.Toolbar: void setTitleTextColor(int)
com.mapbox.geojson.PointAsCoordinatesTypeAdapter: void write(com.google.gson.stream.JsonWriter,com.mapbox.geojson.Point)
androidx.appcompat.widget.AlertDialogLayout: AlertDialogLayout(android.content.Context,android.util.AttributeSet)
com.google.gson.JsonPrimitive: boolean equals(java.lang.Object)
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeAddLayer(long,java.lang.String)
com.mapbox.mapboxsdk.annotations.BasePointCollection: float alpha
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String id
androidx.constraintlayout.widget.ConstraintLayout: void setConstraintSet(androidx.constraintlayout.widget.ConstraintSet)
com.mapbox.mapboxsdk.utils.StringUtils: StringUtils()
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String LED_COLOR_GREEN
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceWindowChanged(long,android.view.Surface)
com.google.gson.JsonArray: void add(java.lang.Character)
io.flutter.view.AccessibilityViewEmbedder: android.view.View platformViewOfNode(int)
com.mapbox.geojson.GeometryCollection$GsonTypeAdapter: void write(com.google.gson.stream.JsonWriter,com.mapbox.geojson.GeometryCollection)
com.mapbox.mapboxsdk.Mapbox: java.lang.String getApiKey()
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: androidx.window.sidecar.SidecarInterface$SidecarCallback callbackInterface
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_DESTROY
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: java.lang.Boolean hideExpandedLargeIcon
com.google.android.material.button.MaterialButton: void setIconTint(android.content.res.ColorStateList)
org.threeten.bp.chrono.ThaiBuddhistChronology
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void createNotificationChannel(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
androidx.window.layout.WindowMetricsCalculator
com.google.android.material.bottomappbar.BottomAppBar: void setHideOnScroll(boolean)
io.flutter.embedding.engine.FlutterJNI: io.flutter.plugin.localization.LocalizationPlugin localizationPlugin
io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap decodeImage(java.nio.ByteBuffer,long)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetTextAllowOverlap()
kotlinx.coroutines.JobCancellingNode
com.google.android.datatransport.cct.internal.ClientInfo$ClientType: com.google.android.datatransport.cct.internal.ClientInfo$ClientType valueOf(java.lang.String)
kotlin.jvm.internal.CallableReference: java.util.List getParameters()
androidx.coordinatorlayout.widget.CoordinatorLayout: void setStatusBarBackgroundResource(int)
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1
com.google.android.datatransport.runtime.backends.TransportBackendDiscovery
com.mapbox.mapboxsdk.style.layers.CircleLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetCircleRadiusTransition()
com.google.gson.JsonObject: java.util.Set entrySet()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPreDestroyed(android.app.Activity)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CONVERSATION_TITLE
com.google.gson.JsonElement: double getAsDouble()
androidx.window.layout.WindowInfoTrackerImpl$Companion: WindowInfoTrackerImpl$Companion()
androidx.appcompat.widget.AppCompatImageView: void setBackgroundDrawable(android.graphics.drawable.Drawable)
kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _reusableCancellableContinuation
org.threeten.bp.ZoneRegion: java.lang.Object writeReplace()
com.mapbox.mapboxsdk.annotations.BasePointCollection: java.util.List points
com.dexterous.flutterlocalnotifications.NotificationStyle: com.dexterous.flutterlocalnotifications.NotificationStyle Media
androidx.window.embedding.EmbeddingAdapter
io.flutter.embedding.android.FlutterSplashView$SavedState: android.os.Bundle access$700(io.flutter.embedding.android.FlutterSplashView$SavedState)
androidx.appcompat.widget.Toolbar: int getTitleMarginTop()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String body
androidx.window.layout.ExtensionInterfaceCompat: void onWindowLayoutChangeListenerAdded(android.app.Activity)
com.mapbox.geojson.MultiPolygon: java.lang.String type()
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: void invokeSuspend$lambda-0(kotlinx.coroutines.channels.Channel,androidx.window.layout.WindowLayoutInfo)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String REPEAT_TIME
androidx.appcompat.widget.Toolbar: int getCurrentContentInsetEnd()
kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart[] values()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setMessagingStyle(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeRotateBy(double,double,double,double,long)
com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory$1: java.util.Map val$subtypeToDelegate
kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: int getStrokeColor()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String channelDescription
androidx.window.embedding.EmbeddingBackend: void unregisterRule(androidx.window.embedding.EmbeddingRule)
com.google.android.material.button.MaterialButton: void setBackgroundDrawable(android.graphics.drawable.Drawable)
com.mapbox.mapboxsdk.style.light.Light: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetColorTransition()
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation: java.lang.String contentTitle
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: java.util.concurrent.locks.ReentrantLock lock
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation: java.lang.String summaryText
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_NOTIFICATION_APP_LAUNCH_DETAILS_METHOD
androidx.appcompat.widget.Toolbar: int getContentInsetEndWithActions()
com.mapbox.mapboxsdk.storage.FileSource: void setApiKey(java.lang.String)
com.google.firebase.FirebaseCommonRegistrar
androidx.appcompat.widget.AppCompatSpinner: void setDropDownWidth(int)
androidx.appcompat.widget.AppCompatSpinner: java.lang.CharSequence getPrompt()
androidx.window.layout.HardwareFoldingFeature: boolean isSeparating()
com.google.gson.JsonArray: void add(com.google.gson.JsonElement)
com.mapbox.mapboxsdk.maps.NativeMapView: long[] nativeQueryPointAnnotations(android.graphics.RectF)
com.mapbox.geojson.MultiLineString: java.lang.String TYPE
android.support.v4.media.MediaMetadataCompat
com.mapbox.mapboxsdk.geometry.LatLngBounds
com.mapbox.geojson.LineString: java.lang.String toJson()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setTimeoutAfter(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
com.mapbox.mapboxsdk.style.types.FormattedSection: java.lang.Object[] toArray()
androidx.window.embedding.SplitRule: int getMinWidth()
androidx.window.layout.HardwareFoldingFeature$Type: androidx.window.layout.HardwareFoldingFeature$Type$Companion Companion
com.dexterous.flutterlocalnotifications.models.DateTimeComponents
com.mapbox.mapboxsdk.style.sources.GeoJsonSource: void nativeSetFeature(com.mapbox.geojson.Feature)
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents DayOfWeekAndTime
org.threeten.bp.chrono.Chronology: java.lang.Object writeReplace()
androidx.appcompat.widget.LinearLayoutCompat: int getDividerPadding()
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference: HiddenLifecycleReference(androidx.lifecycle.Lifecycle)
com.mapbox.geojson.FeatureCollection: com.mapbox.geojson.FeatureCollection fromFeature(com.mapbox.geojson.Feature)
androidx.appcompat.widget.ContentFrameLayout: android.util.TypedValue getFixedHeightMajor()
android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper: android.os.Parcelable$Creator CREATOR
androidx.window.layout.DisplayFeature: android.graphics.Rect getBounds()
androidx.window.layout.ActivityCompatHelperApi30: android.graphics.Rect maximumWindowBounds(android.app.Activity)
com.google.android.material.floatingactionbutton.FloatingActionButton: void setImageDrawable(android.graphics.drawable.Drawable)
com.mapbox.mapboxsdk.maps.Image: int height
androidx.window.layout.HardwareFoldingFeature: android.graphics.Rect getBounds()
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object L$1
com.mapbox.mapboxsdk.util.TileServerOptions: java.lang.String tileDomainName
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean needsSave
com.dexterous.flutterlocalnotifications.models.BitmapSource: com.dexterous.flutterlocalnotifications.models.BitmapSource ByteArray
com.mapbox.geojson.MultiPolygon
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeUpdatePolygon(long,com.mapbox.mapboxsdk.annotations.Polygon)
androidx.constraintlayout.widget.ConstraintLayout: void setId(int)
com.dexterous.flutterlocalnotifications.models.IconSource: IconSource(java.lang.String,int)
androidx.coordinatorlayout.widget.CoordinatorLayout: int getNestedScrollAxes()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPreStopped(android.app.Activity)
androidx.versionedparcelable.ParcelImpl
org.threeten.bp.chrono.ThaiBuddhistDate
com.mapbox.geojson.Point$GsonTypeAdapter
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource[] $VALUES
androidx.window.embedding.EmbeddingAdapter: java.util.List translate(java.util.List)
androidx.window.embedding.EmbeddingBackend: void registerSplitListenerForActivity(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
com.google.android.material.internal.NavigationMenuItemView: void setHorizontalPadding(int)
androidx.core.app.ComponentActivity: ComponentActivity()
androidx.window.layout.SidecarCompat$FirstAttachAdapter: androidx.window.layout.SidecarCompat sidecarCompat
androidx.core.content.ContextCompat$Api21Impl: java.io.File getCodeCacheDir(android.content.Context)
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void nativeSetSemanticsEnabled(long,boolean)
com.mapbox.mapboxsdk.style.layers.RasterLayer: java.lang.Object nativeGetRasterBrightnessMin()
kotlin.jvm.internal.FunctionReference: FunctionReference(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)
com.mapbox.geojson.MultiPolygon: com.mapbox.geojson.MultiPolygon fromLngLats(java.util.List)
com.google.android.gms.common.internal.RootTelemetryConfiguration: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer color
io.flutter.embedding.android.FlutterImageView: android.view.Surface getSurface()
com.mapbox.mapboxsdk.location.LocationIndicatorLayer: void nativeSetTopImageSizeTransition(long,long)
androidx.versionedparcelable.CustomVersionedParcelable
org.threeten.bp.MonthDay: java.lang.Object readResolve()
com.mapbox.geojson.ListOfListOfPointCoordinatesTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.util.List)
com.mapbox.mapboxsdk.maps.NativeMapView: boolean nativeIsFullyLoaded()
androidx.window.layout.HardwareFoldingFeature: HardwareFoldingFeature(androidx.window.core.Bounds,androidx.window.layout.HardwareFoldingFeature$Type,androidx.window.layout.FoldingFeature$State)
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: void setLastInfo(androidx.window.layout.WindowLayoutInfo)
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _next
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String URI
com.dexterous.flutterlocalnotifications.models.PersonDetails: java.lang.Object icon
org.threeten.bp.OffsetDateTime: java.lang.Object writeReplace()
com.google.android.material.floatingactionbutton.FloatingActionButton$BaseBehavior
kotlin.jvm.internal.CallableReference: kotlin.reflect.KVisibility getVisibility()
io.flutter.embedding.android.FlutterSplashView$SavedState: java.lang.String access$600(io.flutter.embedding.android.FlutterSplashView$SavedState)
com.mapbox.geojson.ListOfListOfPointCoordinatesTypeAdapter: ListOfListOfPointCoordinatesTypeAdapter()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void getNotificationChannels(io.flutter.plugin.common.MethodChannel$Result)
androidx.window.embedding.SplitRule: int getLayoutDirection()
androidx.window.layout.SidecarCompat: androidx.window.layout.SidecarCompat$Companion Companion
androidx.window.embedding.ActivityStack
androidx.window.embedding.SplitInfo: SplitInfo(androidx.window.embedding.ActivityStack,androidx.window.embedding.ActivityStack,float)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SOUND
com.mapbox.geojson.BaseGeometryTypeAdapter: com.google.gson.TypeAdapter boundingBoxAdapter
androidx.window.embedding.SplitInfo: java.lang.String toString()
com.google.android.material.floatingactionbutton.FloatingActionButton: int getExpandedComponentIdHint()
androidx.appcompat.widget.ActionMenuView: int getWindowAnimations()
kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext$Key getKey()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String PAYLOAD
com.mapbox.mapboxsdk.maps.renderer.MapRenderer: void nativeOnSurfaceDestroyed()
androidx.media.AudioAttributesCompatParcelizer: AudioAttributesCompatParcelizer()
com.google.android.material.bottomappbar.BottomAppBar: void setFabCradleRoundedCornerRadius(float)
com.mapbox.mapboxsdk.maps.NativeMapView: java.lang.String nativeGetStyleUrl()
androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateActivityPairPredicates(java.util.Set)
com.dexterous.flutterlocalnotifications.models.Time: java.lang.String HOUR
com.mapbox.mapboxsdk.Mapbox: com.mapbox.mapboxsdk.Mapbox getInstance(android.content.Context)
androidx.appcompat.widget.AppCompatEditText: void setBackgroundResource(int)
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness[] values()
io.flutter.embedding.engine.FlutterJNI: void init(android.content.Context,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,long)
androidx.window.layout.SidecarWindowBackend: void getWindowLayoutChangeCallbacks$annotations()
com.mapbox.mapboxsdk.style.light.Light: com.mapbox.mapboxsdk.style.light.Position nativeGetPosition()
androidx.window.layout.FoldingFeature: boolean isSeparating()
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: java.lang.String description
com.google.android.material.floatingactionbutton.FloatingActionButton: int getSizeDimension()
kotlinx.coroutines.channels.Closed
com.mapbox.mapboxsdk.style.layers.FillLayer: java.lang.Object nativeGetFillTranslate()
com.mapbox.geojson.Feature: Feature(java.lang.String,com.mapbox.geojson.BoundingBox,java.lang.String,com.mapbox.geojson.Geometry,com.google.gson.JsonObject)
com.mapbox.mapboxsdk.Mapbox: android.content.Context getApplicationContext()
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.Boolean showBadge
com.mapbox.mapboxsdk.snapshotter.MapSnapshotter: void finalize()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String BODY
com.mapbox.mapboxsdk.style.layers.LineLayer: java.lang.Object nativeGetLineDasharray()
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: java.lang.Object largeIcon
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.Boolean sendNotificationPayloadMessage(android.content.Intent)
com.dexterous.flutterlocalnotifications.utils.BooleanUtils: boolean getValue(java.lang.Boolean)
com.mapbox.geojson.MultiLineString$GsonTypeAdapter: MultiLineString$GsonTypeAdapter(com.google.gson.Gson)
com.google.gson.JsonPrimitive: short getAsShort()
com.mapbox.geojson.MultiLineString: int hashCode()
com.mapbox.geojson.Feature: java.lang.String TYPE
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void removeNotificationFromCache(android.content.Context,java.lang.Integer)
com.mapbox.mapboxsdk.offline.OfflineRegion
com.mapbox.mapboxsdk.style.sources.CustomGeometrySource: void nativeInvalidateTile(int,int,int)
com.google.android.gms.maps.model.CircleOptions: android.os.Parcelable$Creator CREATOR
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetIconOpacity()
com.mapbox.geojson.utils.PolylineUtils: java.util.List simplify(java.util.List,boolean)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void zonedScheduleNextNotificationMatchingDateComponents(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
com.google.android.material.transformation.FabTransformationSheetBehavior
androidx.window.layout.WindowMetricsCalculator$Companion$reset$1: WindowMetricsCalculator$Companion$reset$1()
androidx.window.layout.HardwareFoldingFeature$Companion: HardwareFoldingFeature$Companion()
com.mapbox.geojson.LineString: com.google.gson.TypeAdapter typeAdapter(com.google.gson.Gson)
io.flutter.view.AccessibilityViewEmbedder: void setFlutterNodesTranslateBounds(android.view.accessibility.AccessibilityNodeInfo,android.graphics.Rect,android.view.accessibility.AccessibilityNodeInfo)
com.mapbox.mapboxsdk.style.light.Light: void nativeSetPosition(com.mapbox.mapboxsdk.style.light.Position)
androidx.appcompat.widget.Toolbar: void setOnMenuItemClickListener(androidx.appcompat.widget.Toolbar$OnMenuItemClickListener)
com.mapbox.geojson.MultiLineString: boolean equals(java.lang.Object)
kotlinx.coroutines.InvokeOnCancelling: int _invoked
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: void addWindowLayoutInfoListener(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
com.google.android.material.floatingactionbutton.FloatingActionButton: android.content.res.ColorStateList getSupportImageTintList()
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchSemanticsAction(long,int,int,java.nio.ByteBuffer,int)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: BaseContinuationImpl(kotlin.coroutines.Continuation)
androidx.appcompat.widget.AppCompatCheckBox: void setButtonDrawable(int)
androidx.window.R$styleable: int[] ActivityRule
com.mapbox.mapboxsdk.http.NativeHttpRequest: long nativePtr
android.support.v4.app.RemoteActionCompatParcelizer: void write(androidx.core.app.RemoteActionCompat,androidx.versionedparcelable.VersionedParcel)
com.mapbox.mapboxsdk.maps.NativeMapView: com.mapbox.mapboxsdk.geometry.LatLng nativeLatLngForPixel(float,float)
androidx.appcompat.widget.AppCompatAutoCompleteTextView: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
com.google.firebase.installations.FirebaseInstallationsRegistrar
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.Integer importance
androidx.window.layout.SidecarCompat$DistinctElementCallback: java.util.concurrent.locks.ReentrantLock lock
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterOverlaySurface createOverlaySurface()
com.mapbox.mapboxsdk.style.layers.FillLayer: void initialize(java.lang.String,java.lang.String)
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails
androidx.window.core.Version: java.lang.String VERSION_PATTERN_STRING
androidx.appcompat.widget.AppCompatCheckedTextView: void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)
io.flutter.plugins.imagepicker.ImagePickerFileProvider: ImagePickerFileProvider()
androidx.appcompat.app.AppCompatActivity: AppCompatActivity()
io.flutter.embedding.android.FlutterSplashView$SavedState: android.os.Parcelable$Creator CREATOR
com.mapbox.mapboxsdk.geometry.LatLngQuad: com.mapbox.mapboxsdk.geometry.LatLng bottomLeft
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness valueOf(java.lang.String)
androidx.window.embedding.EmbeddingBackend: java.util.Set getSplitRules()
io.flutter.plugin.platform.SingleViewPresentation: android.content.Context outerContext
androidx.window.layout.SidecarWindowBackend: androidx.window.layout.ExtensionInterfaceCompat windowExtension
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetTextIgnorePlacement()
androidx.appcompat.widget.AppCompatImageButton: void setSupportBackgroundTintList(android.content.res.ColorStateList)
io.flutter.embedding.engine.FlutterJNI: void requestDartDeferredLibrary(int)
com.mapbox.geojson.MultiPoint: java.util.List coordinates
androidx.appcompat.widget.AppCompatSpinner: void setPrompt(java.lang.CharSequence)
kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object _state
com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory: java.util.Map access$300(com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory)
com.mapbox.mapboxsdk.net.NativeConnectivityListener: void initialize()
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void attachToGLContext(int)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetTextLetterSpacing()
com.mapbox.mapboxsdk.style.layers.FillExtrusionLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetFillExtrusionBaseTransition()
com.mapbox.mapboxsdk.offline.OfflineRegion$OfflineRegionObserver
com.mapbox.mapboxsdk.style.sources.Source: java.lang.String getAttribution()
com.mapbox.mapboxsdk.offline.OfflineRegion$OfflineRegionUpdateMetadataCallback
com.mapbox.mapboxsdk.maps.NativeMapView: void onDidFailLoadingMap(java.lang.String)
com.google.android.material.floatingactionbutton.FloatingActionButton$Behavior: FloatingActionButton$Behavior(android.content.Context,android.util.AttributeSet)
com.mapbox.mapboxsdk.style.sources.Source: void setPrefetchZoomDelta(java.lang.Integer)
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation: java.lang.String contentTitle
kotlinx.coroutines.scheduling.CoroutineScheduler: int _isTerminated
com.mapbox.geojson.Point: com.mapbox.geojson.BoundingBox bbox
com.mapbox.mapboxsdk.text.LocalGlyphRasterizer
com.mapbox.geojson.MultiPolygon: java.util.List coordinates()
androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Rect computeWindowBoundsN$window_release(android.app.Activity)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: int overlayInsetTypes
com.google.android.material.appbar.AppBarLayout: int getDownNestedScrollRange()
com.mapbox.geojson.MultiPolygon$GsonTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
com.mapbox.mapboxsdk.annotations.BubbleLayout: com.mapbox.mapboxsdk.annotations.ArrowDirection getArrowDirection()
com.google.android.material.floatingactionbutton.FloatingActionButton: void setCustomSize(int)
io.flutter.embedding.engine.FlutterJNI: boolean isAttached()
com.mapbox.mapboxsdk.offline.OfflineRegion$OfflineRegionUpdateMetadataCallback: void onUpdate(byte[])
com.mapbox.mapboxsdk.style.layers.LineLayer: java.lang.Object nativeGetLineOffset()
com.mapbox.mapboxsdk.util.TileServerOptions: java.lang.String sourceDomainName
com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout: BaseTransientBottomBar$SnackbarBaseLayout(android.content.Context,android.util.AttributeSet)
androidx.appcompat.widget.FitWindowsFrameLayout
com.dexterous.flutterlocalnotifications.models.NotificationDetails: NotificationDetails()
com.google.android.material.behavior.HideBottomViewOnScrollBehavior: HideBottomViewOnScrollBehavior(android.content.Context,android.util.AttributeSet)
com.mapbox.geojson.LineString: java.lang.String TYPE
com.google.gson.JsonElement: java.math.BigInteger getAsBigInteger()
com.mapbox.geojson.Point: com.google.gson.TypeAdapter typeAdapter(com.google.gson.Gson)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetIconSize()
androidx.window.layout.FoldingFeature$State: java.lang.String description
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CANCEL_ID
com.mapbox.mapboxsdk.style.layers.FillExtrusionLayer: void initialize(java.lang.String,java.lang.String)
androidx.window.core.Version: java.lang.String getDescription()
androidx.window.core.Version: kotlin.Lazy bigInteger$delegate
androidx.core.widget.NestedScrollView: NestedScrollView(android.content.Context,android.util.AttributeSet)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CHANNEL_DESCRIPTION
com.mapbox.geojson.Feature: java.lang.String type
com.mapbox.mapboxsdk.style.layers.HillshadeLayer: void nativeSetHillshadeHighlightColorTransition(long,long)
androidx.media.AudioAttributesImpl
androidx.cardview.widget.CardView: int getContentPaddingLeft()
androidx.window.layout.WindowInfoTrackerImpl: int BUFFER_CAPACITY
org.threeten.bp.chrono.HijrahEra
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setTrimPathOffset(float)
androidx.appcompat.app.AppCompatViewInflater: androidx.appcompat.widget.AppCompatImageButton createImageButton(android.content.Context,android.util.AttributeSet)
com.mapbox.mapboxsdk.style.layers.LineLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetLineWidthTransition()
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String description
com.mapbox.geojson.ListOfPointCoordinatesTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
androidx.appcompat.widget.Toolbar: void setCollapsible(boolean)
com.mapbox.mapboxsdk.style.layers.FillExtrusionLayer: void nativeSetFillExtrusionTranslateTransition(long,long)
com.mapbox.mapboxsdk.style.layers.FillExtrusionLayer: void nativeSetFillExtrusionHeightTransition(long,long)
org.threeten.bp.format.ResolverStyle: org.threeten.bp.format.ResolverStyle[] values()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String getNextFireDateMatchingDateTimeComponents(com.dexterous.flutterlocalnotifications.models.NotificationDetails)
kotlinx.coroutines.JobSupport: java.lang.Object _state
androidx.appcompat.widget.SearchView: SearchView(android.content.Context,android.util.AttributeSet,int)
com.mapbox.mapboxsdk.util.TileServerOptions: java.lang.String apiKeyParameterName
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper
androidx.appcompat.widget.DialogTitle
androidx.window.layout.SidecarAdapter: SidecarAdapter()
androidx.window.R$styleable: int[] SplitPlaceholderRule
androidx.constraintlayout.widget.Barrier: int getType()
androidx.core.content.ContextCompat$Api23Impl: int getColor(android.content.Context,int)
com.google.android.gms.maps.model.CameraPosition: android.os.Parcelable$Creator CREATOR
androidx.window.layout.SidecarCompat$DistinctElementCallback: java.util.WeakHashMap activityWindowLayoutInfo
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetIconImage()
androidx.window.layout.WindowMetricsCalculator$Companion
androidx.appcompat.widget.ContentFrameLayout: void setAttachListener(androidx.appcompat.widget.ContentFrameLayout$OnAttachListener)
com.mapbox.mapboxsdk.style.light.Light: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetIntensityTransition()
com.google.firebase.iid.FirebaseInstanceIdReceiver
com.mapbox.mapboxsdk.storage.FileSource: void initialize(java.lang.String,java.lang.String,com.mapbox.mapboxsdk.util.TileServerOptions)
androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowMetricsCalculator windowMetricsCalculator
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SCHEDULED_DATE_TIME
androidx.appcompat.view.menu.ListMenuItemView: ListMenuItemView(android.content.Context,android.util.AttributeSet)
androidx.appcompat.widget.Toolbar: int getTitleMarginStart()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.SoundSource soundSource
androidx.window.core.Version: androidx.window.core.Version$Companion Companion
androidx.appcompat.widget.SearchView$SearchAutoComplete: void setImeVisibility(boolean)
com.google.firebase.messaging.FirebaseMessagingRegistrar: java.util.List getComponents()
androidx.window.R$attr: int finishPrimaryWithSecondary
kotlinx.coroutines.scheduling.CoroutineScheduler: long parkedWorkersStack
com.mapbox.geojson.constants.GeoJsonConstants: double MIN_LONGITUDE
com.mapbox.geojson.utils.PolylineUtils
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetTextColor()
com.google.android.material.button.MaterialButton: void setBackgroundResource(int)
kotlinx.coroutines.JobSupport$addLastAtomic$$inlined$addLastIf$1
io.flutter.plugins.firebase.messaging.FlutterFirebaseMessagingReceiver
com.mapbox.mapboxsdk.style.layers.LineLayer: void nativeSetLineDasharrayTransition(long,long)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setTrimPathEnd(float)
org.threeten.bp.LocalDate
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Long calledAt
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _removedRef
com.mapbox.mapboxsdk.location.LocationIndicatorLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetShadowImageSizeTransition()
com.google.android.material.circularreveal.CircularRevealFrameLayout: void setCircularRevealOverlayDrawable(android.graphics.drawable.Drawable)
androidx.window.R$id
com.google.android.material.floatingactionbutton.FloatingActionButton: void setUseCompatPadding(boolean)
com.mapbox.mapboxsdk.style.layers.HillshadeLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetHillshadeHighlightColorTransition()
com.mapbox.geojson.MultiPolygon$GsonTypeAdapter: com.mapbox.geojson.MultiPolygon read(com.google.gson.stream.JsonReader)
com.mapbox.mapboxsdk.location.LocationIndicatorLayer: void finalize()
com.mapbox.geojson.LineString$GsonTypeAdapter: com.mapbox.geojson.CoordinateContainer createCoordinateContainer(java.lang.String,com.mapbox.geojson.BoundingBox,java.lang.Object)
com.google.gson.JsonArray: java.math.BigInteger getAsBigInteger()
com.mapbox.mapboxsdk.geometry.LatLngQuad: com.mapbox.mapboxsdk.geometry.LatLng topRight
com.mapbox.mapboxsdk.maps.NativeMapView: void onDidFinishRenderingMap(boolean)
com.google.android.material.button.MaterialButton
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker
com.mapbox.geojson.shifter.CoordinateShifter: java.util.List shiftLonLat(double,double)
com.mapbox.mapboxsdk.style.layers.LineLayer: void nativeSetLineGapWidthTransition(long,long)
com.mapbox.geojson.MultiPoint
com.google.gson.JsonPrimitive: java.lang.Number getAsNumber()
android.support.v4.media.MediaMetadataCompat: android.os.Parcelable$Creator CREATOR
androidx.appcompat.widget.AppCompatSpinner: android.content.res.ColorStateList getSupportBackgroundTintList()
androidx.recyclerview.widget.RecyclerView: void setPreserveFocusAfterLayout(boolean)
com.mapbox.mapboxsdk.storage.FileSource: void setTileServerOptions(com.mapbox.mapboxsdk.util.TileServerOptions)
com.mapbox.mapboxsdk.location.LocationIndicatorLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetAccuracyRadiusColorTransition()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback
androidx.constraintlayout.widget.Guideline: void setGuidelineEnd(int)
com.mapbox.mapboxsdk.location.LocationIndicatorLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetBearingImageSizeTransition()
com.mapbox.geojson.MultiPoint: com.google.gson.TypeAdapter typeAdapter(com.google.gson.Gson)
androidx.window.layout.WindowMetricsCalculatorCompat: int getNavigationBarHeight(android.content.Context)
androidx.window.embedding.MatcherUtils: boolean areActivityOrIntentComponentsMatching$window_release(android.app.Activity,android.content.ComponentName)
androidx.constraintlayout.widget.Guideline
com.mapbox.geojson.Point
com.mapbox.geojson.MultiLineString$GsonTypeAdapter: com.mapbox.geojson.CoordinateContainer createCoordinateContainer(java.lang.String,com.mapbox.geojson.BoundingBox,java.lang.Object)
com.mapbox.mapboxsdk.style.light.Light: void nativeSetAnchor(java.lang.String)
com.google.android.material.behavior.SwipeDismissBehavior
com.mapbox.mapboxsdk.style.layers.HillshadeLayer: void initialize(java.lang.String,java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType valueOf(java.lang.String)
com.google.gson.JsonArray: boolean getAsBoolean()
io.flutter.embedding.engine.FlutterJNI: java.util.Set engineLifecycleListeners
androidx.lifecycle.SingleGeneratedAdapterObserver
androidx.core.content.ContextCompat$Api24Impl: boolean isDeviceProtectedStorage(android.content.Context)
com.google.gson.JsonElement: byte getAsByte()
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type: io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type[] values()
com.mapbox.mapboxsdk.style.layers.RasterLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetRasterBrightnessMaxTransition()
com.mapbox.geojson.LineString: java.util.List coordinates
kotlin.jvm.internal.CallableReference: boolean isOpen()
kotlin.coroutines.jvm.internal.BaseContinuationImpl: java.lang.String toString()
androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView: android.content.res.ColorStateList getSupportBackgroundTintList()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LARGE_ICON_BITMAP_SOURCE
androidx.recyclerview.widget.RecyclerView: void setScrollingTouchSlop(int)
com.mapbox.geojson.FeatureCollection
androidx.recyclerview.widget.StaggeredGridLayoutManager$SavedState: android.os.Parcelable$Creator CREATOR
io.flutter.plugins.firebase.core.FlutterFirebasePlugin: com.google.android.gms.tasks.Task didReinitializeFirebaseCore()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String NAME
com.mapbox.mapboxsdk.style.layers.CannotAddLayerException
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsEmoji(int)
androidx.window.core.Version$Companion: androidx.window.core.Version getCURRENT()
com.mapbox.geojson.Polygon: com.mapbox.geojson.BoundingBox bbox
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List getMutators()
com.mapbox.geojson.BoundingBox: com.mapbox.geojson.Point southwest
com.dexterous.flutterlocalnotifications.models.NotificationDetails: long[] vibrationPattern
com.mapbox.geojson.Feature
com.mapbox.mapboxsdk.maps.NativeMapView: com.mapbox.mapboxsdk.style.layers.Layer nativeGetLayer(java.lang.String)
com.google.android.material.internal.ForegroundLinearLayout
androidx.appcompat.view.menu.ListMenuItemView: void setChecked(boolean)
com.mapbox.mapboxsdk.maps.renderer.MapRenderer: com.mapbox.mapboxsdk.maps.MapboxMap$OnFpsChangedListener onFpsChangedListener
com.mapbox.geojson.Polygon: com.google.gson.TypeAdapter typeAdapter(com.google.gson.Gson)
androidx.appcompat.app.AppCompatViewInflater: androidx.appcompat.widget.AppCompatRadioButton createRadioButton(android.content.Context,android.util.AttributeSet)
com.google.firebase.encoders.proto.Protobuf$IntEncoding: com.google.firebase.encoders.proto.Protobuf$IntEncoding valueOf(java.lang.String)
com.mapbox.mapboxsdk.snapshotter.MapSnapshotter: void nativeAddImages(com.mapbox.mapboxsdk.maps.Image[])
androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView: void setBackgroundResource(int)
com.mapbox.geojson.Feature$GsonTypeAdapter: com.google.gson.TypeAdapter jsonObjectTypeAdapter
com.google.android.material.transformation.FabTransformationScrimBehavior: FabTransformationScrimBehavior()
com.google.firebase.installations.FirebaseInstallationsRegistrar: FirebaseInstallationsRegistrar()
androidx.window.layout.WindowMetricsCalculator: androidx.window.layout.WindowMetrics computeCurrentWindowMetrics(android.app.Activity)
androidx.window.R$styleable: int SplitPairRule_splitMinWidth
androidx.media.AudioAttributesImplApi26
io.flutter.embedding.engine.FlutterJNI: FlutterJNI()
com.google.firebase.messaging.FirebaseMessaging: com.google.firebase.messaging.FirebaseMessaging getInstance(com.google.firebase.FirebaseApp)
io.flutter.embedding.engine.FlutterJNI: io.flutter.view.FlutterCallbackInformation nativeLookupCallbackInformation(long)
com.google.android.gms.maps.model.Tile: android.os.Parcelable$Creator CREATOR
com.mapbox.mapboxsdk.style.layers.CircleLayer: java.lang.Object nativeGetCircleTranslate()
com.google.android.material.floatingactionbutton.FloatingActionButton: void setCompatElevationResource(int)
io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap nativeGetBitmap(long)
androidx.window.layout.ExtensionWindowLayoutInfoBackend
com.google.gson.JsonPrimitive: boolean isIntegral(com.google.gson.JsonPrimitive)
androidx.appcompat.widget.ButtonBarLayout: ButtonBarLayout(android.content.Context,android.util.AttributeSet)
androidx.appcompat.app.AppCompatViewInflater: androidx.appcompat.widget.AppCompatSpinner createSpinner(android.content.Context,android.util.AttributeSet)
androidx.appcompat.widget.ActionBarContextView: void setCustomView(android.view.View)
com.mapbox.geojson.FeatureCollection$GsonTypeAdapter: com.google.gson.TypeAdapter listFeatureAdapter
androidx.cardview.widget.CardView: boolean getPreventCornerOverlap()
com.mapbox.mapboxsdk.style.layers.SymbolLayer: void nativeSetTextTranslateTransition(long,long)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String BIG_PICTURE
androidx.core.content.ContextCompat$Api24Impl: java.io.File getDataDir(android.content.Context)
androidx.window.layout.SidecarCompat$FirstAttachAdapter: java.lang.ref.WeakReference activityWeakReference
kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.jvm.internal.CoroutineStackFrame getCallerFrame()
com.mapbox.mapboxsdk.style.layers.Layer: void nativeSetLayoutProperty(java.lang.String,java.lang.Object)
com.google.firebase.components.ComponentDiscoveryService: ComponentDiscoveryService()
com.mapbox.geojson.utils.GeoJsonUtils: long MAX_DOUBLE_TO_ROUND
com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory$1: java.lang.Object read(com.google.gson.stream.JsonReader)
io.flutter.embedding.android.FlutterView
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle)
com.mapbox.mapboxsdk.offline.OfflineRegionDefinition: float getPixelRatio()
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: void removeListener(androidx.core.util.Consumer)
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeSetLatLng(double,double,double[],long)
com.mapbox.geojson.Polygon$GsonTypeAdapter
com.mapbox.mapboxsdk.style.layers.SymbolLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetTextHaloBlurTransition()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ID
com.google.firebase.datatransport.TransportRegistrar
com.google.android.material.snackbar.SnackbarContentLayout: android.widget.Button getActionView()
com.dexterous.flutterlocalnotifications.models.styles.BigPictureStyleInformation: com.dexterous.flutterlocalnotifications.models.BitmapSource largeIconBitmapSource
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: android.graphics.Matrix getPlatformViewMatrix()
kotlinx.coroutines.channels.Send
kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.lang.Object _next
androidx.appcompat.widget.AppCompatImageView: android.graphics.PorterDuff$Mode getSupportImageTintMode()
com.mapbox.geojson.Feature: boolean hasProperty(java.lang.String)
com.mapbox.geojson.Feature$GsonTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
androidx.window.layout.ExtensionInterfaceCompat: void onWindowLayoutChangeListenerRemoved(android.app.Activity)
io.flutter.view.FlutterCallbackInformation: io.flutter.view.FlutterCallbackInformation lookupCallbackInformation(long)
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference: androidx.lifecycle.Lifecycle lifecycle
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String SCHEDULE_METHOD
androidx.appcompat.app.AppCompatViewInflater: android.content.Context themifyContext(android.content.Context,android.util.AttributeSet,boolean,boolean)
androidx.transition.ChangeBounds$7
androidx.window.embedding.SplitRuleParser: androidx.window.embedding.SplitPairFilter parseSplitPairFilter(android.content.Context,android.content.res.XmlResourceParser)
com.mapbox.mapboxsdk.style.layers.HeatmapLayer: java.lang.Object nativeGetHeatmapRadius()
org.threeten.bp.chrono.ThaiBuddhistEra: org.threeten.bp.chrono.ThaiBuddhistEra[] values()
org.threeten.bp.format.DateTimeFormatterBuilder$SettingsParser: org.threeten.bp.format.DateTimeFormatterBuilder$SettingsParser valueOf(java.lang.String)
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_ANY
androidx.recyclerview.widget.LinearLayoutManager
io.flutter.embedding.engine.FlutterJNI: void onEndFrame()
com.google.android.material.internal.CheckableImageButton
androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateIntentPredicates(java.util.Set)
androidx.appcompat.widget.LinearLayoutCompat: LinearLayoutCompat(android.content.Context,android.util.AttributeSet)
androidx.window.layout.WindowBackend: void unregisterLayoutChangeCallback(androidx.core.util.Consumer)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetTextTranslateAnchor()
com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout: void setClickableOrFocusableBasedOnAccessibility(boolean)
com.mapbox.geojson.Polygon: com.mapbox.geojson.Polygon fromOuterInner(com.mapbox.geojson.LineString,com.mapbox.geojson.BoundingBox,com.mapbox.geojson.LineString[])
com.mapbox.mapboxsdk.maps.NativeMapView: com.mapbox.mapboxsdk.style.light.Light nativeGetLight()
com.mapbox.mapboxsdk.util.DefaultStyle: java.lang.String url
androidx.appcompat.widget.AppCompatImageButton: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
androidx.appcompat.widget.AppCompatTextView: void setBackgroundResource(int)
com.mapbox.geojson.Polygon: java.util.List coordinates()
kotlin.jvm.internal.CallableReference: java.util.List getTypeParameters()
androidx.coordinatorlayout.widget.CoordinatorLayout: void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType[] values()
org.threeten.bp.temporal.ChronoUnit: org.threeten.bp.temporal.ChronoUnit[] values()
com.google.android.datatransport.runtime.firebase.transport.LogEventDropped$Reason: com.google.android.datatransport.runtime.firebase.transport.LogEventDropped$Reason valueOf(java.lang.String)
io.flutter.view.AccessibilityViewEmbedder: java.lang.String TAG
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType valueOf(java.lang.String)
com.mapbox.geojson.gson.GeometryGeoJson: GeometryGeoJson()
androidx.core.content.ContextCompat$Api24Impl: android.content.Context createDeviceProtectedStorageContext(android.content.Context)
com.mapbox.mapboxsdk.log.Logger: int WARN
com.mapbox.mapboxsdk.style.sources.VectorSource: VectorSource(long)
androidx.window.R$id: R$id()
io.flutter.plugins.firebase.messaging.FlutterFirebaseMessagingInitProvider: FlutterFirebaseMessagingInitProvider()
androidx.core.graphics.drawable.IconCompatParcelizer: androidx.core.graphics.drawable.IconCompat read(androidx.versionedparcelable.VersionedParcel)
kotlin.jvm.internal.FunctionReference: kotlin.reflect.KCallable computeReflected()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List finalClippingPaths
androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateActivityIntentPredicates(java.util.Set)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String SHOW_METHOD
com.mapbox.mapboxsdk.style.layers.HillshadeLayer
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String BOT
androidx.appcompat.widget.AppCompatTextView: void setLineHeight(int)
androidx.window.layout.FoldingFeature$Orientation: java.lang.String description
androidx.window.layout.WindowInfoTracker$Companion: androidx.window.layout.WindowInfoTracker$Companion $$INSTANCE
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readBigTextStyleInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map,com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation)
com.google.android.material.floatingactionbutton.FloatingActionButton: int getSize()
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: androidx.window.layout.FoldingFeature translate$window_release(android.app.Activity,androidx.window.extensions.layout.FoldingFeature)
org.threeten.bp.chrono.MinguoDate
androidx.appcompat.widget.ActivityChooserView$InnerLayout: ActivityChooserView$InnerLayout(android.content.Context,android.util.AttributeSet)
io.flutter.embedding.android.FlutterTextureView
androidx.appcompat.widget.ViewStubCompat: int getLayoutResource()
io.flutter.embedding.android.RenderMode: io.flutter.embedding.android.RenderMode[] values()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String INVALID_RAW_RESOURCE_ERROR_MESSAGE
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: int deferredInsetTypes
com.google.android.material.circularreveal.cardview.CircularRevealCardView: void setCircularRevealOverlayDrawable(android.graphics.drawable.Drawable)
com.google.gson.TypeAdapter: com.google.gson.TypeAdapter nullSafe()
io.flutter.embedding.android.FlutterSplashView$SavedState: FlutterSplashView$SavedState(android.os.Parcel)
com.mapbox.mapboxsdk.storage.FileSource: void activate()
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceDestroyed(long)
com.mapbox.mapboxsdk.Mapbox: com.mapbox.mapboxsdk.Mapbox getInstance(android.content.Context,java.lang.String,com.mapbox.mapboxsdk.WellKnownTileServer)
androidx.appcompat.widget.Toolbar: android.graphics.drawable.Drawable getOverflowIcon()
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.FoldingFeature$State getState()
com.mapbox.geojson.GeometryCollection$GsonTypeAdapter: com.google.gson.TypeAdapter stringTypeAdapter
com.mapbox.mapboxsdk.offline.OfflineRegion$OfflineRegionObserver: void onStatusChanged(com.mapbox.mapboxsdk.offline.OfflineRegionStatus)
androidx.appcompat.widget.AppCompatImageButton: void setImageResource(int)
com.mapbox.mapboxsdk.style.layers.FillExtrusionLayer: void nativeSetFillExtrusionOpacityTransition(long,long)
com.google.android.material.button.MaterialButton: android.content.res.ColorStateList getRippleColor()
org.threeten.bp.chrono.ChronoLocalDateTimeImpl
com.google.android.gms.location.LocationSettingsResult: android.os.Parcelable$Creator CREATOR
com.google.gson.JsonArray: com.google.gson.JsonElement get(int)
androidx.appcompat.widget.AppCompatTextView: AppCompatTextView(android.content.Context,android.util.AttributeSet)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String timeZoneName
com.mapbox.mapboxsdk.storage.FileSource$ResourceTransformCallback
com.mapbox.mapboxsdk.style.layers.RasterLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetRasterSaturationTransition()
com.mapbox.mapboxsdk.location.LocationIndicatorLayer: java.lang.Object nativeGetShadowImage()
com.mapbox.mapboxsdk.style.layers.CustomLayer: void initialize(java.lang.String,long)
com.mapbox.mapboxsdk.geometry.LatLngBounds: double latitudeNorth
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: androidx.window.layout.SidecarCompat this$0
com.mapbox.mapboxsdk.util.TileServerOptions: java.lang.String styleTemplate
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchPlatformMessage(long,java.lang.String,java.nio.ByteBuffer,int,int)
androidx.core.content.ContextCompat$Api26Impl: android.content.ComponentName startForegroundService(android.content.Context,android.content.Intent)
kotlinx.coroutines.android.AndroidDispatcherFactory
org.threeten.bp.zone.StandardZoneRules: java.lang.Object writeReplace()
androidx.window.layout.SidecarCompat: androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface extensionCallback
androidx.window.embedding.SplitRule: float getSplitRatio()
com.google.android.gms.dynamite.DynamiteModule$DynamiteLoaderClassLoader
com.google.android.material.floatingactionbutton.FloatingActionButton: com.google.android.material.animation.MotionSpec getShowMotionSpec()
com.google.android.material.button.MaterialButton: android.content.res.ColorStateList getStrokeColor()
org.threeten.bp.temporal.ChronoUnit: org.threeten.bp.temporal.ChronoUnit valueOf(java.lang.String)
com.google.firebase.installations.remote.InstallationResponse$ResponseCode: com.google.firebase.installations.remote.InstallationResponse$ResponseCode valueOf(java.lang.String)
com.mapbox.geojson.GeometryCollection$GsonTypeAdapter: GeometryCollection$GsonTypeAdapter(com.google.gson.Gson)
androidx.appcompat.widget.AppCompatImageButton
com.google.android.material.floatingactionbutton.FloatingActionButton: float getCompatHoveredFocusedTranslationZ()
org.threeten.bp.chrono.ChronoZonedDateTimeImpl: java.lang.Object writeReplace()
com.google.android.material.button.MaterialButton: android.content.res.ColorStateList getSupportBackgroundTintList()
androidx.recyclerview.widget.RecyclerView: void setRecyclerListener(androidx.recyclerview.widget.RecyclerView$RecyclerListener)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SET_AS_GROUP_SUMMARY
androidx.appcompat.widget.AppCompatSpinner: void setAdapter(android.widget.Adapter)
io.flutter.embedding.engine.FlutterJNI: void deferredComponentInstallFailure(int,java.lang.String,boolean)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: void nativeSetTextColorTransition(long,long)
androidx.cardview.widget.CardView: float getMaxCardElevation()
androidx.window.R$styleable: int ActivityFilter_activityName
androidx.cardview.widget.CardView: android.content.res.ColorStateList getCardBackgroundColor()
androidx.recyclerview.widget.RecyclerView: void setOnScrollListener(androidx.recyclerview.widget.RecyclerView$OnScrollListener)
androidx.window.embedding.ExtensionEmbeddingBackend$Companion: boolean isExtensionVersionSupported(java.lang.Integer)
kotlin.coroutines.AbstractCoroutineContextElement: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: void onLowMemory()
androidx.window.embedding.EmbeddingInterfaceCompat: void setEmbeddingCallback(androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetTextHaloWidthTransition()
androidx.window.R$attr: int secondaryActivityName
androidx.window.layout.FoldingFeature$Orientation: FoldingFeature$Orientation(java.lang.String)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.PersonDetails readPersonDetails(java.util.Map)
com.mapbox.mapboxsdk.style.sources.Source: void setDetached()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String DELETE_NOTIFICATION_CHANNEL_GROUP_METHOD
org.threeten.bp.Ser
androidx.appcompat.widget.Toolbar: void setTitleMarginBottom(int)
com.google.gson.JsonObject: com.google.gson.JsonElement deepCopy()
com.mapbox.geojson.gson.GeoJsonAdapterFactory: GeoJsonAdapterFactory()
com.google.android.gms.common.internal.ClientIdentity: android.os.Parcelable$Creator CREATOR
androidx.window.embedding.EmbeddingInterfaceCompat: void setSplitRules(java.util.Set)
androidx.window.layout.FoldingFeature$State: androidx.window.layout.FoldingFeature$State$Companion Companion
androidx.window.layout.SidecarCompat$TranslatingCallback: androidx.window.layout.SidecarCompat this$0
androidx.constraintlayout.widget.ConstraintLayout: void setMinHeight(int)
com.mapbox.geojson.Polygon$GsonTypeAdapter: Polygon$GsonTypeAdapter(com.google.gson.Gson)
androidx.appcompat.widget.DropDownListView: void setListSelectionHidden(boolean)
com.mapbox.mapboxsdk.Mapbox: boolean isApiKeyValid(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: boolean loadLibraryCalled
com.mapbox.geojson.LineString$GsonTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
com.google.android.material.transformation.ExpandableTransformationBehavior: ExpandableTransformationBehavior()
kotlinx.coroutines.android.HandlerContext
org.threeten.bp.chrono.IsoChronology
androidx.window.layout.WindowLayoutInfo
com.mapbox.mapboxsdk.http.NativeHttpRequest: void nativeOnResponse(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[])
com.mapbox.geojson.FeatureCollection: com.mapbox.geojson.FeatureCollection fromFeatures(com.mapbox.geojson.Feature[])
com.dexterous.flutterlocalnotifications.RepeatInterval
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: WindowInfoTrackerCallbackAdapter$addListener$1$1(kotlinx.coroutines.flow.Flow,androidx.core.util.Consumer,kotlin.coroutines.Continuation)
androidx.core.app.RemoteActionCompatParcelizer: RemoteActionCompatParcelizer()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.app.PendingIntent getBroadcastPendingIntent(android.content.Context,int,android.content.Intent)
kotlinx.coroutines.DefaultExecutor
com.dexterous.flutterlocalnotifications.models.NotificationChannelAction: com.dexterous.flutterlocalnotifications.models.NotificationChannelAction[] $VALUES
com.mapbox.mapboxsdk.geometry.LatLngBounds: double latitudeSouth
com.mapbox.mapboxsdk.log.Logger: Logger()
kotlinx.coroutines.channels.AbstractSendChannel
androidx.appcompat.widget.Toolbar: android.graphics.drawable.Drawable getLogo()
com.mapbox.mapboxsdk.storage.FileSource$ResourcesCachePathChangeCallback: void onSuccess(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void nativeDestroy(long)
com.mapbox.geojson.GeometryCollection$GsonTypeAdapter: com.google.gson.Gson gson
com.mapbox.geojson.constants.GeoJsonConstants: double MAX_LONGITUDE
androidx.window.core.Version$Companion: androidx.window.core.Version getVERSION_0_1()
androidx.appcompat.view.menu.ActionMenuItemView: void setItemInvoker(androidx.appcompat.view.menu.MenuBuilder$ItemInvoker)
com.mapbox.mapboxsdk.offline.OfflineGeometryRegionDefinition: com.mapbox.geojson.Geometry geometry
com.mapbox.geojson.FeatureCollection: com.mapbox.geojson.BoundingBox bbox
com.google.android.material.bottomappbar.BottomAppBar: float getFabCradleMargin()
androidx.constraintlayout.widget.ConstraintLayout: int getMaxWidth()
com.mapbox.mapboxsdk.style.sources.GeoJsonSource: com.mapbox.geojson.Feature[] nativeGetClusterChildren(com.mapbox.geojson.Feature)
androidx.appcompat.widget.AbsActionBarView: int getContentHeight()
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: android.graphics.SurfaceTexture surfaceTexture
com.mapbox.mapboxsdk.maps.renderer.MapRendererScheduler
com.mapbox.mapboxsdk.style.light.Position: float azimuthalAngle
kotlinx.coroutines.android.AndroidExceptionPreHandler
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency: com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency Daily
android.support.v4.media.session.MediaSessionCompat$QueueItem
com.google.gson.JsonObject: com.google.gson.internal.LinkedTreeMap members
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setBigTextStyle(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
com.mapbox.geojson.Feature: void addCharacterProperty(java.lang.String,java.lang.Character)
androidx.media.AudioAttributesImplBaseParcelizer: androidx.media.AudioAttributesImplBase read(androidx.versionedparcelable.VersionedParcel)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: void nativeSetIconTranslateTransition(long,long)
android.support.v4.media.AudioAttributesImplBaseParcelizer: androidx.media.AudioAttributesImplBase read(androidx.versionedparcelable.VersionedParcel)
com.mapbox.mapboxsdk.util.TileServerOptions: java.lang.String spritesDomainName
kotlinx.coroutines.internal.AtomicOp
io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo getRootNode(android.view.View,int,android.graphics.Rect)
androidx.cardview.widget.CardView: void setRadius(float)
com.mapbox.geojson.ListOfDoublesCoordinatesTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.util.List)
com.google.android.material.transformation.FabTransformationScrimBehavior
io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo convertToFlutterNode(android.view.accessibility.AccessibilityNodeInfo,int,android.view.View)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: void onEnd(android.view.WindowInsetsAnimation)
com.mapbox.mapboxsdk.style.sources.CannotAddSourceException: CannotAddSourceException(java.lang.String)
org.threeten.bp.ZoneOffset
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType valueOf(java.lang.String)
androidx.appcompat.widget.AppCompatButton: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
com.google.android.material.button.MaterialButton: void setInternalBackground(android.graphics.drawable.Drawable)
androidx.coordinatorlayout.widget.CoordinatorLayout: CoordinatorLayout(android.content.Context,android.util.AttributeSet)
com.mapbox.mapboxsdk.log.Logger: int NONE
androidx.appcompat.widget.AppCompatRadioButton: void setButtonDrawable(android.graphics.drawable.Drawable)
com.mapbox.geojson.utils.PolylineUtils: java.util.List simplify(java.util.List,double,boolean)
androidx.appcompat.widget.Toolbar: int getContentInsetLeft()
androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1: java.lang.Object invoke(java.lang.Object)
com.google.common.util.concurrent.AbstractFuture$Waiter: com.google.common.util.concurrent.AbstractFuture$Waiter next
com.google.gson.TypeAdapter: java.lang.String toJson(java.lang.Object)
androidx.window.layout.HardwareFoldingFeature$Companion
androidx.appcompat.view.menu.ActionMenuItemView: ActionMenuItemView(android.content.Context,android.util.AttributeSet)
com.mapbox.geojson.ListofListofListOfPointCoordinatesTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
com.google.android.material.floatingactionbutton.FloatingActionButton: void setShowMotionSpecResource(int)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer ledOnMs
com.mapbox.geojson.Point: java.util.List coordinates()
androidx.window.embedding.SplitInfo: boolean contains(android.app.Activity)
androidx.window.layout.SidecarAdapter: androidx.window.layout.SidecarAdapter$Companion Companion
androidx.appcompat.widget.AppCompatSpinner: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
com.mapbox.mapboxsdk.style.layers.LineLayer: java.lang.Object nativeGetLineMiterLimit()
com.mapbox.geojson.Point$GsonTypeAdapter: com.mapbox.geojson.Point read(com.google.gson.stream.JsonReader)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.app.Activity mainActivity
kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable compute()
com.google.android.gms.common.internal.zzj: android.os.Parcelable$Creator CREATOR
com.google.android.gms.location.LocationResult: android.os.Parcelable$Creator CREATOR
androidx.window.embedding.EmbeddingAdapter: boolean translateParentMetricsPredicate$lambda-4(androidx.window.embedding.SplitRule,android.view.WindowMetrics)
com.dexterous.flutterlocalnotifications.NotificationStyle: com.dexterous.flutterlocalnotifications.NotificationStyle[] values()
kotlinx.coroutines.android.AndroidDispatcherFactory: int getLoadPriority()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_NOTIFICATION_CHANNELS_METHOD
com.mapbox.mapboxsdk.style.sources.GeoJsonSource: GeoJsonSource(long)
com.mapbox.geojson.gson.GeometryGeoJson
com.mapbox.mapboxsdk.style.sources.Source: java.lang.String nativeGetId()
com.google.android.material.appbar.ViewOffsetBehavior: ViewOffsetBehavior(android.content.Context,android.util.AttributeSet)
com.mapbox.geojson.BoundingBox: double north()
com.mapbox.geojson.MultiLineString$GsonTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback this$0
com.mapbox.mapboxsdk.style.sources.CustomGeometrySource: com.mapbox.geojson.Feature[] querySourceFeatures(java.lang.Object[])
androidx.appcompat.widget.AppCompatCheckedTextView: void setCheckMarkDrawable(int)
androidx.window.core.Version$bigInteger$2: java.math.BigInteger invoke()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath: void setPathData(androidx.core.graphics.PathParser$PathDataNode[])
android.support.v4.graphics.drawable.IconCompatParcelizer: androidx.core.graphics.drawable.IconCompat read(androidx.versionedparcelable.VersionedParcel)
com.google.android.material.bottomappbar.BottomAppBar: float getFabTranslationY()
com.google.android.gms.cloudmessaging.CloudMessagingReceiver: CloudMessagingReceiver()
com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float getPivotY()
com.mapbox.mapboxsdk.maps.MapView
com.mapbox.mapboxsdk.maps.Image: Image(byte[],float,java.lang.String,int,int,boolean)
androidx.window.layout.ExtensionWindowLayoutInfoBackend: java.util.concurrent.locks.ReentrantLock extensionWindowBackendLock
androidx.appcompat.widget.AppCompatImageView: void setSupportImageTintMode(android.graphics.PorterDuff$Mode)
io.flutter.embedding.android.FlutterActivity: FlutterActivity()
androidx.core.widget.NestedScrollView
androidx.window.layout.WindowLayoutInfo: java.lang.String toString()
com.mapbox.geojson.utils.PolylineUtils: boolean SIMPLIFY_DEFAULT_HIGHEST_QUALITY
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: java.lang.String ID
com.mapbox.geojson.MultiLineString: java.lang.Object coordinates()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String NOTIFICATION_LAUNCHED_APP
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeSetZoom(double,double,double,long)
androidx.appcompat.widget.LinearLayoutCompat: int getBaselineAlignedChildIndex()
com.google.android.material.bottomappbar.BottomAppBar: void setCradleVerticalOffset(float)
androidx.window.embedding.MatcherUtils: boolean wildcardMatch(java.lang.String,java.lang.String)
android.support.v4.media.AudioAttributesCompatParcelizer
com.mapbox.mapboxsdk.maps.NativeMapView: double nativeGetTopOffsetPixelsForAnnotationSymbol(java.lang.String)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState: int getChangingConfigurations()
androidx.window.core.Version: androidx.window.core.Version UNKNOWN
com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory$1: java.util.Map val$labelToDelegate
androidx.appcompat.widget.Toolbar: android.graphics.drawable.Drawable getNavigationIcon()
com.google.android.material.button.MaterialButton: void setIconTintResource(int)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.text.Spanned fromHtml(java.lang.String)
com.mapbox.geojson.ListofListofListOfPointCoordinatesTypeAdapter
androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Rect computeWindowBoundsIceCreamSandwich$window_release(android.app.Activity)
com.mapbox.mapboxsdk.camera.CameraPosition: android.os.Parcelable$Creator CREATOR
com.google.android.material.appbar.AppBarLayout: AppBarLayout(android.content.Context,android.util.AttributeSet)
com.google.android.material.button.MaterialButton: int getCornerRadius()
com.google.firebase.messaging.FirebaseMessagingService
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.DateTimeComponents matchDateTimeComponents
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource DrawableResource
androidx.constraintlayout.widget.Placeholder: int getEmptyVisibility()
androidx.window.core.ExperimentalWindowApi
io.flutter.embedding.engine.FlutterJNI: void invokePlatformMessageResponseCallback(int,java.nio.ByteBuffer,int)
com.google.firebase.installations.remote.InstallationResponse$ResponseCode: com.google.firebase.installations.remote.InstallationResponse$ResponseCode[] values()
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate accessibilityDelegate
androidx.window.layout.WindowMetricsCalculator$Companion$reset$1
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void pendingNotificationRequests(io.flutter.plugin.common.MethodChannel$Result)
com.mapbox.mapboxsdk.offline.OfflineTilePyramidRegionDefinition: boolean includeIdeographs
com.google.android.material.bottomappbar.BottomAppBar: void setSubtitle(java.lang.CharSequence)
io.flutter.embedding.engine.FlutterJNI: void nativeOnVsync(long,long,long)
com.mapbox.mapboxsdk.maps.NativeMapView: void onStyleImageMissing(java.lang.String)
androidx.appcompat.widget.LinearLayoutCompat: LinearLayoutCompat(android.content.Context)
com.mapbox.mapboxsdk.style.sources.Source: void checkThread()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath: java.lang.String getPathName()
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: java.lang.String typeFieldName
com.mapbox.geojson.Feature$GsonTypeAdapter: Feature$GsonTypeAdapter(com.google.gson.Gson)
com.mapbox.mapboxsdk.style.types.Formatted: boolean equals(java.lang.Object)
com.mapbox.mapboxsdk.style.sources.Source: java.lang.Integer nativeGetPrefetchZoomDelta()
androidx.window.layout.WindowMetrics: androidx.window.core.Bounds _bounds
androidx.window.embedding.SplitRule$Api30Impl
com.mapbox.mapboxsdk.offline.OfflineGeometryRegionDefinition
com.mapbox.mapboxsdk.maps.NativeMapView: com.mapbox.mapboxsdk.geometry.LatLng nativeGetLatLng()
androidx.appcompat.widget.AppCompatImageButton: void setImageDrawable(android.graphics.drawable.Drawable)
com.mapbox.mapboxsdk.util.TileServerOptions: com.mapbox.mapboxsdk.util.TileServerOptions mapTilerConfiguration()
com.google.android.material.transformation.FabTransformationSheetBehavior: FabTransformationSheetBehavior()
com.mapbox.mapboxsdk.style.layers.FillLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetFillPatternTransition()
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String PLAY_SOUND
androidx.appcompat.widget.SearchView: void setQuery(java.lang.CharSequence)
androidx.appcompat.widget.ActionMenuView: void setOnMenuItemClickListener(androidx.appcompat.widget.ActionMenuView$OnMenuItemClickListener)
androidx.appcompat.app.AppCompatViewInflater: androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView createMultiAutoCompleteTextView(android.content.Context,android.util.AttributeSet)
androidx.appcompat.widget.AppCompatEditText: void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)
com.mapbox.mapboxsdk.style.layers.LineLayer: java.lang.Object nativeGetLineGapWidth()
com.mapbox.mapboxsdk.snapshotter.MapSnapshot: MapSnapshot(long,android.graphics.Bitmap,java.lang.String[],boolean)
com.mapbox.mapboxsdk.geometry.LatLng: double longitude
androidx.appcompat.widget.AppCompatRadioButton: void setButtonDrawable(int)
androidx.window.layout.SidecarCompat: java.util.Map componentCallbackMap
com.mapbox.mapboxsdk.style.types.Formatted: int hashCode()
androidx.window.layout.SidecarWindowBackend$Companion: boolean isSidecarVersionSupported(androidx.window.core.Version)
androidx.appcompat.widget.ViewStubCompat: int getInflatedId()
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetTextOpacity()
io.flutter.view.AccessibilityViewEmbedder: java.lang.Integer getRecordFlutterId(android.view.View,android.view.accessibility.AccessibilityRecord)
com.google.android.gms.common.api.internal.LifecycleCallback: com.google.android.gms.common.api.internal.LifecycleFragment getChimeraLifecycleFragmentImpl(com.google.android.gms.common.api.internal.LifecycleActivity)
androidx.window.layout.SidecarCompat: androidx.window.sidecar.SidecarInterface sidecar
androidx.appcompat.widget.ContentFrameLayout: android.util.TypedValue getFixedHeightMinor()
com.mapbox.mapboxsdk.offline.OfflineGeometryRegionDefinition: double maxZoom
androidx.appcompat.view.menu.ExpandedMenuView
com.mapbox.geojson.Polygon$GsonTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
androidx.cardview.widget.CardView
androidx.window.layout.SidecarCompat$TranslatingCallback: void onWindowLayoutChanged(android.os.IBinder,androidx.window.sidecar.SidecarWindowLayoutInfo)
com.mapbox.geojson.Point$GsonTypeAdapter: com.mapbox.geojson.CoordinateContainer createCoordinateContainer(java.lang.String,com.mapbox.geojson.BoundingBox,java.lang.Object)
kotlinx.coroutines.JobSupport
com.mapbox.mapboxsdk.log.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)
com.mapbox.geojson.Polygon: com.mapbox.geojson.Polygon fromLngLats(double[][][])
androidx.appcompat.widget.ActionBarContainer: void setPrimaryBackground(android.graphics.drawable.Drawable)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setMediaStyle(androidx.core.app.NotificationCompat$Builder)
com.mapbox.geojson.LineString: com.mapbox.geojson.BoundingBox bbox()
com.mapbox.mapboxsdk.maps.NativeMapView: boolean nativeGetPrefetchTiles()
androidx.window.embedding.SplitPairFilter: java.lang.String getSecondaryActivityIntentAction()
androidx.appcompat.widget.AppCompatSpinner: int getDropDownVerticalOffset()
androidx.window.layout.WindowInfoTrackerImpl: WindowInfoTrackerImpl(androidx.window.layout.WindowMetricsCalculator,androidx.window.layout.WindowBackend)
androidx.window.embedding.ExtensionEmbeddingBackend: void unregisterRule(androidx.window.embedding.EmbeddingRule)
androidx.core.app.RemoteActionCompat: RemoteActionCompat()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: int[] additionalFlags
kotlinx.coroutines.EventLoopImplBase: java.lang.Object _queue
com.mapbox.mapboxsdk.location.LocationIndicatorLayer: void nativeSetAccuracyRadiusTransition(long,long)
com.dexterous.flutterlocalnotifications.models.styles.MessagingStyleInformation: java.util.ArrayList messages
com.mapbox.mapboxsdk.style.light.Position: com.mapbox.mapboxsdk.style.light.Position fromPosition(float,float,float)
androidx.window.layout.FoldingFeature$State$Companion: FoldingFeature$State$Companion()
androidx.appcompat.widget.ActionBarContextView
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeSetPrefetchTiles(boolean)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: com.dexterous.flutterlocalnotifications.models.Time repeatTime
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetTextMaxAngle()
android.support.v4.media.AudioAttributesImplApi26Parcelizer
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String COLORIZED
androidx.window.R$attr: int clearTop
com.mapbox.geojson.Feature: java.lang.String toJson()
androidx.window.core.Version: int minor
androidx.recyclerview.widget.GridLayoutManager
androidx.window.embedding.SplitPlaceholderRule: androidx.window.embedding.SplitPlaceholderRule plus$window_release(androidx.window.embedding.ActivityFilter)
androidx.window.embedding.ActivityRule
com.google.android.gms.common.util.DynamiteApi
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.concurrent.CopyOnWriteArraySet splitRules
androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type: androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type valueOf(java.lang.String)
com.mapbox.mapboxsdk.style.layers.HillshadeLayer: HillshadeLayer(long)
com.mapbox.mapboxsdk.maps.renderer.MapRenderer: java.lang.String TAG
com.baseflow.geolocator.location.LocationAccuracy: com.baseflow.geolocator.location.LocationAccuracy[] values()
com.mapbox.geojson.MultiPolygon: com.mapbox.geojson.MultiPolygon fromJson(java.lang.String)
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: java.util.Map registeredPlugins
com.google.android.gms.common.ConnectionResult: android.os.Parcelable$Creator CREATOR
androidx.window.layout.WindowLayoutInfo: java.util.List getDisplayFeatures()
com.google.android.material.floatingactionbutton.FloatingActionButton: int getRippleColor()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: int access$500(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
androidx.core.widget.NestedScrollView: float getVerticalScrollFactorCompat()
androidx.appcompat.widget.Toolbar: void setLogo(int)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetTextLineHeight()
com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory: com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory of(java.lang.Class,java.lang.String,boolean)
com.google.android.gms.maps.model.MarkerOptions: android.os.Parcelable$Creator CREATOR
com.dexterous.flutterlocalnotifications.models.SoundSource: com.dexterous.flutterlocalnotifications.models.SoundSource Uri
androidx.appcompat.widget.ActionBarOverlayLayout: void setUiOptions(int)
com.mapbox.geojson.GeometryAdapterFactory
io.flutter.embedding.engine.FlutterJNI: java.lang.String observatoryUri
android.support.v4.media.AudioAttributesImplApi26Parcelizer: androidx.media.AudioAttributesImplApi26 read(androidx.versionedparcelable.VersionedParcel)
com.dexterous.flutterlocalnotifications.ScheduledNotificationBootReceiver: ScheduledNotificationBootReceiver()
androidx.window.R$styleable: int SplitPairRule_splitLayoutDirection
androidx.recyclerview.widget.RecyclerView: androidx.recyclerview.widget.RecyclerView$EdgeEffectFactory getEdgeEffectFactory()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String VISIBILITY
com.mapbox.mapboxsdk.geometry.LatLng
com.google.android.material.floatingactionbutton.FloatingActionButton: void setSupportImageTintMode(android.graphics.PorterDuff$Mode)
com.google.android.material.internal.BaselineLayout: int getBaseline()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String DRAWABLE
com.mapbox.mapboxsdk.style.light.Light: Light(long)
androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
androidx.appcompat.app.AppCompatViewInflater: android.view.View createViewFromTag(android.content.Context,java.lang.String,android.util.AttributeSet)
kotlinx.coroutines.internal.LockFreeTaskQueueCore: long _state
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _prev
org.threeten.bp.chrono.MinguoChronology
com.google.gson.JsonArray
com.dexterous.flutterlocalnotifications.models.SoundSource: com.dexterous.flutterlocalnotifications.models.SoundSource[] values()
androidx.window.layout.FoldingFeature$Orientation$Companion: FoldingFeature$Orientation$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
com.mapbox.mapboxsdk.offline.OfflineRegionDefinition: java.lang.String getStyleURL()
androidx.appcompat.widget.ActionBarOverlayLayout
com.mapbox.mapboxsdk.location.LocationIndicatorLayer: void nativeSetLocationTransition(long,long)
androidx.window.core.Version: int compareTo(java.lang.Object)
com.mapbox.mapboxsdk.Mapbox: java.lang.String TAG
com.mapbox.mapboxsdk.style.layers.Layer: long nativePtr
androidx.window.layout.SidecarWindowBackend: void callbackRemovedForActivity(android.app.Activity)
androidx.recyclerview.widget.RecyclerView
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource FlutterBitmapAsset
io.flutter.embedding.engine.FlutterJNI: void handlePlatformMessage(java.lang.String,java.nio.ByteBuffer,int,long)
com.mapbox.mapboxsdk.style.layers.Layer: void nativeSetMaxZoom(float)
com.mapbox.geojson.Feature: int hashCode()
com.google.android.material.bottomappbar.BottomAppBar: androidx.coordinatorlayout.widget.CoordinatorLayout$Behavior getBehavior()
kotlinx.coroutines.scheduling.LimitingDispatcher
io.flutter.view.AccessibilityViewEmbedder: void setFlutterNodeParent(android.view.accessibility.AccessibilityNodeInfo,android.view.View,android.view.accessibility.AccessibilityNodeInfo)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetSymbolZOrder()
com.mapbox.mapboxsdk.style.sources.CustomGeometrySource
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: FlutterMutatorsStack()
androidx.window.layout.SidecarCompat: void onWindowLayoutChangeListenerAdded(android.app.Activity)
io.flutter.view.AccessibilityViewEmbedder: java.util.Map originToFlutterId
androidx.window.layout.SidecarCompat$DistinctElementCallback
io.flutter.embedding.engine.FlutterJNI: void onBeginFrame()
androidx.appcompat.widget.AppCompatSpinner: void setBackgroundDrawable(android.graphics.drawable.Drawable)
kotlinx.coroutines.ChildContinuation
androidx.versionedparcelable.ParcelImpl: android.os.Parcelable$Creator CREATOR
io.flutter.embedding.engine.FlutterJNI: float refreshRateFPS
com.google.android.material.floatingactionbutton.FloatingActionButton: android.graphics.PorterDuff$Mode getSupportImageTintMode()
androidx.appcompat.widget.SearchView: void setInputType(int)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ALLOW_WHILE_IDLE
kotlin.jvm.internal.FunctionReference: kotlin.reflect.KCallable getReflected()
androidx.window.layout.WindowMetricsCalculator$Companion$overrideDecorator$1: WindowMetricsCalculator$Companion$overrideDecorator$1(java.lang.Object)
androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface
org.threeten.bp.chrono.Ser
androidx.appcompat.widget.AppCompatCheckBox: int getCompoundPaddingLeft()
androidx.cardview.widget.CardView: void setMaxCardElevation(float)
androidx.window.embedding.ExtensionEmbeddingBackend$Companion: androidx.window.embedding.ExtensionEmbeddingBackend getInstance()
androidx.window.embedding.SplitPlaceholderRule: android.content.Intent getPlaceholderIntent()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float getPivotX()
com.mapbox.mapboxsdk.annotations.BubbleLayout: int getStrokeColor()
com.mapbox.mapboxsdk.style.layers.CircleLayer: java.lang.Object nativeGetCircleStrokeWidth()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void createNotificationChannelGroup(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.mapbox.mapboxsdk.style.layers.FillExtrusionLayer: void finalize()
androidx.appcompat.widget.AppCompatImageButton: void setBackgroundDrawable(android.graphics.drawable.Drawable)
org.threeten.bp.temporal.IsoFields$Unit: org.threeten.bp.temporal.IsoFields$Unit[] values()
kotlinx.coroutines.scheduling.WorkQueue: int blockingTasksInBuffer
com.mapbox.geojson.GeometryCollection: com.mapbox.geojson.GeometryCollection fromGeometry(com.mapbox.geojson.Geometry)
com.mapbox.geojson.BaseCoordinatesTypeAdapter: void writePoint(com.google.gson.stream.JsonWriter,com.mapbox.geojson.Point)
com.dexterous.flutterlocalnotifications.models.Time: java.lang.Integer minute
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeSetTransitionDelay(long)
com.dexterous.flutterlocalnotifications.models.NotificationDetails
com.mapbox.mapboxsdk.style.layers.HeatmapLayer: java.lang.Object nativeGetHeatmapOpacity()
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetIconAnchor()
androidx.appcompat.widget.ActionBarOverlayLayout: void setHasNonEmbeddedTabs(boolean)
androidx.appcompat.widget.AppCompatEditText: android.text.Editable getText()
com.google.android.material.appbar.HeaderScrollingViewBehavior: HeaderScrollingViewBehavior(android.content.Context,android.util.AttributeSet)
com.mapbox.mapboxsdk.style.layers.CircleLayer: java.lang.Object nativeGetCircleSortKey()
com.baseflow.geolocator.permission.LocationPermission: com.baseflow.geolocator.permission.LocationPermission[] values()
com.google.android.material.appbar.AppBarLayout: int getTopInset()
com.mapbox.geojson.Point: Point(java.lang.String,com.mapbox.geojson.BoundingBox,java.util.List)
com.mapbox.mapboxsdk.style.types.FormattedSection: java.lang.String getTextColor()
org.threeten.bp.chrono.JapaneseEra: java.lang.Object writeReplace()
com.mapbox.geojson.utils.PolylineUtils: void encode(long,java.lang.StringBuilder)
com.google.android.gms.location.LocationRequest: android.os.Parcelable$Creator CREATOR
com.mapbox.mapboxsdk.offline.OfflineManager: void nativeSetMaximumAmbientCacheSize(long,com.mapbox.mapboxsdk.offline.OfflineManager$FileSourceCallback)
androidx.appcompat.widget.AppCompatAutoCompleteTextView: android.content.res.ColorStateList getSupportBackgroundTintList()
com.mapbox.mapboxsdk.offline.OfflineRegion$OfflineRegionStatusCallback
com.mapbox.geojson.GeometryCollection$GsonTypeAdapter: com.google.gson.TypeAdapter listGeometryAdapter
com.mapbox.mapboxsdk.style.types.FormattedSection: void setFontScale(java.lang.Number)
com.mapbox.mapboxsdk.style.sources.ImageSource: void initialize(java.lang.String,com.mapbox.mapboxsdk.geometry.LatLngQuad)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: void pushClipRect(int,int,int,int)
androidx.window.layout.SidecarCompat$FirstAttachAdapter: void onViewDetachedFromWindow(android.view.View)
androidx.window.layout.SidecarWindowBackend$ExtensionListenerImpl: void onWindowLayoutChanged(android.app.Activity,androidx.window.layout.WindowLayoutInfo)
com.mapbox.geojson.MultiPolygon: MultiPolygon(java.lang.String,com.mapbox.geojson.BoundingBox,java.util.List)
androidx.window.embedding.EmbeddingAdapter: boolean translateActivityPredicates$lambda-6(java.util.Set,android.app.Activity)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String PENDING_NOTIFICATION_REQUESTS_METHOD
androidx.appcompat.widget.AppCompatSpinner: int getDropDownHorizontalOffset()
io.flutter.view.AccessibilityViewEmbedder: AccessibilityViewEmbedder(android.view.View,int)
com.baseflow.geolocator.location.LocationAccuracy: com.baseflow.geolocator.location.LocationAccuracy valueOf(java.lang.String)
com.google.firebase.messaging.FirebaseMessaging
com.mapbox.mapboxsdk.style.layers.Layer: float nativeGetMaxZoom()
com.mapbox.mapboxsdk.style.layers.FillExtrusionLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetFillExtrusionColorTransition()
com.google.gson.JsonArray: com.google.gson.JsonArray deepCopy()
androidx.window.layout.WindowInfoTracker$Companion: androidx.window.layout.WindowBackend windowBackend$window_release(android.content.Context)
kotlinx.coroutines.scheduling.WorkQueue: int consumerIndex
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.Boolean playSound
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String CREATE_NOTIFICATION_CHANNEL_METHOD
com.mapbox.mapboxsdk.style.layers.FillExtrusionLayer: java.lang.Object nativeGetFillExtrusionPattern()
com.mapbox.mapboxsdk.style.layers.LineLayer: java.lang.Object nativeGetLineOpacity()
androidx.window.embedding.EmbeddingTranslatingCallback: void accept(java.util.List)
com.mapbox.mapboxsdk.maps.renderer.MapRenderer: MapRenderer(android.content.Context,java.lang.String)
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeUpdatePolyline(long,com.mapbox.mapboxsdk.annotations.Polyline)
com.mapbox.mapboxsdk.maps.Image: float[] stretchX
com.mapbox.mapboxsdk.Mapbox: com.mapbox.mapboxsdk.ModuleProvider getModuleProvider()
com.mapbox.mapboxsdk.style.layers.HeatmapLayer: HeatmapLayer(long)
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeUpdateMarker(long,double,double,java.lang.String)
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency
com.mapbox.mapboxsdk.plugins.offline.offline.OfflineDownloadService
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: com.google.android.gms.tasks.Task getPluginConstantsForFirebaseApp(com.google.firebase.FirebaseApp)
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeResetNorth()
androidx.window.layout.WindowMetricsCalculator$Companion: androidx.window.layout.WindowMetricsCalculator$Companion $$INSTANCE
androidx.window.core.Version$Companion: androidx.window.core.Version parse(java.lang.String)
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.EmbeddingInterfaceCompat embeddingExtension
androidx.appcompat.widget.Toolbar: java.lang.CharSequence getSubtitle()
com.mapbox.mapboxsdk.location.LocationIndicatorLayer: java.lang.Object nativeGetBearingImage()
androidx.appcompat.widget.Toolbar: void setSubtitle(int)
androidx.recyclerview.widget.RecyclerView: void setAdapter(androidx.recyclerview.widget.RecyclerView$Adapter)
androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView: void setDropDownBackgroundResource(int)
kotlin.jvm.internal.CallableReference: java.lang.String getSignature()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void setRotation(float)
com.mapbox.mapboxsdk.http.NativeHttpRequest
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void zonedScheduleNextNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void getActiveNotifications(io.flutter.plugin.common.MethodChannel$Result)
com.google.android.material.button.MaterialButton: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
androidx.appcompat.widget.ActionBarOverlayLayout: void setActionBarVisibilityCallback(androidx.appcompat.widget.ActionBarOverlayLayout$ActionBarVisibilityCallback)
com.mapbox.mapboxsdk.maps.renderer.MapRenderer: void nativeOnSurfaceCreated()
com.mapbox.mapboxsdk.maps.NativeMapView: com.mapbox.mapboxsdk.geometry.LatLng nativeLatLngForProjectedMeters(double,double)
kotlin.jvm.internal.FunctionReference: boolean isSuspend()
io.flutter.embedding.engine.FlutterJNI: java.lang.String getObservatoryUri()
io.flutter.embedding.engine.FlutterJNI: void setLocalizationPlugin(io.flutter.plugin.localization.LocalizationPlugin)
io.flutter.plugins.firebase.messaging.FlutterFirebaseAppRegistrar
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeSetMaxZoom(double)
kotlinx.coroutines.CompletedExceptionally: int _handled
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: java.util.Map labelToSubtype
androidx.window.core.Version$bigInteger$2: androidx.window.core.Version this$0
io.flutter.plugin.platform.SingleViewPresentation: SingleViewPresentation(android.content.Context,android.view.Display,io.flutter.plugin.platform.PlatformViewFactory,io.flutter.plugin.platform.AccessibilityEventsDelegate,int,java.lang.Object,android.view.View$OnFocusChangeListener)
com.mapbox.mapboxsdk.offline.OfflineManager$ListOfflineRegionsCallback
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI spawn(java.lang.String,java.lang.String,java.lang.String,java.util.List)
com.google.android.material.snackbar.SnackbarContentLayout
androidx.window.embedding.SplitPairFilter: android.content.ComponentName getPrimaryActivityName()
com.dexterous.flutterlocalnotifications.models.styles.MessagingStyleInformation: java.lang.Boolean groupConversation
androidx.appcompat.widget.AppCompatImageView: void setImageURI(android.net.Uri)
com.mapbox.mapboxsdk.style.layers.FillExtrusionLayer: java.lang.Object nativeGetFillExtrusionVerticalGradient()
org.threeten.bp.chrono.HijrahEra: java.lang.Object writeReplace()
com.dexterous.flutterlocalnotifications.models.SoundSource: com.dexterous.flutterlocalnotifications.models.SoundSource RawResource
kotlin.coroutines.jvm.internal.BaseContinuationImpl: java.lang.Object invokeSuspend(java.lang.Object)
org.threeten.bp.zone.Ser: java.lang.Object readResolve()
org.threeten.bp.chrono.HijrahDate
androidx.window.layout.HardwareFoldingFeature$Type: java.lang.String description
com.mapbox.geojson.MultiLineString: com.mapbox.geojson.MultiLineString fromLineString(com.mapbox.geojson.LineString,com.mapbox.geojson.BoundingBox)
com.google.android.material.floatingactionbutton.FloatingActionButton: void setSupportBackgroundTintList(android.content.res.ColorStateList)
androidx.appcompat.widget.Toolbar: java.lang.CharSequence getTitle()
com.mapbox.mapboxsdk.offline.OfflineGeometryRegionDefinition: java.lang.String styleURL
androidx.appcompat.widget.AppCompatImageButton: android.graphics.PorterDuff$Mode getSupportImageTintMode()
androidx.media.AudioAttributesImplApi21Parcelizer: void write(androidx.media.AudioAttributesImplApi21,androidx.versionedparcelable.VersionedParcel)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void deleteNotificationChannel(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
androidx.appcompat.app.AppCompatViewInflater: androidx.appcompat.widget.AppCompatAutoCompleteTextView createAutoCompleteTextView(android.content.Context,android.util.AttributeSet)
com.mapbox.mapboxsdk.style.layers.CircleLayer: void nativeSetCircleStrokeWidthTransition(long,long)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityStarted(android.app.Activity)
com.mapbox.mapboxsdk.util.TileServerOptions: java.lang.String tileTemplate
io.flutter.view.AccessibilityViewEmbedder
androidx.appcompat.widget.ActionBarContextView: void setTitleOptional(boolean)
com.google.android.material.circularreveal.cardview.CircularRevealCardView
io.flutter.plugins.firebase.messaging.FlutterFirebaseAppRegistrar: FlutterFirebaseAppRegistrar()
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetTextOptional()
androidx.appcompat.widget.AppCompatSpinner: void setAdapter(android.widget.SpinnerAdapter)
io.flutter.embedding.engine.FlutterJNI: void destroyOverlaySurfaces()
androidx.window.layout.HardwareFoldingFeature$Type$Companion: HardwareFoldingFeature$Type$Companion()
com.google.firebase.provider.FirebaseInitProvider: FirebaseInitProvider()
kotlinx.coroutines.android.AndroidExceptionPreHandler: java.lang.reflect.Method preHandler()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String BIG_PICTURE_BITMAP_SOURCE
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean playSound
androidx.core.widget.NestedScrollView: float getTopFadingEdgeStrength()
androidx.appcompat.widget.Toolbar: android.content.Context getPopupContext()
androidx.window.layout.HardwareFoldingFeature$Type
org.threeten.bp.OffsetTime: java.lang.Object writeReplace()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: long calculateNextNotificationTrigger(long,long)
androidx.cardview.widget.CardView: void setMinimumWidth(int)
com.google.gson.JsonArray: void addAll(com.google.gson.JsonArray)
com.mapbox.geojson.FeatureCollection: boolean equals(java.lang.Object)
androidx.window.embedding.SplitInfo: androidx.window.embedding.ActivityStack primaryActivityStack
com.mapbox.geojson.BoundingBox: com.google.gson.TypeAdapter typeAdapter(com.google.gson.Gson)
com.mapbox.geojson.shifter.CoordinateShifterManager$1: CoordinateShifterManager$1()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String METHOD_CHANNEL
com.mapbox.mapboxsdk.style.layers.SymbolLayer: SymbolLayer(long)
androidx.window.embedding.ActivityStack: boolean equals(java.lang.Object)
io.flutter.embedding.android.FlutterSplashView$SavedState: FlutterSplashView$SavedState(android.os.Parcelable)
androidx.media.AudioAttributesImplApi26: AudioAttributesImplApi26()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: int getFillColor()
androidx.core.widget.NestedScrollView: void setSmoothScrollingEnabled(boolean)
com.mapbox.geojson.Polygon: Polygon(java.lang.String,com.mapbox.geojson.BoundingBox,java.util.List)
kotlinx.coroutines.internal.ThreadSafeHeap: int _size
com.mapbox.mapboxsdk.maps.NativeMapView: double nativeGetZoom()
androidx.window.embedding.ExtensionEmbeddingBackend: void registerRule(androidx.window.embedding.EmbeddingRule)
com.google.android.datatransport.runtime.scheduling.jobscheduling.AlarmManagerSchedulerBroadcastReceiver: AlarmManagerSchedulerBroadcastReceiver()
io.flutter.plugins.imagepicker.CameraDevice: io.flutter.plugins.imagepicker.CameraDevice[] values()
androidx.window.embedding.ExtensionEmbeddingBackend$Companion
com.mapbox.mapboxsdk.style.types.FormattedSection: FormattedSection(java.lang.String,java.lang.Number,java.lang.String[])
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer progress
com.mapbox.mapboxsdk.style.layers.CircleLayer: java.lang.Object nativeGetCircleTranslateAnchor()
kotlinx.coroutines.channels.AbstractSendChannel: java.lang.Object onCloseHandler
com.mapbox.mapboxsdk.log.Logger: void setLoggerDefinition(com.mapbox.mapboxsdk.log.LoggerDefinition)
androidx.window.embedding.SplitRule$Api30Impl: androidx.window.embedding.SplitRule$Api30Impl INSTANCE
kotlin.jvm.internal.CallableReference: java.lang.Class owner
androidx.window.layout.SidecarAdapter: boolean isEqualSidecarWindowLayoutInfo(androidx.window.sidecar.SidecarWindowLayoutInfo,androidx.window.sidecar.SidecarWindowLayoutInfo)
com.mapbox.geojson.MultiPolygon: java.util.List polygons()
com.mapbox.mapboxsdk.style.layers.FillExtrusionLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetFillExtrusionHeightTransition()
com.google.android.material.bottomappbar.BottomAppBar: void setFabCradleMargin(float)
com.google.android.material.circularreveal.CircularRevealFrameLayout: android.graphics.drawable.Drawable getCircularRevealOverlayDrawable()
androidx.appcompat.widget.MenuPopupWindow$MenuDropDownListView: void setSelector(android.graphics.drawable.Drawable)
com.google.gson.JsonElement: java.lang.Number getAsNumber()
android.support.v4.media.AudioAttributesImplBaseParcelizer: AudioAttributesImplBaseParcelizer()
androidx.recyclerview.widget.RecyclerView: androidx.recyclerview.widget.RecyclerView$Adapter getAdapter()
androidx.window.layout.FoldingFeature$State: java.lang.String toString()
androidx.window.layout.DisplayCompatHelperApi28: DisplayCompatHelperApi28()
androidx.appcompat.widget.ActionBarOverlayLayout: void setWindowCallback(android.view.Window$Callback)
com.mapbox.geojson.Polygon: java.lang.String type
com.mapbox.mapboxsdk.util.TileServerOptions: com.mapbox.mapboxsdk.util.TileServerOptions mapLibreConfiguration()
com.google.gson.JsonPrimitive: boolean isBoolean()
com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory: java.util.Map access$200(com.dexterous.flutterlocalnotifications.RuntimeTypeAdapterFactory)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.app.AlarmManager getAlarmManager(android.content.Context)
androidx.window.embedding.ActivityStack: ActivityStack(java.util.List,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)
androidx.appcompat.widget.AppCompatTextView: int getAutoSizeStepGranularity()
com.google.android.material.appbar.AppBarLayout: int getDownNestedPreScrollRange()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.app.PendingIntent getActivityPendingIntent(android.content.Context,int,android.content.Intent)
com.mapbox.mapboxsdk.util.TileServerOptions: boolean apiKeyRequired
kotlinx.coroutines.EventLoopImplBase
androidx.window.embedding.EmbeddingAdapter: boolean translateActivityIntentPredicates$lambda-3(androidx.window.embedding.EmbeddingAdapter,java.util.Set,android.util.Pair)
com.mapbox.geojson.Point: java.lang.Object coordinates()
com.mapbox.mapboxsdk.style.layers.LineLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetLineTranslateTransition()
com.mapbox.mapboxsdk.style.layers.SymbolLayer: void nativeSetTextHaloColorTransition(long,long)
androidx.window.layout.WindowMetrics: WindowMetrics(androidx.window.core.Bounds)
androidx.window.layout.EmptyDecorator: androidx.window.layout.WindowInfoTracker decorate(androidx.window.layout.WindowInfoTracker)
androidx.window.R
com.google.android.material.circularreveal.cardview.CircularRevealCardView: void setCircularRevealScrimColor(int)
io.flutter.plugin.platform.SingleViewPresentation: SingleViewPresentation(android.content.Context,android.view.Display,io.flutter.plugin.platform.AccessibilityEventsDelegate,io.flutter.plugin.platform.SingleViewPresentation$PresentationState,android.view.View$OnFocusChangeListener,boolean)
com.google.firebase.messaging.reporting.MessagingClientEvent$MessageType: com.google.firebase.messaging.reporting.MessagingClientEvent$MessageType valueOf(java.lang.String)
kotlinx.coroutines.InvokeOnCancelling
com.dexterous.flutterlocalnotifications.models.PersonDetails: java.lang.String uri
androidx.window.embedding.MatcherUtils
com.mapbox.mapboxsdk.storage.FileSource$ResourceTransformCallback: java.lang.String onURL(int,java.lang.String)
com.mapbox.mapboxsdk.maps.renderer.egl.EGLConfigChooser$BufferFormat: com.mapbox.mapboxsdk.maps.renderer.egl.EGLConfigChooser$BufferFormat[] values()
com.google.gson.JsonPrimitive: boolean isString()
com.mapbox.mapboxsdk.annotations.BasePointCollection
androidx.window.layout.EmptyDecorator: androidx.window.layout.EmptyDecorator INSTANCE
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: android.graphics.Bitmap getBitmapFromSource(android.content.Context,java.lang.Object,com.dexterous.flutterlocalnotifications.models.BitmapSource)
com.mapbox.geojson.Point: java.lang.String TYPE
org.threeten.bp.ZoneRegion
com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency: com.dexterous.flutterlocalnotifications.models.ScheduledNotificationRepeatFrequency Weekly
com.google.android.material.floatingactionbutton.FloatingActionButton$Behavior: FloatingActionButton$Behavior()
androidx.appcompat.widget.ActionMenuView: void setPresenter(androidx.appcompat.widget.ActionMenuPresenter)
com.mapbox.mapboxsdk.style.sources.UnknownSource: UnknownSource(long)
com.mapbox.mapboxsdk.offline.OfflineGeometryRegionDefinition: OfflineGeometryRegionDefinition(java.lang.String,com.mapbox.geojson.Geometry,double,double,float)
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature[] values()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath
com.mapbox.mapboxsdk.style.light.Position
com.google.android.material.transformation.ExpandableTransformationBehavior
androidx.window.embedding.SplitPairRule: boolean finishSecondaryWithPrimary
kotlin.coroutines.jvm.internal.SuspendLambda: SuspendLambda(int,kotlin.coroutines.Continuation)
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object invokeSuspend(java.lang.Object)
com.google.android.material.appbar.AppBarLayout$BaseBehavior: AppBarLayout$BaseBehavior()
org.threeten.bp.OffsetTime
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPrePaused(android.app.Activity)
com.google.android.datatransport.cct.internal.NetworkConnectionInfo$NetworkType: com.google.android.datatransport.cct.internal.NetworkConnectionInfo$NetworkType valueOf(java.lang.String)
androidx.appcompat.app.AppCompatViewInflater: android.view.View createViewByPrefix(android.content.Context,java.lang.String,java.lang.String)
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: boolean validBounds(android.app.Activity,androidx.window.core.Bounds)
com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory: RuntimeTypeAdapterFactory(java.lang.Class,java.lang.String,boolean)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Object largeIcon
com.google.android.gms.common.Feature: android.os.Parcelable$Creator CREATOR
com.mapbox.mapboxsdk.offline.OfflineManager$MergeOfflineRegionsCallback
com.google.firebase.heartbeatinfo.HeartBeatInfo$HeartBeat: com.google.firebase.heartbeatinfo.HeartBeatInfo$HeartBeat[] values()
kotlinx.coroutines.scheduling.LimitingDispatcher: int inFlightTasks
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String SOUND
androidx.window.core.Version: androidx.window.core.Version access$getCURRENT$cp()
androidx.appcompat.app.AlertController$RecycleListView
androidx.window.core.Version: int getMinor()
com.google.gson.JsonPrimitive: boolean getAsBoolean()
androidx.window.embedding.EmbeddingBackend: void unregisterSplitListenerForActivity(androidx.core.util.Consumer)
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents[] values()
com.mapbox.mapboxsdk.snapshotter.MapSnapshotter: com.mapbox.mapboxsdk.style.sources.Source nativeGetSource(java.lang.String)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostResumed(android.app.Activity)
com.mapbox.mapboxsdk.style.layers.TransitionOptions: long duration
androidx.appcompat.widget.ActionMenuView: ActionMenuView(android.content.Context,android.util.AttributeSet)
com.mapbox.mapboxsdk.WellKnownTileServer: com.mapbox.mapboxsdk.WellKnownTileServer[] values()
androidx.constraintlayout.widget.Placeholder: void setContentId(int)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: int getRootAlpha()
com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory: com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory of(java.lang.Class,java.lang.String)
com.google.android.gms.common.internal.ReflectedParcelable
com.mapbox.mapboxsdk.snapshotter.MapSnapshotter: void setRegion(com.mapbox.mapboxsdk.geometry.LatLngBounds)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void setPivotX(float)
com.mapbox.geojson.BoundingBox: com.mapbox.geojson.BoundingBox fromPoints(com.mapbox.geojson.Point,com.mapbox.geojson.Point)
io.flutter.embedding.engine.FlutterJNI: void notifyLowMemoryWarning()
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.AccessibilityEventsDelegate accessibilityEventsDelegate
androidx.window.embedding.EmbeddingCompat: boolean DEBUG
androidx.window.layout.ActivityCompatHelperApi24: ActivityCompatHelperApi24()
androidx.recyclerview.widget.RecyclerView: long getNanoTime()
com.mapbox.geojson.Point$GsonTypeAdapter: Point$GsonTypeAdapter(com.google.gson.Gson)
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails fromNotificationDetails(com.dexterous.flutterlocalnotifications.models.NotificationDetails)
com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Listener listeners
com.mapbox.geojson.MultiPoint: java.lang.Object coordinates()
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType[] values()
com.google.android.material.floatingactionbutton.FloatingActionButton: android.graphics.PorterDuff$Mode getBackgroundTintMode()
org.threeten.bp.format.ResolverStyle: org.threeten.bp.format.ResolverStyle valueOf(java.lang.String)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String tag
com.mapbox.geojson.MultiLineString: com.mapbox.geojson.MultiLineString fromLngLats(java.util.List,com.mapbox.geojson.BoundingBox)
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: java.util.concurrent.Executor executor
androidx.cardview.widget.CardView: void setMinimumHeight(int)
androidx.appcompat.widget.SearchView
androidx.appcompat.widget.FitWindowsFrameLayout: void setOnFitSystemWindowsListener(androidx.appcompat.widget.FitWindowsViewGroup$OnFitSystemWindowsListener)
org.threeten.bp.chrono.ChronoLocalDateTimeImpl: java.lang.Object writeReplace()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean autoCancel
com.mapbox.geojson.MultiLineString: com.mapbox.geojson.BoundingBox bbox
androidx.media.AudioAttributesImplBaseParcelizer: void write(androidx.media.AudioAttributesImplBase,androidx.versionedparcelable.VersionedParcel)
androidx.constraintlayout.solver.widgets.ConstraintAnchor$ConnectionType: androidx.constraintlayout.solver.widgets.ConstraintAnchor$ConnectionType valueOf(java.lang.String)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetIconKeepUpright()
android.support.v4.app.RemoteActionCompatParcelizer: androidx.core.app.RemoteActionCompat read(androidx.versionedparcelable.VersionedParcel)
androidx.window.layout.WindowInfoTrackerImpl
io.flutter.embedding.engine.FlutterJNI: void setPlatformMessageHandler(io.flutter.embedding.engine.dart.PlatformMessageHandler)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setVibrationPattern(com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeInitialize(com.mapbox.mapboxsdk.maps.NativeMapView,com.mapbox.mapboxsdk.storage.FileSource,com.mapbox.mapboxsdk.maps.renderer.MapRenderer,float,boolean)
com.mapbox.mapboxsdk.maps.renderer.MapRenderer
androidx.appcompat.widget.AppCompatTextView: int[] getAutoSizeTextAvailableSizes()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String LED_ON_MS
androidx.window.embedding.SplitPairRule: boolean getFinishPrimaryWithSecondary()
com.mapbox.mapboxsdk.geometry.LatLngQuad: LatLngQuad(com.mapbox.mapboxsdk.geometry.LatLng,com.mapbox.mapboxsdk.geometry.LatLng,com.mapbox.mapboxsdk.geometry.LatLng,com.mapbox.mapboxsdk.geometry.LatLng)
androidx.window.layout.SidecarWindowBackend: androidx.window.layout.SidecarWindowBackend access$getGlobalInstance$cp()
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: void onSplitInfoChanged(java.util.List)
androidx.window.embedding.ActivityStack: java.util.List getActivities$window_release()
androidx.appcompat.widget.ActionMenuView: android.view.Menu getMenu()
com.mapbox.mapboxsdk.log.Logger: void i(java.lang.String,java.lang.String)
io.flutter.embedding.android.FlutterSurfaceView: io.flutter.embedding.engine.renderer.FlutterRenderer getAttachedRenderer()
com.mapbox.mapboxsdk.Mapbox: com.mapbox.mapboxsdk.util.TileServerOptions tileServerOptions
androidx.constraintlayout.solver.widgets.ConstraintWidget$DimensionBehaviour: androidx.constraintlayout.solver.widgets.ConstraintWidget$DimensionBehaviour valueOf(java.lang.String)
androidx.appcompat.widget.LinearLayoutCompat: int getShowDividers()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View access$602(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,android.view.View)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Integer visibility
io.flutter.plugins.firebase.core.FlutterFirebaseCoreRegistrar: FlutterFirebaseCoreRegistrar()
com.mapbox.mapboxsdk.style.layers.SymbolLayer: void nativeSetTextHaloBlurTransition(long,long)
kotlin.jvm.internal.Lambda: java.lang.String toString()
com.google.android.material.button.MaterialButton: void setBackgroundTintList(android.content.res.ColorStateList)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void startForegroundService(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.dexterous.flutterlocalnotifications.models.styles.MessagingStyleInformation
com.mapbox.mapboxsdk.offline.OfflineGeometryRegionDefinition: float pixelRatio
androidx.appcompat.widget.SearchView: int getMaxWidth()
com.google.android.material.bottomappbar.BottomAppBar: boolean getHideOnScroll()
com.mapbox.mapboxsdk.style.layers.FillLayer: java.lang.Object nativeGetFillTranslateAnchor()
androidx.window.embedding.SplitRule: int hashCode()
com.google.android.material.floatingactionbutton.FloatingActionButton: int getCustomSize()
io.flutter.embedding.engine.FlutterOverlaySurface: android.view.Surface getSurface()
androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1: androidx.window.layout.WindowMetricsCalculator invoke(androidx.window.layout.WindowMetricsCalculator)
androidx.recyclerview.widget.RecyclerView: void setViewCacheExtension(androidx.recyclerview.widget.RecyclerView$ViewCacheExtension)
io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode: io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode valueOf(java.lang.String)
com.mapbox.geojson.GeometryCollection: com.mapbox.geojson.GeometryCollection fromGeometries(java.util.List,com.mapbox.geojson.BoundingBox)
com.mapbox.geojson.Feature: com.mapbox.geojson.Feature fromGeometry(com.mapbox.geojson.Geometry,com.google.gson.JsonObject,com.mapbox.geojson.BoundingBox)
androidx.window.embedding.EmbeddingCompat: EmbeddingCompat(androidx.window.extensions.embedding.ActivityEmbeddingComponent,androidx.window.embedding.EmbeddingAdapter)
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback
com.mapbox.geojson.GeometryCollection: com.google.gson.TypeAdapter typeAdapter(com.google.gson.Gson)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setActivity(android.app.Activity)
com.mapbox.mapboxsdk.maps.renderer.MapRenderer: double expectedRenderTime
com.mapbox.geojson.Feature: boolean hasNonNullValueForProperty(java.lang.String)
android.support.v4.media.session.ParcelableVolumeInfo
com.mapbox.mapboxsdk.style.sources.Source: void nativeSetMinimumTileUpdateInterval(java.lang.Long)
com.mapbox.mapboxsdk.offline.OfflineRegionDefinition
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void zonedScheduleNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.lang.Boolean)
com.mapbox.mapboxsdk.style.layers.CannotAddLayerException: CannotAddLayerException(java.lang.String)
com.mapbox.mapboxsdk.offline.OfflineRegion: void finalize()
com.mapbox.geojson.Polygon: com.mapbox.geojson.Polygon fromLngLats(java.util.List,com.mapbox.geojson.BoundingBox)
com.mapbox.mapboxsdk.Mapbox: java.lang.Boolean isConnected()
kotlin.coroutines.jvm.internal.SuspendLambda: java.lang.String toString()
kotlinx.coroutines.channels.AbstractChannel$enqueueReceiveInternal$$inlined$addLastIfPrevAndIf$1
com.dexterous.flutterlocalnotifications.models.NotificationDetails: void readLedInformation(com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.util.Map)
com.dexterous.flutterlocalnotifications.models.PersonDetails: java.lang.String name
androidx.window.core.Version: int hashCode()
com.dexterous.flutterlocalnotifications.models.IconSource: com.dexterous.flutterlocalnotifications.models.IconSource valueOf(java.lang.String)
androidx.window.layout.SidecarWindowBackend: void registerLayoutChangeCallback(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType[] values()
androidx.appcompat.view.menu.ActionMenuItemView: void setIcon(android.graphics.drawable.Drawable)
com.mapbox.mapboxsdk.style.layers.CircleLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetCircleOpacityTransition()
com.mapbox.mapboxsdk.style.types.FormattedSection: java.lang.String toString()
com.mapbox.mapboxsdk.style.sources.GeoJsonSource: void finalize()
com.mapbox.mapboxsdk.style.sources.CannotAddSourceException
com.mapbox.mapboxsdk.offline.OfflineManager$ListOfflineRegionsCallback: void onList(com.mapbox.mapboxsdk.offline.OfflineRegion[])
com.mapbox.mapboxsdk.util.TileServerOptions: com.mapbox.mapboxsdk.util.DefaultStyle[] defaultStyles
io.flutter.embedding.engine.FlutterJNI: boolean nativeGetIsSoftwareRenderingEnabled()
org.threeten.bp.chrono.JapaneseEra
kotlin.jvm.internal.FunctionReference: boolean isInfix()
com.mapbox.geojson.GeometryCollection: java.lang.String type
com.mapbox.geojson.ListofListofListOfPointCoordinatesTypeAdapter: java.util.List read(com.google.gson.stream.JsonReader)
com.mapbox.mapboxsdk.style.sources.Source
com.mapbox.geojson.ListOfListOfPointCoordinatesTypeAdapter: java.util.List read(com.google.gson.stream.JsonReader)
com.mapbox.mapboxsdk.style.light.Light: void nativeSetIntensity(float)
androidx.window.embedding.SplitController$Companion: SplitController$Companion()
com.mapbox.mapboxsdk.style.sources.GeoJsonSource: int nativeGetClusterExpansionZoom(com.mapbox.geojson.Feature)
androidx.appcompat.widget.ActionBarOverlayLayout: void setIcon(android.graphics.drawable.Drawable)
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchPointerDataPacket(long,java.nio.ByteBuffer,int)
com.dexterous.flutterlocalnotifications.RepeatInterval: com.dexterous.flutterlocalnotifications.RepeatInterval Daily
com.mapbox.geojson.Polygon: com.mapbox.geojson.Polygon fromOuterInner(com.mapbox.geojson.LineString,com.mapbox.geojson.LineString[])
com.mapbox.mapboxsdk.style.light.Light: float nativeGetIntensity()
com.mapbox.mapboxsdk.style.sources.UnknownSource
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setSound(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String payload
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: androidx.core.util.Consumer callback
com.mapbox.mapboxsdk.log.Logger: void w(java.lang.String,java.lang.String,java.lang.Throwable)
androidx.appcompat.widget.Toolbar: java.lang.CharSequence getNavigationContentDescription()
io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap getBitmap()
com.google.android.material.button.MaterialButton: void setIconPadding(int)
com.mapbox.mapboxsdk.style.layers.SymbolLayer: void nativeSetIconHaloColorTransition(long,long)
androidx.cardview.widget.CardView: int getContentPaddingTop()
com.mapbox.mapboxsdk.style.types.FormattedSection: int hashCode()
com.google.android.gms.maps.model.VisibleRegion: android.os.Parcelable$Creator CREATOR
androidx.window.layout.FoldingFeature$Orientation: androidx.window.layout.FoldingFeature$Orientation$Companion Companion
androidx.window.layout.WindowMetricsCalculator$Companion: androidx.window.layout.WindowMetricsCalculator getOrCreate()
androidx.appcompat.widget.AppCompatImageView: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
com.google.android.datatransport.cct.internal.QosTier: com.google.android.datatransport.cct.internal.QosTier valueOf(java.lang.String)
androidx.appcompat.widget.AppCompatTextView: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
com.google.android.material.transformation.ExpandableBehavior
androidx.window.layout.ActivityCompatHelperApi30: android.graphics.Rect currentWindowBounds(android.app.Activity)
com.mapbox.mapboxsdk.log.Logger: int INFO
com.mapbox.geojson.gson.BoundingBoxTypeAdapter: BoundingBoxTypeAdapter()
com.mapbox.geojson.utils.PolylineUtils: java.util.List simplify(java.util.List)
com.mapbox.geojson.MultiLineString: com.mapbox.geojson.MultiLineString fromLngLats(double[][][])
com.mapbox.geojson.Feature: void addBooleanProperty(java.lang.String,java.lang.Boolean)
com.dexterous.flutterlocalnotifications.models.styles.InboxStyleInformation: java.lang.Boolean htmlFormatLines
androidx.appcompat.view.menu.ListMenuItemView: void setIcon(android.graphics.drawable.Drawable)
androidx.appcompat.widget.AppCompatImageButton: void setSupportImageTintMode(android.graphics.PorterDuff$Mode)
com.mapbox.mapboxsdk.util.TileServerOptions: com.mapbox.mapboxsdk.util.TileServerOptions defaultConfiguration()
com.mapbox.mapboxsdk.style.layers.CircleLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetCircleBlurTransition()
com.mapbox.mapboxsdk.Mapbox: boolean hasInstance()
androidx.window.layout.SidecarCompat$TranslatingCallback: SidecarCompat$TranslatingCallback(androidx.window.layout.SidecarCompat)
androidx.appcompat.widget.AppCompatTextView: android.content.res.ColorStateList getSupportBackgroundTintList()
androidx.window.embedding.SplitPairFilter: int hashCode()
androidx.coordinatorlayout.widget.CoordinatorLayout: java.util.List getDependencySortedChildren()
com.google.android.material.appbar.AppBarLayout: void setTargetElevation(float)
com.mapbox.geojson.MultiPolygon: com.mapbox.geojson.MultiPolygon fromPolygons(java.util.List,com.mapbox.geojson.BoundingBox)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void setStyle(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,androidx.core.app.NotificationCompat$Builder)
com.dexterous.flutterlocalnotifications.RepeatInterval: RepeatInterval(java.lang.String,int)
androidx.window.embedding.SplitPairFilter: android.content.ComponentName getSecondaryActivityName()
androidx.loader.app.LoaderManagerImpl$LoaderViewModel
com.mapbox.mapboxsdk.maps.Image: byte[] buffer
com.mapbox.mapboxsdk.style.sources.ImageSource
com.mapbox.mapboxsdk.style.layers.LineLayer: void initialize(java.lang.String,java.lang.String)
com.mapbox.mapboxsdk.style.layers.HeatmapLayer: void finalize()
androidx.appcompat.widget.LinearLayoutCompat: void setShowDividers(int)
kotlinx.coroutines.channels.Receive
org.threeten.bp.chrono.MinguoEra: org.threeten.bp.chrono.MinguoEra[] values()
com.mapbox.mapboxsdk.maps.renderer.MapRenderer: long timeElapsed
com.mapbox.mapboxsdk.offline.OfflineManager: void mergeOfflineRegions(com.mapbox.mapboxsdk.storage.FileSource,java.lang.String,com.mapbox.mapboxsdk.offline.OfflineManager$MergeOfflineRegionsCallback)
androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateActivityPredicates(java.util.Set)
androidx.appcompat.widget.AbsActionBarView: int getAnimatedVisibility()
com.mapbox.geojson.GeometryCollection$GsonTypeAdapter: com.google.gson.TypeAdapter boundingBoxTypeAdapter
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String TAG
com.google.android.gms.signin.internal.zag: android.os.Parcelable$Creator CREATOR
com.mapbox.mapboxsdk.snapshotter.MapSnapshotter: void nativeAddLayerAbove(long,java.lang.String)
androidx.window.embedding.EmbeddingTranslatingCallback: androidx.window.embedding.EmbeddingAdapter adapter
androidx.window.core.Version: androidx.window.core.Version VERSION_1_0
androidx.appcompat.widget.Toolbar: android.view.MenuInflater getMenuInflater()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SUB_TEXT
com.google.android.material.internal.BaselineLayout
androidx.window.layout.SidecarAdapter: boolean isEqualSidecarDisplayFeatures(java.util.List,java.util.List)
androidx.window.layout.WindowMetricsCalculatorCompat: androidx.window.layout.WindowMetrics computeCurrentWindowMetrics(android.app.Activity)
com.google.android.material.behavior.SwipeDismissBehavior: SwipeDismissBehavior()
com.dexterous.flutterlocalnotifications.utils.BooleanUtils: BooleanUtils()
androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup$FullSpanItem: android.os.Parcelable$Creator CREATOR
androidx.window.layout.SidecarWindowBackend: boolean isActivityRegistered(android.app.Activity)
com.google.android.material.floatingactionbutton.FloatingActionButton: com.google.android.material.floatingactionbutton.FloatingActionButtonImpl getImpl()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String PERSON
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay valueOf(java.lang.String)
androidx.window.embedding.EmbeddingCompat: androidx.window.extensions.embedding.ActivityEmbeddingComponent embeddingExtension
android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper
kotlinx.coroutines.scheduling.WorkQueue: int producerIndex
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_START
io.flutter.plugins.firebase.messaging.FlutterFirebaseAppRegistrar: java.util.List getComponents()
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter
com.google.android.material.bottomappbar.BottomAppBar: androidx.appcompat.widget.ActionMenuView getActionMenuView()
io.flutter.embedding.engine.FlutterJNI: java.lang.Long nativeShellHolderId
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void setPivotY(float)
com.mapbox.mapboxsdk.location.LocationIndicatorLayer: java.lang.Object nativeGetTopImage()
com.dexterous.flutterlocalnotifications.utils.StringUtils
androidx.window.embedding.EmbeddingAdapter: androidx.window.embedding.SplitInfo translate(androidx.window.extensions.embedding.SplitInfo)
com.google.gson.JsonObject: int hashCode()
com.mapbox.mapboxsdk.utils.StringUtils: java.lang.String unaccent(java.lang.String)
androidx.window.layout.WindowInfoTracker$Companion: androidx.window.layout.WindowInfoTracker getOrCreate(android.content.Context)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String VIBRATION_PATTERN
com.mapbox.geojson.Point$GsonTypeAdapter: com.mapbox.geojson.CoordinateContainer createCoordinateContainer(java.lang.String,com.mapbox.geojson.BoundingBox,java.util.List)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: float getTrimPathStart()
kotlin.jvm.internal.CallableReference: java.lang.String name
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: android.app.Activity activity
com.mapbox.geojson.ListOfDoublesCoordinatesTypeAdapter
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.concurrent.CopyOnWriteArrayList splitChangeCallbacks
androidx.window.core.Bounds: boolean isZero()
androidx.recyclerview.widget.RecyclerView: androidx.recyclerview.widget.RecyclerView$ItemAnimator getItemAnimator()
io.flutter.embedding.engine.FlutterJNI: void onFirstFrame()
com.mapbox.mapboxsdk.style.layers.FillLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetFillColorTransition()
com.mapbox.mapboxsdk.snapshotter.MapSnapshotter: void nativeStart()
com.mapbox.mapboxsdk.style.layers.SymbolLayer: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetTextOpacityTransition()
com.mapbox.geojson.Point$GsonTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
com.google.android.material.behavior.HideBottomViewOnScrollBehavior: HideBottomViewOnScrollBehavior()
org.threeten.bp.Month: org.threeten.bp.Month[] values()
com.mapbox.geojson.Polygon: com.mapbox.geojson.BoundingBox bbox()
com.mapbox.geojson.MultiPolygon$GsonTypeAdapter
com.dexterous.flutterlocalnotifications.models.NotificationChannelDetails: java.lang.String SHOW_BADGE
com.mapbox.mapboxsdk.style.layers.FillLayer: void nativeSetFillPatternTransition(long,long)
androidx.window.embedding.SplitRule: boolean equals(java.lang.Object)
kotlin.jvm.internal.FunctionReference: boolean isExternal()
androidx.window.embedding.SplitController: androidx.window.embedding.SplitController getInstance()
androidx.appcompat.widget.SearchView: void setSubmitButtonEnabled(boolean)
com.dexterous.flutterlocalnotifications.models.DateTimeComponents: com.dexterous.flutterlocalnotifications.models.DateTimeComponents DayOfMonthAndTime
kotlinx.coroutines.StandaloneCoroutine
com.dexterous.flutterlocalnotifications.models.styles.BigTextStyleInformation: BigTextStyleInformation(java.lang.Boolean,java.lang.Boolean,java.lang.String,java.lang.Boolean,java.lang.String,java.lang.Boolean,java.lang.String,java.lang.Boolean)
androidx.window.core.Version: androidx.window.core.Version CURRENT
com.mapbox.mapboxsdk.maps.NativeMapView: void onDidBecomeIdle()
androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1: androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1 INSTANCE
com.google.android.material.appbar.AppBarLayout: void setLiftOnScroll(boolean)
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeRemoveImage(java.lang.String)
com.google.gson.TypeAdapter: java.lang.Object fromJson(java.io.Reader)
kotlin.jvm.internal.CallableReference: kotlin.reflect.KDeclarationContainer getOwner()
io.flutter.plugin.platform.SingleViewPresentation: int viewId
com.mapbox.mapboxsdk.style.layers.SymbolLayer: java.lang.Object nativeGetSymbolPlacement()
androidx.appcompat.widget.LinearLayoutCompat: LinearLayoutCompat(android.content.Context,android.util.AttributeSet,int)
androidx.window.embedding.ActivityRule: int hashCode()
com.google.gson.JsonElement: boolean isJsonObject()
kotlinx.coroutines.android.AndroidExceptionPreHandler: void handleException(kotlin.coroutines.CoroutineContext,java.lang.Throwable)
com.mapbox.mapboxsdk.log.Logger: int DEBUG
com.google.android.material.appbar.AppBarLayout: int getUpNestedPreScrollRange()
androidx.appcompat.widget.ActionBarOverlayLayout: void setHideOnContentScrollEnabled(boolean)
com.mapbox.mapboxsdk.location.LocationComponentOptions: android.os.Parcelable$Creator CREATOR
io.flutter.embedding.engine.FlutterJNI: boolean prefetchDefaultFontManagerCalled
com.mapbox.mapboxsdk.maps.renderer.glsurfaceview.MapboxGLSurfaceView: void setRenderer(android.opengl.GLSurfaceView$Renderer)
com.google.android.gms.maps.model.TileOverlayOptions: android.os.Parcelable$Creator CREATOR
com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory: java.lang.String access$100(com.mapbox.geojson.internal.typeadapters.RuntimeTypeAdapterFactory)
androidx.appcompat.widget.AppCompatButton: void setBackgroundResource(int)
com.mapbox.mapboxsdk.camera.CameraPosition: CameraPosition(com.mapbox.mapboxsdk.geometry.LatLng,double,double,double,double[])
com.google.android.datatransport.runtime.backends.TransportBackendDiscovery: TransportBackendDiscovery()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String getNextFireDate(com.dexterous.flutterlocalnotifications.models.NotificationDetails)
com.mapbox.geojson.GeometryCollection: java.lang.String TYPE
androidx.constraintlayout.widget.ConstraintLayout: int getMaxHeight()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String CHANNEL_SHOW_BADGE
androidx.window.layout.SidecarWindowBackend: java.util.concurrent.locks.ReentrantLock access$getGlobalLock$cp()
androidx.window.core.Version: java.lang.String description
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String COLOR_BLUE
com.mapbox.geojson.Feature$GsonTypeAdapter: com.google.gson.TypeAdapter stringTypeAdapter
androidx.window.R$id: int rtl
androidx.window.layout.SidecarAdapter: java.lang.String access$getTAG$cp()
kotlin.coroutines.jvm.internal.BaseContinuationImpl: java.lang.StackTraceElement getStackTraceElement()
com.mapbox.geojson.FeatureCollection: java.lang.String toString()
com.mapbox.mapboxsdk.offline.OfflineManager: void runPackDatabaseAutomatically(boolean)
com.mapbox.geojson.Point: double altitude()
com.google.android.material.button.MaterialButton: android.graphics.PorterDuff$Mode getIconTintMode()
com.mapbox.mapboxsdk.offline.OfflineManager: void nativeResetDatabase(com.mapbox.mapboxsdk.offline.OfflineManager$FileSourceCallback)
com.mapbox.mapboxsdk.maps.renderer.MapRenderer: void onSurfaceDestroyed()
com.mapbox.mapboxsdk.maps.NativeMapView: long[] nativeAddPolygons(com.mapbox.mapboxsdk.annotations.Polygon[])
androidx.recyclerview.widget.RecyclerView: void setClipToPadding(boolean)
kotlin.coroutines.jvm.internal.SuspendLambda: int arity
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void initAndroidThreeTen(android.content.Context)
androidx.window.R$styleable: int SplitPairRule_splitMinSmallestWidth
org.threeten.bp.format.SignStyle: org.threeten.bp.format.SignStyle[] values()
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type: io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type valueOf(java.lang.String)
com.google.gson.JsonArray: float getAsFloat()
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode[] values()
com.google.android.gms.auth.api.signin.GoogleSignInAccount: android.os.Parcelable$Creator CREATOR
androidx.core.app.CoreComponentFactory: CoreComponentFactory()
com.mapbox.mapboxsdk.style.sources.Source: long getNativePtr()
io.flutter.embedding.android.DrawableSplashScreen$DrawableSplashScreenView: void setSplashDrawable(android.graphics.drawable.Drawable)
com.mapbox.mapboxsdk.offline.OfflineRegion: long nativePtr
com.mapbox.mapboxsdk.style.sources.ImageSource: java.lang.String nativeGetUrl()
androidx.window.embedding.SplitRuleParser: java.util.Set parseSplitXml(android.content.Context,int)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1: WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1(androidx.core.util.Consumer)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String SHORTCUT_ID
androidx.window.layout.HardwareFoldingFeature$Type$Companion: HardwareFoldingFeature$Type$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
com.mapbox.mapboxsdk.maps.renderer.MapRenderer: void onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode valueOf(java.lang.String)
com.mapbox.mapboxsdk.style.layers.RasterLayer: java.lang.Object nativeGetRasterContrast()
kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)
androidx.window.layout.SidecarCompat: SidecarCompat(androidx.window.sidecar.SidecarInterface,androidx.window.layout.SidecarAdapter)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: java.lang.String GET_ACTIVE_NOTIFICATIONS_ERROR_MESSAGE
kotlin.coroutines.jvm.internal.BaseContinuationImpl: void resumeWith(java.lang.Object)
com.mapbox.mapboxsdk.annotations.BubbleLayout: float getCornersRadius()
com.google.android.material.button.MaterialButton: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
com.google.android.datatransport.cct.CctBackendFactory
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String sound
androidx.window.core.Version: int major
org.threeten.bp.chrono.JapaneseDate: void readObject(java.io.ObjectInputStream)
androidx.window.embedding.SplitController: androidx.window.embedding.SplitController access$getGlobalInstance$cp()
kotlin.coroutines.jvm.internal.ContinuationImpl: ContinuationImpl(kotlin.coroutines.Continuation)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Long timeoutAfter
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String MAX_PROGRESS
com.mapbox.mapboxsdk.maps.NativeMapView: void onCameraDidChange(boolean)
com.mapbox.mapboxsdk.style.types.FormattedSection: void setTextColor(java.lang.Object)
androidx.window.layout.FoldingFeature$Orientation
androidx.window.layout.SidecarCompat: java.util.Map access$getWindowListenerRegisteredContexts$p(androidx.window.layout.SidecarCompat)
com.mapbox.mapboxsdk.offline.OfflineRegionError
androidx.window.layout.SidecarWindowBackend$Companion: SidecarWindowBackend$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
androidx.window.core.Version: androidx.window.core.Version access$getVERSION_1_0$cp()
com.mapbox.mapboxsdk.style.sources.VectorSource
com.mapbox.mapboxsdk.util.TileServerOptions: java.lang.String baseURL
android.support.v4.media.MediaDescriptionCompat
android.support.v4.media.session.PlaybackStateCompat$CustomAction
androidx.window.core.Bounds: int getTop()
androidx.window.R$styleable: int SplitPlaceholderRule_splitMinWidth
com.dexterous.flutterlocalnotifications.models.NotificationChannelGroupDetails: java.lang.String NAME
androidx.appcompat.widget.Toolbar: void setContentInsetEndWithActions(int)
androidx.appcompat.widget.ViewStubCompat: void setOnInflateListener(androidx.appcompat.widget.ViewStubCompat$OnInflateListener)
androidx.appcompat.widget.ActionBarOverlayLayout: int getActionBarHideOffset()
kotlinx.coroutines.internal.LockFreeTaskQueue: java.lang.Object _cur
com.mapbox.mapboxsdk.storage.FileSource: long nativePtr
com.google.android.gms.location.LocationSettingsStates: android.os.Parcelable$Creator CREATOR
androidx.window.layout.FoldingFeature$State
com.mapbox.mapboxsdk.offline.OfflineRegion: void getOfflineRegionStatus(com.mapbox.mapboxsdk.offline.OfflineRegion$OfflineRegionStatusCallback)
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: void scheduleNotification(android.content.Context,com.dexterous.flutterlocalnotifications.models.NotificationDetails,java.lang.Boolean)
com.mapbox.geojson.shifter.CoordinateShifterManager$1: java.util.List unshiftPoint(com.mapbox.geojson.Point)
com.google.android.gms.location.LocationSettingsRequest: android.os.Parcelable$Creator CREATOR
kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext _context
com.google.android.material.bottomappbar.BottomAppBar: float getCradleVerticalOffset()
com.mapbox.mapboxsdk.style.sources.CustomGeometrySource: void startThreads()
androidx.constraintlayout.widget.ConstraintHelper
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$200(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
com.google.android.gms.common.internal.GetServiceRequest: android.os.Parcelable$Creator CREATOR
androidx.appcompat.widget.LinearLayoutCompat: android.graphics.drawable.Drawable getDividerDrawable()
androidx.fragment.app.BackStackState: android.os.Parcelable$Creator CREATOR
androidx.appcompat.widget.AppCompatButton: int getAutoSizeTextType()
com.mapbox.mapboxsdk.location.LocationIndicatorLayer: void initialize(java.lang.String)
com.mapbox.mapboxsdk.util.TileServerOptions: java.lang.String glyphsVersionPrefix
com.mapbox.mapboxsdk.style.layers.CircleLayer: void nativeSetCircleRadiusTransition(long,long)
com.google.android.material.appbar.AppBarLayout$BaseBehavior$SavedState: android.os.Parcelable$Creator CREATOR
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityStopped(android.app.Activity)
com.mapbox.mapboxsdk.maps.NativeMapView: void nativePixelsForLatLngs(double[],double[],float)
com.mapbox.mapboxsdk.maps.NativeMapView: com.mapbox.mapboxsdk.style.layers.TransitionOptions nativeGetTransitionOptions()
com.mapbox.mapboxsdk.style.layers.FillExtrusionLayer: java.lang.Object nativeGetFillExtrusionTranslateAnchor()
androidx.window.embedding.EmbeddingTranslatingCallback: void accept(java.lang.Object)
com.google.android.datatransport.runtime.scheduling.jobscheduling.JobInfoSchedulerService: JobInfoSchedulerService()
com.dexterous.flutterlocalnotifications.FlutterLocalNotificationsPlugin: boolean onNewIntent(android.content.Intent)
androidx.core.widget.NestedScrollView: int getScrollRange()
com.google.gson.JsonObject: com.google.gson.JsonObject getAsJsonObject(java.lang.String)
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ENABLE_LIGHTS
com.mapbox.mapboxsdk.maps.NativeMapView: double nativeGetBearing()
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Boolean allowWhileIdle
com.mapbox.geojson.GeometryCollection: com.mapbox.geojson.BoundingBox bbox()
kotlinx.coroutines.channels.ArrayChannel
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.Long millisecondsSinceEpoch
io.flutter.embedding.engine.FlutterJNI: void setDeferredComponentManager(io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager)
com.dexterous.flutterlocalnotifications.models.styles.DefaultStyleInformation: DefaultStyleInformation(java.lang.Boolean,java.lang.Boolean)
com.mapbox.mapboxsdk.style.layers.CircleLayer: java.lang.Object nativeGetCircleOpacity()
androidx.window.layout.SidecarCompat: androidx.window.layout.SidecarAdapter sidecarAdapter
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityResumed(android.app.Activity)
androidx.recyclerview.widget.RecyclerView: void setLayoutFrozen(boolean)
com.example.takecare_user.MainActivity
com.dexterous.flutterlocalnotifications.models.NotificationDetails: java.lang.String ONGOING
com.mapbox.mapboxsdk.maps.renderer.MapRenderer: void setMaximumFps(int)
com.mapbox.mapboxsdk.style.sources.UnknownSource: void initialize()
com.mapbox.mapboxsdk.annotations.BubbleLayout: float getArrowWidth()
com.mapbox.mapboxsdk.maps.NativeMapView: void nativeSetBearing(double,long)
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.Set getSplitRules()
com.dexterous.flutterlocalnotifications.RepeatInterval: com.dexterous.flutterlocalnotifications.RepeatInterval valueOf(java.lang.String)
com.google.android.material.floatingactionbutton.FloatingActionButton: void setRippleColor(int)
org.threeten.bp.OffsetDateTime
com.google.android.gms.cloudmessaging.zzd: android.os.Parcelable$Creator CREATOR
com.google.android.datatransport.cct.CctBackendFactory: com.google.android.datatransport.runtime.backends.TransportBackend create(com.google.android.datatransport.runtime.backends.CreationContext)
